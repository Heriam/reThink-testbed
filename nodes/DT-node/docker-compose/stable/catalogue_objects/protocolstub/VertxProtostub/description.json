{
    "cguid": 40001,
    "type": "ProtoStubs",
    "version": "0.1",
    "description": "Description of VertxProtoStub",
    "objectName": "VertxProtoStub",
    "sourcePackageURL": "/sourcePackage",
    "sourcePackage": {
      "sourceCode": "",
      "sourceCodeClassname": "VertxProtoStub",
      "encoding": "base64",
      "signature": ""
    },
    "language": "javascript",
    "signature": "",
    "messageSchemas": [],
    "configuration": {
      "url": "wss://msg-node.fokus.fraunhofer.de/ws"
    },
    "constraints": [],
    "hypertyCapabilities": [],
    "protocolCapabilities": [],
    "policies": [],
    "dataObjects": [],
    "accessControlPolicy": "somePolicy"
  }
