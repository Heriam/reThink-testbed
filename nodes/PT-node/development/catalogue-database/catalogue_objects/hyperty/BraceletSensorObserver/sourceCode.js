(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("activate", [], factory);
	else if(typeof exports === 'object')
		exports["activate"] = factory();
	else
		root["activate"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = activate;
	
	var _IdentityManager = __webpack_require__(1);
	
	var _IdentityManager2 = _interopRequireDefault(_IdentityManager);
	
	var _Syncher = __webpack_require__(2);
	
	var _Discovery = __webpack_require__(3);
	
	var _Discovery2 = _interopRequireDefault(_Discovery);
	
	var _utils = __webpack_require__(4);
	
	var _Search = __webpack_require__(5);
	
	var _Search2 = _interopRequireDefault(_Search);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var BraceletSensorObserver = function () {
	  function BraceletSensorObserver(hypertyURL, bus, configuration) {
	    _classCallCheck(this, BraceletSensorObserver);
	
	    if (!hypertyURL) throw new Error('The hypertyURL is a needed parameter');
	    if (!bus) throw new Error('The MiniBus is a needed parameter');
	    if (!configuration) throw new Error('The configuration is a needed parameter');
	    var _this = this;
	    var identityManager = new _IdentityManager2.default(hypertyURL, configuration.runtimeURL, bus);
	    console.log('hypertyURL->', hypertyURL);
	    _this._domain = (0, _utils.divideURL)(hypertyURL).domain;
	    _this._objectDescURL = 'hyperty-catalogue://catalogue.' + _this._domain + '/.well-known/dataschema/Context';
	
	    console.log('Init BraceletSensorObserver: ', hypertyURL);
	    _this._syncher = new _Syncher.Syncher(hypertyURL, bus, configuration);
	    var discovery = new _Discovery2.default(hypertyURL, bus);
	    _this._discovery = discovery;
	    _this.identityManager = identityManager;
	    _this.search = new _Search2.default(discovery, identityManager);
	    window.discovery = _this._discovery;
	  }
	
	  _createClass(BraceletSensorObserver, [{
	    key: 'discovery',
	    value: function discovery(email, domain) {
	      var _this = this;
	      return new Promise(function (resolve, reject) {
	        _this.search.users([email], [domain], ['context'], ['steps', 'battery']).then(function (a) {
	          console.log('result search users->', a);
	          resolve(a);
	        });
	      });
	    }
	  }, {
	    key: 'connect',
	    value: function connect(hypertyID) {
	      var _this = this;
	      return new Promise(function (resolve, reject) {
	        _this._discovery.discoverDataObjectPerReporter(hypertyID, _this._domain).then(function (dataObject) {
	          console.log('discovery dataobject', dataObject);
	          var key = Object.keys(dataObject);
	          console.log('URL DATA Object', key[0]);
	          resolve(key[0]);
	        });
	      });
	    }
	  }, {
	    key: 'ObserveBracelet',
	    value: function ObserveBracelet(url) {
	      var _this = this;
	      return new Promise(function (resolve, reject) {
	        _this._syncher.subscribe(_this._objectDescURL, url).then(function (observer) {
	          console.log('data object observer', observer);
	          resolve(observer);
	          observer.onChange('*', function (event) {
	            console.log('event->->->->->:', event);
	
	            if (_this._onChange) _this._onChange(event);
	          });
	        });
	      });
	    }
	  }, {
	    key: 'onChange',
	    value: function onChange(callback) {
	      var _this = this;
	      _this._onChange = callback;
	    }
	  }]);
	
	  return BraceletSensorObserver;
	}();
	
	function activate(hypertyURL, bus, configuration) {
	  return {
	    name: 'BraceletSensorObserver',
	    instance: new BraceletSensorObserver(hypertyURL, bus, configuration)
	  };
	}
	module.exports = exports['default'];

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	// version: 0.5.1
	// date: Mon Feb 20 2017 18:22:18 GMT+0000 (WET)
	// licence: 
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	
	
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("IdentityManager", [], factory);
		else if(typeof exports === 'object')
			exports["IdentityManager"] = factory();
		else
			root[""] = root[""] || {}, root[""]["IdentityManager"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 159);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {
	
	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports) {
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(11)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var store      = __webpack_require__(30)('wks')
	  , uid        = __webpack_require__(23)
	  , Symbol     = __webpack_require__(1).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var anObject       = __webpack_require__(5)
	  , IE8_DOM_DEFINE = __webpack_require__(25)
	  , toPrimitive    = __webpack_require__(21)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(2) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(6);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP         = __webpack_require__(4)
	  , createDesc = __webpack_require__(15);
	module.exports = __webpack_require__(2) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	
	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(1)
	  , core      = __webpack_require__(0)
	  , ctx       = __webpack_require__(14)
	  , hide      = __webpack_require__(7)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(33);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	/***/ }),
	/* 11 */
	/***/ (function(module, exports) {
	
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports) {
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(56)
	  , defined = __webpack_require__(24);
	module.exports = function(it){
	  return IObject(defined(it));
	};
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// optional / simple context binding
	var aFunction = __webpack_require__(19);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports) {
	
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	
	/***/ }),
	/* 16 */
	/***/ (function(module, exports) {
	
	module.exports = {};
	
	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(6)
	  , document = __webpack_require__(1).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(44)
	  , enumBugKeys = __webpack_require__(29);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};
	
	/***/ }),
	/* 19 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	
	/***/ }),
	/* 20 */
	/***/ (function(module, exports) {
	
	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	
	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(6);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};
	
	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var def = __webpack_require__(4).f
	  , has = __webpack_require__(12)
	  , TAG = __webpack_require__(3)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};
	
	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {
	
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	
	/***/ }),
	/* 24 */
	/***/ (function(module, exports) {
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	
	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = !__webpack_require__(2) && !__webpack_require__(11)(function(){
	  return Object.defineProperty(__webpack_require__(17)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 26 */
	/***/ (function(module, exports) {
	
	module.exports = true;
	
	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var shared = __webpack_require__(30)('keys')
	  , uid    = __webpack_require__(23);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};
	
	/***/ }),
	/* 28 */
	/***/ (function(module, exports) {
	
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	
	/***/ }),
	/* 29 */
	/***/ (function(module, exports) {
	
	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');
	
	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(1)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	
	/***/ }),
	/* 31 */,
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(24);
	module.exports = function(it){
	  return Object(defined(it));
	};
	
	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(36), __esModule: true };
	
	/***/ }),
	/* 34 */,
	/* 35 */,
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(38);
	var $Object = __webpack_require__(0).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};
	
	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(5)
	  , dPs         = __webpack_require__(64)
	  , enumBugKeys = __webpack_require__(29)
	  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(17)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(42).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};
	
	
	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(2), 'Object', {defineProperty: __webpack_require__(4).f});
	
	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(53), __esModule: true };
	
	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY        = __webpack_require__(26)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(46)
	  , hide           = __webpack_require__(7)
	  , has            = __webpack_require__(12)
	  , Iterators      = __webpack_require__(16)
	  , $iterCreate    = __webpack_require__(62)
	  , setToStringTag = __webpack_require__(22)
	  , getPrototypeOf = __webpack_require__(43)
	  , ITERATOR       = __webpack_require__(3)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	
	/***/ }),
	/* 41 */,
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = __webpack_require__(1).document && document.documentElement;
	
	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(12)
	  , toObject    = __webpack_require__(32)
	  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};
	
	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var has          = __webpack_require__(12)
	  , toIObject    = __webpack_require__(13)
	  , arrayIndexOf = __webpack_require__(61)(false)
	  , IE_PROTO     = __webpack_require__(27)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};
	
	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8)
	  , core    = __webpack_require__(0)
	  , fails   = __webpack_require__(11);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};
	
	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = __webpack_require__(7);
	
	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(28)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};
	
	/***/ }),
	/* 48 */,
	/* 49 */,
	/* 50 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var $at  = __webpack_require__(66)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(40)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});
	
	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(69);
	var global        = __webpack_require__(1)
	  , hide          = __webpack_require__(7)
	  , Iterators     = __webpack_require__(16)
	  , TO_STRING_TAG = __webpack_require__(3)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}
	
	/***/ }),
	/* 52 */,
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var core  = __webpack_require__(0)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};
	
	/***/ }),
	/* 54 */
	/***/ (function(module, exports) {
	
	
	
	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(20)
	  , TAG = __webpack_require__(3)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	
	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(20);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	
	/***/ }),
	/* 57 */,
	/* 58 */,
	/* 59 */,
	/* 60 */
	/***/ (function(module, exports) {
	
	module.exports = function(){ /* empty */ };
	
	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(13)
	  , toLength  = __webpack_require__(47)
	  , toIndex   = __webpack_require__(68);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};
	
	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var create         = __webpack_require__(37)
	  , descriptor     = __webpack_require__(15)
	  , setToStringTag = __webpack_require__(22)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(7)(IteratorPrototype, __webpack_require__(3)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	
	/***/ }),
	/* 63 */
	/***/ (function(module, exports) {
	
	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};
	
	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP       = __webpack_require__(4)
	  , anObject = __webpack_require__(5)
	  , getKeys  = __webpack_require__(18);
	
	module.exports = __webpack_require__(2) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};
	
	/***/ }),
	/* 65 */,
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(28)
	  , defined   = __webpack_require__(24);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	
	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ctx                = __webpack_require__(14)
	  , invoke             = __webpack_require__(88)
	  , html               = __webpack_require__(42)
	  , cel                = __webpack_require__(17)
	  , global             = __webpack_require__(1)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(20)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};
	
	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(28)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};
	
	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var addToUnscopables = __webpack_require__(60)
	  , step             = __webpack_require__(63)
	  , Iterators        = __webpack_require__(16)
	  , toIObject        = __webpack_require__(13);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(40)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	
	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(80), __esModule: true };
	
	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(82), __esModule: true };
	
	/***/ }),
	/* 72 */,
	/* 73 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var classof   = __webpack_require__(55)
	  , ITERATOR  = __webpack_require__(3)('iterator')
	  , Iterators = __webpack_require__(16);
	module.exports = __webpack_require__(0).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	
	/***/ }),
	/* 74 */,
	/* 75 */,
	/* 76 */,
	/* 77 */,
	/* 78 */,
	/* 79 */,
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(102);
	module.exports = __webpack_require__(0).Object.keys;
	
	/***/ }),
	/* 81 */,
	/* 82 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(54);
	__webpack_require__(50);
	__webpack_require__(51);
	__webpack_require__(104);
	module.exports = __webpack_require__(0).Promise;
	
	/***/ }),
	/* 83 */,
	/* 84 */,
	/* 85 */
	/***/ (function(module, exports) {
	
	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};
	
	/***/ }),
	/* 86 */,
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ctx         = __webpack_require__(14)
	  , call        = __webpack_require__(91)
	  , isArrayIter = __webpack_require__(89)
	  , anObject    = __webpack_require__(5)
	  , toLength    = __webpack_require__(47)
	  , getIterFn   = __webpack_require__(73)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;
	
	/***/ }),
	/* 88 */
	/***/ (function(module, exports) {
	
	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};
	
	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// check on default Array iterator
	var Iterators  = __webpack_require__(16)
	  , ITERATOR   = __webpack_require__(3)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};
	
	/***/ }),
	/* 90 */,
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(5);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};
	
	/***/ }),
	/* 92 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ITERATOR     = __webpack_require__(3)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};
	
	/***/ }),
	/* 93 */,
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(1)
	  , macrotask = __webpack_require__(67).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(20)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};
	
	/***/ }),
	/* 95 */,
	/* 96 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var hide = __webpack_require__(7);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};
	
	/***/ }),
	/* 97 */,
	/* 98 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var global      = __webpack_require__(1)
	  , core        = __webpack_require__(0)
	  , dP          = __webpack_require__(4)
	  , DESCRIPTORS = __webpack_require__(2)
	  , SPECIES     = __webpack_require__(3)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};
	
	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(5)
	  , aFunction = __webpack_require__(19)
	  , SPECIES   = __webpack_require__(3)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};
	
	/***/ }),
	/* 100 */,
	/* 101 */,
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(32)
	  , $keys    = __webpack_require__(18);
	
	__webpack_require__(45)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});
	
	/***/ }),
	/* 103 */,
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY            = __webpack_require__(26)
	  , global             = __webpack_require__(1)
	  , ctx                = __webpack_require__(14)
	  , classof            = __webpack_require__(55)
	  , $export            = __webpack_require__(8)
	  , isObject           = __webpack_require__(6)
	  , aFunction          = __webpack_require__(19)
	  , anInstance         = __webpack_require__(85)
	  , forOf              = __webpack_require__(87)
	  , speciesConstructor = __webpack_require__(99)
	  , task               = __webpack_require__(67).set
	  , microtask          = __webpack_require__(94)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(3)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(96)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(22)($Promise, PROMISE);
	__webpack_require__(98)(PROMISE);
	Wrapper = __webpack_require__(0)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(92)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});
	
	/***/ }),
	/* 105 */,
	/* 106 */,
	/* 107 */,
	/* 108 */,
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _stringify = __webpack_require__(39);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _keys = __webpack_require__(70);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	exports.divideURL = divideURL;
	exports.divideEmail = divideEmail;
	exports.emptyObject = emptyObject;
	exports.deepClone = deepClone;
	exports.getUserURLFromEmail = getUserURLFromEmail;
	exports.getUserEmailFromURL = getUserEmailFromURL;
	exports.convertToUserURL = convertToUserURL;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	/**
	 * Support module with some functions will be useful
	 * @module utils
	 */
	
	/**
	 * @typedef divideURL
	 * @type Object
	 * @property {string} type The type of URL
	 * @property {string} domain The domain of URL
	 * @property {string} identity The identity of URL
	 */
	
	/**
	 * Divide an url in type, domain and identity
	 * @param  {URL.URL} url - url address
	 * @return {divideURL} the result of divideURL
	 */
	function divideURL(url) {
	
	  if (!url) throw Error('URL is needed to split');
	
	  function recurse(value) {
	    var regex = /([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
	    var subst = '$1,$3,$4';
	    var parts = value.replace(regex, subst).split(',');
	    return parts;
	  }
	
	  var parts = recurse(url);
	
	  // If the url has no scheme
	  if (parts[0] === url && !parts[0].includes('@')) {
	
	    var _result = {
	      type: "",
	      domain: url,
	      identity: ""
	    };
	
	    console.error('[DivideURL] DivideURL don\'t support url without scheme. Please review your url address', url);
	
	    return _result;
	  }
	
	  // check if the url has the scheme and includes an @
	  if (parts[0] === url && parts[0].includes('@')) {
	    var scheme = parts[0] === url ? 'smtp' : parts[0];
	    parts = recurse(scheme + '://' + parts[0]);
	  }
	
	  // if the domain includes an @, divide it to domain and identity respectively
	  if (parts[1].includes('@')) {
	    parts[2] = parts[0] + '://' + parts[1];
	    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);
	  } /*else if (parts[2].includes('/')) {
	    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);
	    }*/
	
	  var result = {
	    type: parts[0],
	    domain: parts[1],
	    identity: parts[2]
	  };
	
	  return result;
	}
	
	function divideEmail(email) {
	  var indexOfAt = email.indexOf('@');
	
	  var result = {
	    username: email.substring(0, indexOfAt),
	    domain: email.substring(indexOfAt + 1, email.length)
	  };
	
	  return result;
	}
	
	/**
	 * Check if an Object is empty
	 * @param  {Object} object Object to be checked
	 * @return {Boolean}       status of Object, empty or not (true|false);
	 */
	function emptyObject(object) {
	  return (0, _keys2.default)(object).length > 0 ? false : true;
	}
	
	/**
	 * Make a COPY of the original data
	 * @param  {Object}  obj - object to be cloned
	 * @return {Object}
	 */
	function deepClone(obj) {
	  //TODO: simple but inefficient JSON deep clone...
	  if (obj) return JSON.parse((0, _stringify2.default)(obj));
	}
	
	/**
	 * Obtains the user URL that corresponds to a given email
	 * @param  {string} userEmail The user email
	 * @return {URL.URL} userURL The user URL
	 */
	function getUserURLFromEmail(userEmail) {
	  var indexOfAt = userEmail.indexOf('@');
	  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);
	}
	
	/**
	 * Obtains the user email that corresponds to a given URL
	 * @param  {URL.URL} userURL The user URL
	 * @return {string} userEmail The user email
	 */
	function getUserEmailFromURL(userURL) {
	  var url = divideURL(userURL);
	  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'
	}
	
	/**
	 * Check if the user identifier is already in the URL format, if not, convert to URL format
	 * @param  {string}   identifier  user identifier
	 * @return {string}   userURL    the user URL
	 */
	function convertToUserURL(identifier) {
	
	  // check if the identifier is already in the url format
	  if (identifier.substring(0, 7) === 'user://') {
	    var dividedURL = divideURL(identifier);
	
	    //check if the url is well formated
	    if (dividedURL.domain && dividedURL.identity) {
	      return identifier;
	    } else {
	      throw 'userURL with wrong format';
	    }
	
	    //if not, convert the user email to URL format
	  } else {
	    return getUserURLFromEmail(identifier);
	  }
	}
	
	/***/ }),
	/* 110 */,
	/* 111 */,
	/* 112 */,
	/* 113 */,
	/* 114 */,
	/* 115 */,
	/* 116 */,
	/* 117 */,
	/* 118 */,
	/* 119 */,
	/* 120 */,
	/* 121 */,
	/* 122 */,
	/* 123 */,
	/* 124 */,
	/* 125 */,
	/* 126 */,
	/* 127 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(71);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _utils = __webpack_require__(109);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Core IdentityManager interface
	* Class to allow applications to search for Identities registered in runtime-core
	*/
	var IdentityManager = function () {
	
	  /**
	  * To initialise the IdentityManager, which will provide the support for hyperties to
	  * query about identities registered
	  * @param  {String}          hypertyURL            hypertyURL
	  * @param  {String}          runtimeURL            runtimeURL
	  * @param  {MessageBus}          msgbus                msgbus
	  */
	  function IdentityManager(hypertyURL, runtimeURL, msgBus) {
	    (0, _classCallCheck3.default)(this, IdentityManager);
	
	    var _this = this;
	    _this.messageBus = msgBus;
	
	    _this.domain = (0, _utils.divideURL)(hypertyURL).domain;
	    _this.hypertyURL = hypertyURL;
	    _this.runtimeURL = runtimeURL;
	  }
	
	  /**
	  * Function to query the runtime registry about the identity to which the hyperty was associated
	  * @param {String}       type (Optional)         type of user info required
	  * @param {String}       hypertyURL (Optional)   hypertyURL to search for
	  * @return {Promise}     userURL       userURL associated to the hyperty
	  */
	
	
	  (0, _createClass3.default)(IdentityManager, [{
	    key: 'discoverUserRegistered',
	    value: function discoverUserRegistered(type, hypertyURL) {
	      var _this = this;
	      var activeHypertyURL = void 0;
	
	      // if any type of search is selected query for that type, otherwise query for default user info
	      var searchType = type ? type : '.';
	
	      if (!hypertyURL) {
	        activeHypertyURL = _this.hypertyURL;
	      } else {
	        activeHypertyURL = hypertyURL;
	      }
	
	      var msg = {
	        type: 'read', from: activeHypertyURL, to: _this.runtimeURL + '/registry/', body: { resource: searchType, criteria: activeHypertyURL }
	      };
	
	      return new _promise2.default(function (resolve, reject) {
	
	        _this.messageBus.postMessage(msg, function (reply) {
	
	          var userURL = reply.body.resource;
	
	          if (userURL && reply.body.code === 200) {
	            resolve(userURL);
	          } else {
	            reject('code: ' + reply.body.code + ' No user was not found');
	          }
	        });
	      });
	    }
	  }]);
	  return IdentityManager;
	}(); /**
	     * Copyright 2016 PT Inovação e Sistemas SA
	     * Copyright 2016 INESC-ID
	     * Copyright 2016 QUOBIS NETWORKS SL
	     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	     * Copyright 2016 ORANGE SA
	     * Copyright 2016 Deutsche Telekom AG
	     * Copyright 2016 Apizee
	     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	     *
	     * Licensed under the Apache License, Version 2.0 (the "License");
	     * you may not use this file except in compliance with the License.
	     * You may obtain a copy of the License at
	     *
	     *   http://www.apache.org/licenses/LICENSE-2.0
	     *
	     * Unless required by applicable law or agreed to in writing, software
	     * distributed under the License is distributed on an "AS IS" BASIS,
	     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	     * See the License for the specific language governing permissions and
	     * limitations under the License.
	     **/
	
	
	exports.default = IdentityManager;
	module.exports = exports['default'];
	
	/***/ }),
	/* 128 */,
	/* 129 */,
	/* 130 */,
	/* 131 */,
	/* 132 */,
	/* 133 */,
	/* 134 */,
	/* 135 */,
	/* 136 */,
	/* 137 */,
	/* 138 */,
	/* 139 */,
	/* 140 */,
	/* 141 */,
	/* 142 */,
	/* 143 */,
	/* 144 */,
	/* 145 */,
	/* 146 */,
	/* 147 */,
	/* 148 */,
	/* 149 */,
	/* 150 */,
	/* 151 */,
	/* 152 */,
	/* 153 */,
	/* 154 */,
	/* 155 */,
	/* 156 */,
	/* 157 */,
	/* 158 */,
	/* 159 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _IdentityManager = __webpack_require__(127);
	
	var _IdentityManager2 = _interopRequireDefault(_IdentityManager);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _IdentityManager2.default;
	module.exports = exports['default'];
	
	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// version: 0.5.1
	// date: Mon Feb 20 2017 18:22:18 GMT+0000 (WET)
	// licence: 
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	
	
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("Syncher", [], factory);
		else if(typeof exports === 'object')
			exports["Syncher"] = factory();
		else
			root[""] = root[""] || {}, root[""]["Syncher"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 163);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {
	
	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports) {
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(11)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var store      = __webpack_require__(30)('wks')
	  , uid        = __webpack_require__(23)
	  , Symbol     = __webpack_require__(1).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var anObject       = __webpack_require__(5)
	  , IE8_DOM_DEFINE = __webpack_require__(25)
	  , toPrimitive    = __webpack_require__(21)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(2) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(6);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP         = __webpack_require__(4)
	  , createDesc = __webpack_require__(15);
	module.exports = __webpack_require__(2) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	
	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(1)
	  , core      = __webpack_require__(0)
	  , ctx       = __webpack_require__(14)
	  , hide      = __webpack_require__(7)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(33);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	/***/ }),
	/* 11 */
	/***/ (function(module, exports) {
	
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports) {
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(56)
	  , defined = __webpack_require__(24);
	module.exports = function(it){
	  return IObject(defined(it));
	};
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// optional / simple context binding
	var aFunction = __webpack_require__(19);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports) {
	
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	
	/***/ }),
	/* 16 */
	/***/ (function(module, exports) {
	
	module.exports = {};
	
	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(6)
	  , document = __webpack_require__(1).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(44)
	  , enumBugKeys = __webpack_require__(29);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};
	
	/***/ }),
	/* 19 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	
	/***/ }),
	/* 20 */
	/***/ (function(module, exports) {
	
	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	
	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(6);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};
	
	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var def = __webpack_require__(4).f
	  , has = __webpack_require__(12)
	  , TAG = __webpack_require__(3)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};
	
	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {
	
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	
	/***/ }),
	/* 24 */
	/***/ (function(module, exports) {
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	
	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = !__webpack_require__(2) && !__webpack_require__(11)(function(){
	  return Object.defineProperty(__webpack_require__(17)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 26 */
	/***/ (function(module, exports) {
	
	module.exports = true;
	
	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var shared = __webpack_require__(30)('keys')
	  , uid    = __webpack_require__(23);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};
	
	/***/ }),
	/* 28 */
	/***/ (function(module, exports) {
	
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	
	/***/ }),
	/* 29 */
	/***/ (function(module, exports) {
	
	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');
	
	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(1)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	
	/***/ }),
	/* 31 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(79), __esModule: true };
	
	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(24);
	module.exports = function(it){
	  return Object(defined(it));
	};
	
	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(36), __esModule: true };
	
	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(75);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(74);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(59);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};
	
	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(59);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};
	
	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(38);
	var $Object = __webpack_require__(0).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};
	
	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(5)
	  , dPs         = __webpack_require__(64)
	  , enumBugKeys = __webpack_require__(29)
	  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(17)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(42).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};
	
	
	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(2), 'Object', {defineProperty: __webpack_require__(4).f});
	
	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(53), __esModule: true };
	
	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY        = __webpack_require__(26)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(46)
	  , hide           = __webpack_require__(7)
	  , has            = __webpack_require__(12)
	  , Iterators      = __webpack_require__(16)
	  , $iterCreate    = __webpack_require__(62)
	  , setToStringTag = __webpack_require__(22)
	  , getPrototypeOf = __webpack_require__(43)
	  , ITERATOR       = __webpack_require__(3)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	
	/***/ }),
	/* 41 */
	/***/ (function(module, exports) {
	
	exports.f = {}.propertyIsEnumerable;
	
	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = __webpack_require__(1).document && document.documentElement;
	
	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(12)
	  , toObject    = __webpack_require__(32)
	  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};
	
	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var has          = __webpack_require__(12)
	  , toIObject    = __webpack_require__(13)
	  , arrayIndexOf = __webpack_require__(61)(false)
	  , IE_PROTO     = __webpack_require__(27)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};
	
	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8)
	  , core    = __webpack_require__(0)
	  , fails   = __webpack_require__(11);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};
	
	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = __webpack_require__(7);
	
	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(28)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};
	
	/***/ }),
	/* 48 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global         = __webpack_require__(1)
	  , core           = __webpack_require__(0)
	  , LIBRARY        = __webpack_require__(26)
	  , wksExt         = __webpack_require__(49)
	  , defineProperty = __webpack_require__(4).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};
	
	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {
	
	exports.f = __webpack_require__(3);
	
	/***/ }),
	/* 50 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var $at  = __webpack_require__(66)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(40)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});
	
	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(69);
	var global        = __webpack_require__(1)
	  , hide          = __webpack_require__(7)
	  , Iterators     = __webpack_require__(16)
	  , TO_STRING_TAG = __webpack_require__(3)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}
	
	/***/ }),
	/* 52 */,
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var core  = __webpack_require__(0)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};
	
	/***/ }),
	/* 54 */
	/***/ (function(module, exports) {
	
	
	
	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(20)
	  , TAG = __webpack_require__(3)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	
	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(20);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	
	/***/ }),
	/* 57 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var pIE            = __webpack_require__(41)
	  , createDesc     = __webpack_require__(15)
	  , toIObject      = __webpack_require__(13)
	  , toPrimitive    = __webpack_require__(21)
	  , has            = __webpack_require__(12)
	  , IE8_DOM_DEFINE = __webpack_require__(25)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(2) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};
	
	/***/ }),
	/* 58 */
	/***/ (function(module, exports) {
	
	exports.f = Object.getOwnPropertySymbols;
	
	/***/ }),
	/* 59 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(77);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(76);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};
	
	/***/ }),
	/* 60 */
	/***/ (function(module, exports) {
	
	module.exports = function(){ /* empty */ };
	
	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(13)
	  , toLength  = __webpack_require__(47)
	  , toIndex   = __webpack_require__(68);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};
	
	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var create         = __webpack_require__(37)
	  , descriptor     = __webpack_require__(15)
	  , setToStringTag = __webpack_require__(22)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(7)(IteratorPrototype, __webpack_require__(3)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	
	/***/ }),
	/* 63 */
	/***/ (function(module, exports) {
	
	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};
	
	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP       = __webpack_require__(4)
	  , anObject = __webpack_require__(5)
	  , getKeys  = __webpack_require__(18);
	
	module.exports = __webpack_require__(2) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};
	
	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(44)
	  , hiddenKeys = __webpack_require__(29).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};
	
	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(28)
	  , defined   = __webpack_require__(24);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	
	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ctx                = __webpack_require__(14)
	  , invoke             = __webpack_require__(88)
	  , html               = __webpack_require__(42)
	  , cel                = __webpack_require__(17)
	  , global             = __webpack_require__(1)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(20)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};
	
	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(28)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};
	
	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var addToUnscopables = __webpack_require__(60)
	  , step             = __webpack_require__(63)
	  , Iterators        = __webpack_require__(16)
	  , toIObject        = __webpack_require__(13);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(40)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	
	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(80), __esModule: true };
	
	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(82), __esModule: true };
	
	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var META     = __webpack_require__(23)('meta')
	  , isObject = __webpack_require__(6)
	  , has      = __webpack_require__(12)
	  , setDesc  = __webpack_require__(4).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(11)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};
	
	/***/ }),
	/* 73 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var classof   = __webpack_require__(55)
	  , ITERATOR  = __webpack_require__(3)('iterator')
	  , Iterators = __webpack_require__(16);
	module.exports = __webpack_require__(0).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	
	/***/ }),
	/* 74 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(78), __esModule: true };
	
	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(81), __esModule: true };
	
	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(83), __esModule: true };
	
	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(84), __esModule: true };
	
	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(100);
	var $Object = __webpack_require__(0).Object;
	module.exports = function create(P, D){
	  return $Object.create(P, D);
	};
	
	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(101);
	module.exports = __webpack_require__(0).Object.getPrototypeOf;
	
	/***/ }),
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(102);
	module.exports = __webpack_require__(0).Object.keys;
	
	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(103);
	module.exports = __webpack_require__(0).Object.setPrototypeOf;
	
	/***/ }),
	/* 82 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(54);
	__webpack_require__(50);
	__webpack_require__(51);
	__webpack_require__(104);
	module.exports = __webpack_require__(0).Promise;
	
	/***/ }),
	/* 83 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(105);
	__webpack_require__(54);
	__webpack_require__(106);
	__webpack_require__(107);
	module.exports = __webpack_require__(0).Symbol;
	
	/***/ }),
	/* 84 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(50);
	__webpack_require__(51);
	module.exports = __webpack_require__(49).f('iterator');
	
	/***/ }),
	/* 85 */
	/***/ (function(module, exports) {
	
	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};
	
	/***/ }),
	/* 86 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(18)
	  , gOPS    = __webpack_require__(58)
	  , pIE     = __webpack_require__(41);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};
	
	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ctx         = __webpack_require__(14)
	  , call        = __webpack_require__(91)
	  , isArrayIter = __webpack_require__(89)
	  , anObject    = __webpack_require__(5)
	  , toLength    = __webpack_require__(47)
	  , getIterFn   = __webpack_require__(73)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;
	
	/***/ }),
	/* 88 */
	/***/ (function(module, exports) {
	
	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};
	
	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// check on default Array iterator
	var Iterators  = __webpack_require__(16)
	  , ITERATOR   = __webpack_require__(3)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};
	
	/***/ }),
	/* 90 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(20);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};
	
	/***/ }),
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(5);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};
	
	/***/ }),
	/* 92 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ITERATOR     = __webpack_require__(3)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};
	
	/***/ }),
	/* 93 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var getKeys   = __webpack_require__(18)
	  , toIObject = __webpack_require__(13);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};
	
	/***/ }),
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(1)
	  , macrotask = __webpack_require__(67).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(20)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};
	
	/***/ }),
	/* 95 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(13)
	  , gOPN      = __webpack_require__(65).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};
	
	
	/***/ }),
	/* 96 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var hide = __webpack_require__(7);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};
	
	/***/ }),
	/* 97 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(6)
	  , anObject = __webpack_require__(5);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(14)(Function.call, __webpack_require__(57).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};
	
	/***/ }),
	/* 98 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var global      = __webpack_require__(1)
	  , core        = __webpack_require__(0)
	  , dP          = __webpack_require__(4)
	  , DESCRIPTORS = __webpack_require__(2)
	  , SPECIES     = __webpack_require__(3)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};
	
	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(5)
	  , aFunction = __webpack_require__(19)
	  , SPECIES   = __webpack_require__(3)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};
	
	/***/ }),
	/* 100 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(8)
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', {create: __webpack_require__(37)});
	
	/***/ }),
	/* 101 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject        = __webpack_require__(32)
	  , $getPrototypeOf = __webpack_require__(43);
	
	__webpack_require__(45)('getPrototypeOf', function(){
	  return function getPrototypeOf(it){
	    return $getPrototypeOf(toObject(it));
	  };
	});
	
	/***/ }),
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(32)
	  , $keys    = __webpack_require__(18);
	
	__webpack_require__(45)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});
	
	/***/ }),
	/* 103 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(8);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(97).set});
	
	/***/ }),
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY            = __webpack_require__(26)
	  , global             = __webpack_require__(1)
	  , ctx                = __webpack_require__(14)
	  , classof            = __webpack_require__(55)
	  , $export            = __webpack_require__(8)
	  , isObject           = __webpack_require__(6)
	  , aFunction          = __webpack_require__(19)
	  , anInstance         = __webpack_require__(85)
	  , forOf              = __webpack_require__(87)
	  , speciesConstructor = __webpack_require__(99)
	  , task               = __webpack_require__(67).set
	  , microtask          = __webpack_require__(94)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(3)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(96)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(22)($Promise, PROMISE);
	__webpack_require__(98)(PROMISE);
	Wrapper = __webpack_require__(0)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(92)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});
	
	/***/ }),
	/* 105 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(1)
	  , has            = __webpack_require__(12)
	  , DESCRIPTORS    = __webpack_require__(2)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(46)
	  , META           = __webpack_require__(72).KEY
	  , $fails         = __webpack_require__(11)
	  , shared         = __webpack_require__(30)
	  , setToStringTag = __webpack_require__(22)
	  , uid            = __webpack_require__(23)
	  , wks            = __webpack_require__(3)
	  , wksExt         = __webpack_require__(49)
	  , wksDefine      = __webpack_require__(48)
	  , keyOf          = __webpack_require__(93)
	  , enumKeys       = __webpack_require__(86)
	  , isArray        = __webpack_require__(90)
	  , anObject       = __webpack_require__(5)
	  , toIObject      = __webpack_require__(13)
	  , toPrimitive    = __webpack_require__(21)
	  , createDesc     = __webpack_require__(15)
	  , _create        = __webpack_require__(37)
	  , gOPNExt        = __webpack_require__(95)
	  , $GOPD          = __webpack_require__(57)
	  , $DP            = __webpack_require__(4)
	  , $keys          = __webpack_require__(18)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(65).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(41).f  = $propertyIsEnumerable;
	  __webpack_require__(58).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(26)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(7)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);
	
	/***/ }),
	/* 106 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(48)('asyncIterator');
	
	/***/ }),
	/* 107 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(48)('observable');
	
	/***/ }),
	/* 108 */,
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _stringify = __webpack_require__(39);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _keys = __webpack_require__(70);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	exports.divideURL = divideURL;
	exports.divideEmail = divideEmail;
	exports.emptyObject = emptyObject;
	exports.deepClone = deepClone;
	exports.getUserURLFromEmail = getUserURLFromEmail;
	exports.getUserEmailFromURL = getUserEmailFromURL;
	exports.convertToUserURL = convertToUserURL;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	/**
	 * Support module with some functions will be useful
	 * @module utils
	 */
	
	/**
	 * @typedef divideURL
	 * @type Object
	 * @property {string} type The type of URL
	 * @property {string} domain The domain of URL
	 * @property {string} identity The identity of URL
	 */
	
	/**
	 * Divide an url in type, domain and identity
	 * @param  {URL.URL} url - url address
	 * @return {divideURL} the result of divideURL
	 */
	function divideURL(url) {
	
	  if (!url) throw Error('URL is needed to split');
	
	  function recurse(value) {
	    var regex = /([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
	    var subst = '$1,$3,$4';
	    var parts = value.replace(regex, subst).split(',');
	    return parts;
	  }
	
	  var parts = recurse(url);
	
	  // If the url has no scheme
	  if (parts[0] === url && !parts[0].includes('@')) {
	
	    var _result = {
	      type: "",
	      domain: url,
	      identity: ""
	    };
	
	    console.error('[DivideURL] DivideURL don\'t support url without scheme. Please review your url address', url);
	
	    return _result;
	  }
	
	  // check if the url has the scheme and includes an @
	  if (parts[0] === url && parts[0].includes('@')) {
	    var scheme = parts[0] === url ? 'smtp' : parts[0];
	    parts = recurse(scheme + '://' + parts[0]);
	  }
	
	  // if the domain includes an @, divide it to domain and identity respectively
	  if (parts[1].includes('@')) {
	    parts[2] = parts[0] + '://' + parts[1];
	    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);
	  } /*else if (parts[2].includes('/')) {
	    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);
	    }*/
	
	  var result = {
	    type: parts[0],
	    domain: parts[1],
	    identity: parts[2]
	  };
	
	  return result;
	}
	
	function divideEmail(email) {
	  var indexOfAt = email.indexOf('@');
	
	  var result = {
	    username: email.substring(0, indexOfAt),
	    domain: email.substring(indexOfAt + 1, email.length)
	  };
	
	  return result;
	}
	
	/**
	 * Check if an Object is empty
	 * @param  {Object} object Object to be checked
	 * @return {Boolean}       status of Object, empty or not (true|false);
	 */
	function emptyObject(object) {
	  return (0, _keys2.default)(object).length > 0 ? false : true;
	}
	
	/**
	 * Make a COPY of the original data
	 * @param  {Object}  obj - object to be cloned
	 * @return {Object}
	 */
	function deepClone(obj) {
	  //TODO: simple but inefficient JSON deep clone...
	  if (obj) return JSON.parse((0, _stringify2.default)(obj));
	}
	
	/**
	 * Obtains the user URL that corresponds to a given email
	 * @param  {string} userEmail The user email
	 * @return {URL.URL} userURL The user URL
	 */
	function getUserURLFromEmail(userEmail) {
	  var indexOfAt = userEmail.indexOf('@');
	  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);
	}
	
	/**
	 * Obtains the user email that corresponds to a given URL
	 * @param  {URL.URL} userURL The user URL
	 * @return {string} userEmail The user email
	 */
	function getUserEmailFromURL(userURL) {
	  var url = divideURL(userURL);
	  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'
	}
	
	/**
	 * Check if the user identifier is already in the URL format, if not, convert to URL format
	 * @param  {string}   identifier  user identifier
	 * @return {string}   userURL    the user URL
	 */
	function convertToUserURL(identifier) {
	
	  // check if the identifier is already in the url format
	  if (identifier.substring(0, 7) === 'user://') {
	    var dividedURL = divideURL(identifier);
	
	    //check if the url is well formated
	    if (dividedURL.domain && dividedURL.identity) {
	      return identifier;
	    } else {
	      throw 'userURL with wrong format';
	    }
	
	    //if not, convert the user email to URL format
	  } else {
	    return getUserURLFromEmail(identifier);
	  }
	}
	
	/***/ }),
	/* 110 */,
	/* 111 */,
	/* 112 */,
	/* 113 */,
	/* 114 */,
	/* 115 */,
	/* 116 */,
	/* 117 */,
	/* 118 */
	/***/ (function(module, exports) {
	
	//     proxy-observe v0.0.18
	//     Copyright (c) 2015, 2016 Simon Y. Blackwell, AnyWhichWay
	//     MIT License - http://opensource.org/licenses/mit-license.php
	(function() {
		"use strict";
		// Creates and returns a Proxy wrapping a target so that all changes can be trapped and forwarded to
		// a callback. The callback takes an array of changes just like the traditional original Chrome Object.observe
		// {object:<object changed>,name:<field changed>,type:add|update|delete|reconfigure|preventExtensions|setPrototype,oldValue:<old value if update | delete>}
		// The acceptlist can be add|update|delete|reconfigure|preventExtensions|setPrototype.
		// v 0.0.10 to support pausing and restarting observation two additional constructor arguments are available to Object.observe:
		// pausable - create the Observer so it can be paused
		// pause - create observer in paused state
		// if pausable is true then an additional method deliver(ignorePrevious) is available to start delivery
		// to pause delivery set a property called pause on the function deliver to true
		// pausable is optional to reduce the chance of shadowing a property or method on any existing code called deliver
		if(!Object.observe && typeof(Proxy)==="function") {
			function Observer(target,callback,acceptlist,pausable,pause,delay) {
		    	var me = this, proxy;
		    	function deliver(ignorePrevious,delay) {
		    		deliver.delay = delay;
		    		if(!deliver.pause) {
		        		if(me.changeset.length>0) {
		        			if(!ignorePrevious) {
			    	    		var changes = me.changeset.filter(function(change) { return !acceptlist || acceptlist.indexOf(change.type)>=0; });
			        			if(changes.length>0) {
			        				callback(changes);
			        			}
		        			}
		        			me.changeset = [];
		        		}
		    		}
		    	}
		    	deliver.pause = pause;
		    	deliver.delay = delay;
			    me.get = function(target, property) {
			    	if(property==="__observer__") {
			    		return me;
			    	}
			    	if(property==="unobserve") {
			    		return function() {
			    			Object.unobserve(target);
			    			return target;
			    		};
			    	}
			    	if(property==="deliver") {
			    		return deliver;
			    	}
			    	return target[property];
			    }
		    	me.target = target;
		    	me.changeset = [];
		    	if(!me.target.__observerCallbacks__) {
		    		// __observerCallbacks__ is used as an index to get at the proxy which is the observer, so we can unobserve
		    		Object.defineProperty(target,"__observerCallbacks__",{enumerable:false,configurable:true,writable:false,value:[]});
		    		Object.defineProperty(target,"__observers__",{enumerable:false,configurable:true,writable:false,value:[]});
		    	}
		    	me.target.__observerCallbacks__.push(callback);
		    	me.target.__observers__.push(this);
		    	proxy = new Proxy(target,me);
		    	deliver(false,delay);
		    	return proxy;
		    }
			Observer.prototype.deliver = function() {
				return this.get(null,"deliver");
			}
		    Observer.prototype.set = function(target, property, value) { // , receiver
		    	var oldvalue = target[property];
		    	var type = (oldvalue===undefined ? "add" : "update");
		    	target[property] = value;
		    	if(target.__observers__.indexOf(this)>=0 && (!this.acceptlist || this.acceptlist.indexOf(type)>=0)) {
		        	var change = {object:target,name:property,type:type},
		        		start = this.changeset.length === 0,
		        		deliver = this.deliver();
		        	if(type==="update") {
		        		change.oldValue = oldvalue;
		        	}
		        	this.changeset.push(change);
		        	if(start) {
		        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
		        	}
		    	}
		    	return true;
		    };
		    Observer.prototype.deleteProperty = function(target, property) {
		    	var oldvalue = target[property];
		    	//if(typeof(oldvalue)!=="undefined") {
			    	delete target[property];
			    	if(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("delete")>=0) {
			        	var change = {object:target,name:property,type:"delete",oldValue:oldvalue},
			        		start = this.changeset.length === 0,
			        		deliver = this.deliver();
			        	this.changeset.push(change);
			        	if(start) {
			        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
			        	}
			    	}
		    	//}
		    	return true;
		    };
		    Observer.prototype.defineProperty = function(target, property, descriptor) {
		    	Object.defineProperty(target, property, descriptor);
		    	if(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("reconfigure")>=0) {
		        	var change = {object:target,name:property,type:"reconfigure"},
	        			start = this.changeset.length === 0,
	        			deliver = this.deliver();
		        	this.changeset.push(change);
		        	if(start) {
		        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
		        	}
		    	}
		    	return true;
		    };
		    Observer.prototype.setPrototypeOf = function(target, prototype) {
		    	var oldvalue = Object.getPrototypeOf(target);
		    	Object.setPrototypeOf(target, prototype);
		    	if(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("setPrototype")>=0) {
		        	var change = {object:target,name:"__proto__",type:"setPrototype",oldValue:oldvalue},
	    				start = this.changeset.length === 0,
	    				deliver = this.deliver();
		        	this.changeset.push(change);
		        	if(start) {
		        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
		        	}
		    	}
		    	return true;
		    };
		    Observer.prototype.preventExtensions = function(target) {
		        Object.preventExtensions(target);
		    	if(target.__observers__.indexOf(this)>=0 && !this.acceptlist || this.acceptlist.indexOf("preventExtensions")>=0) {
		        	var change = {object:target,type:"preventExtensions"},
						start = this.changeset.length === 0,
						deliver = this.deliver();
		        	this.changeset.push(change);
		        	if(start) {
		        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
		        	}
		    	}
		    	return true;
		    };
		    Object.observe = function(object,callback,acceptlist,pausable,pause,delay) {
		    	return new Observer(object,callback,acceptlist,pausable,pause,delay);
		    };
		    Object.unobserve = function(object,callback) {
		    	if(object.__observerCallbacks__) {
		    		if(!callback) {
		    			object.__observerCallbacks__.splice(0,object.__observerCallbacks__.length);
		    			object.__observers__.splice(0,object.__observers__.length);
		    			return;
		    		}
		    		object.__observerCallbacks__.forEach(function(observercallback,i) {
		    			if(callback===observercallback) {
		    				object.__observerCallbacks__.splice(i,1);
		    				delete object.__observers__[i].callback;
		    				object.__observers__.splice(i,1);
		    			}
		    		});
		    	}
		    };
		    Array.observe = function(object,callback,acceptlist,pausable,pause,delay) {
		    	if(!(object instanceof Array) && !Array.isArray(object)) {
		    		throw new TypeError("First argument to Array.observer is not an Array");
		    	}
	            	acceptlist = acceptlist || ["add", "update", "delete", "splice"];
		    	var arrayproxy = new Proxy(object,{get: function(target,property) {
		    		if(property==="unobserve") {
			    		return function(callback) {
			    			if(callback) {
			    				return Object.unobserve(target,callback);
			    			}
			    			return target.unobserve();
			    		};
			    	}
		    		if(property==="splice") {
		    			return function(start,end) {
		    				if(typeof(start)!=="number" || typeof(end)!=="number") {
		    					throw new TypeError("First two arguments to Array splice are not number, number");
		    				}
		    	    		var removed = this.slice(start,start+end),
		    	    			addedCount = (arguments.length > 1 ? arguments.length-2 : 0),
		    	    			change =  {object:object,type:"splice",index:start,removed:removed,addedCount:addedCount};
		    	    		target.splice.apply(target,arguments);
		    	    		if(acceptlist.indexOf("splice")>=0) {
		    	    			var start = proxy.__observer__.changeset.length === 0,
		    	        			deliver = proxy.__observer__.deliver();
		    	    			proxy.__observer__.changeset.push(change);
		    	    			if(start) {
		    		        		deliver(false,(typeof(deliver.delay)==="number" ? deliver.delay : 10));
		    		        	}
		    	    		}
		    	    	}
		    		}
		    		if(property==="push") {
		    			 return function(item) {
		    		    	return this.splice(this.length,0,item);
		    		    }
		    		}
		    		if(property==="pop") {
		    			 return function() {
		    		    	return this.splice(this.length-1,1);
		    		    }
		    		}
		    		if(property==="unshift") {
		    			 return function(item) {
	    		    		return this.splice(0,0,item);
	    		    	}
		    		}
		    		if(property==="shift") {
		    			return function() {
		    	    		return this.splice(0,1);
		    	    	}
		    		}
		    		return target[property];
		    	}});
		    	var proxy = Object.observe(arrayproxy,function(changeset) { 
		    		var changes = changeset.filter(function(change) { return change.name!=="length" && change.name!=="add" && (!acceptlist || acceptlist.indexOf(change.type)>=0); });
		    		if(changes.length>0) {
		    			callback(changes);
		    		}
		    	},acceptlist,pausable,pause,delay);
		    	return proxy;
		    };
		    Array.unobserve = function(object,callback) {
			  return object.unobserve(callback);
		    }
		}
		Object.deepObserve = function(object,callback,parts) {
	
			parts = (parts ? parts : []);
	
			var toTypeName = function(obj) {
				return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
			}
	
			function reobserve(value, parts) {
				var keys = Object.keys(value);
				keys.forEach(function(key) {
					if((toTypeName(value[key]) === 'object' || toTypeName(value[key]) === 'array') && !value[key].hasOwnProperty('__observers__')) {
						var newparts = parts.slice(0);
						newparts.push(key);
						value[key] = Object.deepObserve(value[key],callback,newparts);
					}
				});
			}
	
			reobserve(object, parts);
	
			var observed = Object.observe(object,function(changeset) {
				var changes = [];
				function recurse(name,rootObject,oldObject,newObject,path) {
					if(newObject instanceof Object) {
						var newkeys = Object.keys(newObject);
						newkeys.forEach(function(key) {
							if(!oldObject || (oldObject[key]!==newObject[key])) {
								var oldvalue = (oldObject && oldObject[key]!==undefined ? oldObject[key] : undefined),
									change = (oldvalue===undefined ? "add" : "update"),
									keypath = path + "." + key;
	
								changes.push({name:name,object:rootObject,type:change,oldValue:oldvalue,newValue:newObject[key],keypath:keypath});
								recurse(name,rootObject,oldvalue,newObject[key],keypath);
							}
						});
					} else if(oldObject instanceof Object) {
						var oldkeys = Object.keys(oldObject);
						oldkeys.forEach(function(key) {
							var change = (newObject===null ? "update" : "delete"),
								keypath = path + "." + key;
								
							changes.push({name:name,object:rootObject,type:change,oldValue:oldObject[key],newValue:newObject,keypath:keypath});
							recurse(name,rootObject,oldObject[key],undefined,keypath);
						});
					}
				}
				changeset.forEach(function(change) {
					var keypath = (parts.length>0 ? parts.join(".") + "." : "") + change.name;
	
					if (change.type === "update" || change.type === "add") { 
						reobserve(change.object, parts);
					}
	
					changes.push({name:change.name,object:change.object,type:change.type,oldValue:change.oldValue,newValue:change.object[change.name],keypath:keypath});
					recurse(change.name,change.object,change.oldValue,change.object[change.name],keypath);
				});
				callback(changes);
			});
			return observed;
		};
	})();
	
	
	/***/ }),
	/* 119 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _keys = __webpack_require__(70);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _getPrototypeOf = __webpack_require__(31);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(35);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _get2 = __webpack_require__(124);
	
	var _get3 = _interopRequireDefault(_get2);
	
	var _inherits2 = __webpack_require__(34);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _DataObject2 = __webpack_require__(121);
	
	var _DataObject3 = _interopRequireDefault(_DataObject2);
	
	var _DataObjectChild = __webpack_require__(122);
	
	var _DataObjectChild2 = _interopRequireDefault(_DataObjectChild);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	
	var FilterType = { ANY: 'any', START: 'start', EXACT: 'exact' };
	
	/**
	 * The class returned from the Syncher subscribe call.
	 * To be used as an observation point from a DataObjectReporter change.
	 */
	
	var DataObjectObserver = function (_DataObject) {
	  (0, _inherits3.default)(DataObjectObserver, _DataObject);
	
	  /* private
	  _changeListener: MsgListener
	   ----event handlers----
	  _filters: {<filter>: {type: <start, exact>, callback: <function>} }
	  */
	
	  /**
	   * @ignore
	   * Should not be used directly by Hyperties. It's called by the Syncher.subscribe method
	   */
	
	  //TODO: For Further Study
	  function DataObjectObserver(syncher, url, schema, initialStatus, initialData, childrens, initialVersion, mutual) {
	    (0, _classCallCheck3.default)(this, DataObjectObserver);
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, (DataObjectObserver.__proto__ || (0, _getPrototypeOf2.default)(DataObjectObserver)).call(this, syncher, url, schema, initialStatus, initialData.data, childrens, mutual));
	
	    var _this = _this2;
	
	    _this._version = initialVersion;
	    _this._filters = {};
	
	    _this._syncObj.observe(function (event) {
	      _this._onFilter(event);
	    });
	
	    //setup childrens data from subscription
	    (0, _keys2.default)(initialData.childrens).forEach(function (childId) {
	      var childData = initialData.childrens[childId];
	      _this._childrenObjects[childId] = new _DataObjectChild2.default(_this, childId, childData);
	    });
	
	    _this._allocateListeners();
	    return _this2;
	  }
	
	  (0, _createClass3.default)(DataObjectObserver, [{
	    key: '_allocateListeners',
	    value: function _allocateListeners() {
	      (0, _get3.default)(DataObjectObserver.prototype.__proto__ || (0, _getPrototypeOf2.default)(DataObjectObserver.prototype), '_allocateListeners', this).call(this);
	      var _this = this;
	
	      _this._changeListener = _this._bus.addListener(_this._url + '/changes', function (msg) {
	        if (msg.type === 'update') {
	          console.log('DataObjectObserver-' + _this._url + '-RCV: ', msg);
	          _this._changeObject(_this._syncObj, msg);
	        }
	      });
	    }
	  }, {
	    key: '_releaseListeners',
	    value: function _releaseListeners() {
	      (0, _get3.default)(DataObjectObserver.prototype.__proto__ || (0, _getPrototypeOf2.default)(DataObjectObserver.prototype), '_releaseListeners', this).call(this);
	      var _this = this;
	
	      _this._changeListener.remove();
	    }
	
	    /**
	     * Release and delete object data
	     */
	
	  }, {
	    key: 'delete',
	    value: function _delete() {
	      var _this = this;
	
	      _this._releaseListeners();
	      delete _this._syncher._observers[_this._url];
	    }
	
	    /**
	     * Release and delete object data
	     */
	
	  }, {
	    key: 'unsubscribe',
	    value: function unsubscribe() {
	      var _this = this;
	
	      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalUnSubscribe
	      var unSubscribeMsg = {
	        type: 'unsubscribe', from: _this._owner, to: _this._syncher._subURL,
	        body: { resource: _this._url }
	      };
	
	      _this._bus.postMessage(unSubscribeMsg, function (reply) {
	        console.log('DataObjectObserver-UNSUBSCRIBE: ', reply);
	        if (reply.body.code === 200) {
	          _this._releaseListeners();
	          delete _this._syncher._observers[_this._url];
	        }
	      });
	    }
	
	    /**
	     * Register the change listeners sent by the reporter
	     * @param {string} filter - Filter that identifies the field (separated dot path). Accepts * at the end for a more unrestricted filtering.
	     * @param {function(event: MsgEvent)} callback
	     */
	
	  }, {
	    key: 'onChange',
	    value: function onChange(filter, callback) {
	      var key = filter;
	      var filterObj = {
	        type: FilterType.EXACT,
	        callback: callback
	      };
	
	      var idx = filter.indexOf('*');
	      if (idx === filter.length - 1) {
	        if (idx === 0) {
	          filterObj.type = FilterType.ANY;
	        } else {
	          filterObj.type = FilterType.START;
	          key = filter.substr(0, filter.length - 1);
	        }
	      }
	
	      this._filters[key] = filterObj;
	    }
	  }, {
	    key: '_onFilter',
	    value: function _onFilter(event) {
	      var _this = this;
	
	      (0, _keys2.default)(_this._filters).forEach(function (key) {
	        var filter = _this._filters[key];
	        if (filter.type === FilterType.ANY) {
	          //match anything
	          filter.callback(event);
	        } else if (filter.type === FilterType.START) {
	          //if starts with filter...
	          if (event.field.indexOf(key) === 0) {
	            filter.callback(event);
	          }
	        } else if (filter.type === FilterType.EXACT) {
	          //exact match
	          if (event.field === key) {
	            filter.callback(event);
	          }
	        }
	      });
	    }
	  }]);
	  return DataObjectObserver;
	}(_DataObject3.default /* implements SyncStatus */);
	
	exports.default = DataObjectObserver;
	module.exports = exports['default'];
	
	/***/ }),
	/* 120 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _keys = __webpack_require__(70);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _getPrototypeOf = __webpack_require__(31);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(35);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _get2 = __webpack_require__(124);
	
	var _get3 = _interopRequireDefault(_get2);
	
	var _inherits2 = __webpack_require__(34);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _DataObject2 = __webpack_require__(121);
	
	var _DataObject3 = _interopRequireDefault(_DataObject2);
	
	var _utils = __webpack_require__(109);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The class returned from the Syncher create call.
	 * To be used as a reporter point, changes will be submited to DataObjectObserver instances.
	 */
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	
	var DataObjectReporter = function (_DataObject) {
	  (0, _inherits3.default)(DataObjectReporter, _DataObject);
	
	  /* private
	  _subscriptions: <hypertyUrl: { status: string } }>
	   ----event handlers----
	  _onSubscriptionHandler: (event) => void
	  _onResponseHandler: (event) => void
	  _onReadHandler: (event) => void
	  */
	
	  /**
	   * @ignore
	   * Should not be used directly by Hyperties. It's called by the Syncher.create method
	   */
	  function DataObjectReporter(syncher, url, schema, initialStatus, initialData, childrens) {
	    (0, _classCallCheck3.default)(this, DataObjectReporter);
	
	    var _this2 = (0, _possibleConstructorReturn3.default)(this, (DataObjectReporter.__proto__ || (0, _getPrototypeOf2.default)(DataObjectReporter)).call(this, syncher, url, schema, initialStatus, initialData, childrens));
	
	    var _this = _this2;
	
	    _this._subscriptions = {};
	
	    _this._syncObj.observe(function (event) {
	      console.log('DataObjectReporter-' + url + '-SEND: ', event);
	      _this._onChange(event);
	    });
	
	    _this._allocateListeners();
	    return _this2;
	  }
	
	  (0, _createClass3.default)(DataObjectReporter, [{
	    key: '_allocateListeners',
	    value: function _allocateListeners() {
	      (0, _get3.default)(DataObjectReporter.prototype.__proto__ || (0, _getPrototypeOf2.default)(DataObjectReporter.prototype), '_allocateListeners', this).call(this);
	      var _this = this;
	
	      _this._objectListener = _this._bus.addListener(_this._url, function (msg) {
	        console.log('DataObject-' + _this._url + '-RCV: ', msg);
	        switch (msg.type) {
	          case 'response':
	            _this._onResponse(msg);break;
	          case 'read':
	            _this._onRead(msg);break;
	        }
	      });
	    }
	  }, {
	    key: '_releaseListeners',
	    value: function _releaseListeners() {
	      (0, _get3.default)(DataObjectReporter.prototype.__proto__ || (0, _getPrototypeOf2.default)(DataObjectReporter.prototype), '_releaseListeners', this).call(this);
	      var _this = this;
	
	      _this._objectListener.remove();
	    }
	
	    /**
	     * Send invitations (create messages) to hyperties, observers list.
	     * @param  {HypertyURL[]} observers List of Hyperty URL's
	     */
	
	  }, {
	    key: 'inviteObservers',
	    value: function inviteObservers(observers) {
	      var _this = this;
	
	      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate
	      var inviteMsg = {
	        type: 'create', from: _this._syncher._owner, to: _this._syncher._subURL,
	        body: { resume: false, resource: _this._url, schema: _this._schema, value: _this._syncObj.data, authorise: observers }
	      };
	
	      _this._bus.postMessage(inviteMsg);
	    }
	
	    /**
	     * Release and delete object data
	     */
	
	  }, {
	    key: 'delete',
	    value: function _delete() {
	      var _this = this;
	
	      //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onDelete
	      var deleteMsg = {
	        type: 'delete', from: _this._owner, to: _this._syncher._subURL,
	        body: { resource: _this._url }
	      };
	
	      _this._bus.postMessage(deleteMsg, function (reply) {
	        console.log('DataObjectReporter-DELETE: ', reply);
	        if (reply.body.code === 200) {
	          _this._releaseListeners();
	          delete _this._syncher._reporters[_this._url];
	        }
	      });
	    }
	
	    /**
	     * Subscriptions requested and accepted to this reporter
	     * @type {Object<HypertyURL, SyncSubscription>}
	     */
	
	  }, {
	    key: 'onSubscription',
	
	
	    /**
	     * Setup the callback to process subscribe and unsubscribe notifications
	     * @param {function(event: MsgEvent)} callback function to receive events
	     */
	    value: function onSubscription(callback) {
	      this._onSubscriptionHandler = callback;
	    }
	
	    /**
	     * Setup the callback to process response notifications of the create's
	     * @param {function(event: MsgEvent)} callback function to receive events
	     */
	
	  }, {
	    key: 'onResponse',
	    value: function onResponse(callback) {
	      this._onResponseHandler = callback;
	    }
	
	    /**
	     * Setup the callback to process read notifications
	     * @param {function(event: MsgEvent)} callback
	     */
	
	  }, {
	    key: 'onRead',
	    value: function onRead(callback) {
	      this._onReadHandler = callback;
	    }
	
	    //FLOW-IN: message received from parent Syncher -> _onForward
	
	  }, {
	    key: '_onForward',
	    value: function _onForward(msg) {
	      var _this = this;
	
	      console.log('DataObjectReporter-RCV: ', msg);
	      switch (msg.body.type) {
	        case 'subscribe':
	          _this._onSubscribe(msg);break;
	        case 'unsubscribe':
	          _this._onUnSubscribe(msg);break;
	      }
	    }
	
	    //FLOW-IN: message received from this -> _onForward: emitted by a remote Syncher -> subscribe
	
	  }, {
	    key: '_onSubscribe',
	    value: function _onSubscribe(msg) {
	      var _this3 = this;
	
	      var _this = this;
	      var hypertyUrl = msg.body.from;
	      console.log('[DataObjectReporter._onSubscribe]', msg);
	
	      var event = {
	        type: msg.body.type,
	        url: hypertyUrl,
	
	        identity: msg.body.identity,
	
	        accept: function accept() {
	          //create new subscription
	          var sub = { url: hypertyUrl, status: 'on' };
	          _this._subscriptions[hypertyUrl] = sub;
	
	          //process and send childrens data
	          var childrenValues = {};
	          (0, _keys2.default)(_this._childrenObjects).forEach(function (childId) {
	            var childData = _this._childrenObjects[childId].data;
	            childrenValues[childId] = (0, _utils.deepClone)(childData);
	          });
	
	          var sendMsg = {
	            id: msg.id, type: 'response', from: msg.to, to: msg.from,
	            body: { code: 200, schema: _this._schema, version: _this._version, value: { data: (0, _utils.deepClone)(_this.data), childrens: childrenValues } }
	          };
	
	          //TODO: For Further Study
	          if (msg.body.hasOwnProperty('mutualAuthentication') && !msg.body.mutualAuthentication) {
	            sendMsg.body.mutualAuthentication = _this3._mutualAuthentication;
	            _this3._mutualAuthentication = msg.body.mutualAuthentication;
	          }
	
	          //send ok response message
	          _this._bus.postMessage(sendMsg);
	
	          return sub;
	        },
	
	        reject: function reject(reason) {
	          //send reject response message
	          _this._bus.postMessage({
	            id: msg.id, type: 'response', from: msg.to, to: msg.from,
	            body: { code: 403, desc: reason }
	          });
	        }
	      };
	
	      if (_this._onSubscriptionHandler) {
	        console.log('SUBSCRIPTION-EVENT: ', event);
	        _this._onSubscriptionHandler(event);
	      }
	    }
	
	    //FLOW-IN: message received from this -> _onForward: emitted by a remote DataObjectObserver -> unsubscribe
	
	  }, {
	    key: '_onUnSubscribe',
	    value: function _onUnSubscribe(msg) {
	      var _this = this;
	      var hypertyUrl = msg.body.from;
	
	      var sub = _this._subscriptions[hypertyUrl];
	      delete _this._subscriptions[hypertyUrl];
	
	      var event = {
	        type: msg.body.type,
	        url: hypertyUrl,
	        object: sub
	      };
	
	      if (_this._onSubscriptionHandler) {
	        console.log('UN-SUBSCRIPTION-EVENT: ', event);
	        _this._onSubscriptionHandler(event);
	      }
	    }
	
	    //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> _onRemoteCreate -> event.ack
	
	  }, {
	    key: '_onResponse',
	    value: function _onResponse(msg) {
	      var _this = this;
	
	      var event = {
	        type: msg.type,
	        url: msg.from,
	        code: msg.body.code
	      };
	
	      if (_this._onResponseHandler) {
	        console.log('RESPONSE-EVENT: ', event);
	        _this._onResponseHandler(event);
	      }
	    }
	
	    //FLOW-IN: message received from ReporterURL address: emited by a remote Syncher -> read
	
	  }, {
	    key: '_onRead',
	    value: function _onRead(msg) {
	      var _this = this;
	
	      var event = {
	        type: msg.type,
	        url: msg.from,
	
	        accept: function accept() {
	          _this._bus.postMessage({
	            id: msg.id, type: 'response', from: msg.to, to: msg.from,
	            body: { code: 200, value: (0, _utils.deepClone)(_this.data) }
	          });
	        },
	
	        reject: function reject(reason) {
	          _this._bus.postMessage({
	            id: msg.id, type: 'response', from: msg.to, to: msg.from,
	            body: { code: 401, desc: reason }
	          });
	        }
	      };
	
	      if (_this._onReadHandler) {
	        console.log('READ-EVENT: ', event);
	        _this._onReadHandler(event);
	      }
	    }
	  }, {
	    key: 'subscriptions',
	    get: function get() {
	      return this._subscriptions;
	    }
	  }]);
	  return DataObjectReporter;
	}(_DataObject3.default /* implements SyncStatus */);
	
	exports.default = DataObjectReporter;
	module.exports = exports['default'];
	
	/***/ }),
	/* 121 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(71);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _keys = __webpack_require__(70);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _ProxyObject = __webpack_require__(123);
	
	var _ProxyObject2 = _interopRequireDefault(_ProxyObject);
	
	var _DataObjectChild = __webpack_require__(122);
	
	var _DataObjectChild2 = _interopRequireDefault(_DataObjectChild);
	
	var _utils = __webpack_require__(109);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Main extension class for observers and reporters, with common properties and methods.
	 * Children management is common for observers and reporters.
	 */
	var DataObject = function () {
	  /* private
	  _version: number
	   _owner: HypertyURL
	  _url: ObjectURL
	  _schema: Schema
	  _bus: MiniBus
	  _status: on | paused
	  _syncObj: SyncData
	   _children: { id: DataObjectChild }
	  _childrenListeners: [MsgListener]
	   ----event handlers----
	  _onAddChildHandler: (event) => void
	  */
	
	  /**
	   * @ignore
	   * Should not be used directly by Hyperties. It's called by the Syncher create or subscribe method's
	   */
	  function DataObject(syncher, url, schema, initialStatus, initialData, childrens) {
	    var mutual = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;
	    (0, _classCallCheck3.default)(this, DataObject);
	
	    var _this = this;
	
	    _this._syncher = syncher;
	    _this._url = url;
	    _this._schema = schema;
	    _this._status = initialStatus;
	    _this._syncObj = new _ProxyObject2.default(initialData);
	    _this._childrens = childrens;
	
	    //TODO: For Further Study
	    _this._mutualAuthentication = mutual;
	
	    _this._version = 0;
	    _this._childId = 0;
	    _this._childrenObjects = {};
	    _this._childrenListeners = [];
	
	    _this._owner = syncher._owner;
	    _this._bus = syncher._bus;
	  }
	
	  (0, _createClass3.default)(DataObject, [{
	    key: '_allocateListeners',
	    value: function _allocateListeners() {
	      var _this2 = this;
	
	      var _this = this;
	
	      var childBaseURL = _this._url + '/children/';
	      console.log('[Data Object - AllocateListeners] - ', _this._childrens);
	      if (_this._childrens) {
	        _this._childrens.forEach(function (child) {
	          var childURL = childBaseURL + child;
	          var listener = _this._bus.addListener(childURL, function (msg) {
	            //ignore msg sent by himself
	            if (msg.from !== _this2._owner) {
	              console.log('DataObject-Children-RCV: ', msg);
	              switch (msg.type) {
	                case 'create':
	                  _this._onChildCreate(msg);break;
	                case 'delete':
	                  console.log(msg);break;
	                default:
	                  _this._changeChildren(msg);break;
	              }
	            }
	          });
	
	          _this._childrenListeners.push(listener);
	        });
	      }
	    }
	  }, {
	    key: '_releaseListeners',
	    value: function _releaseListeners() {
	      var _this = this;
	
	      _this._childrenListeners.forEach(function (listener) {
	        listener.remove();
	      });
	
	      (0, _keys2.default)(_this._childrenObjects).forEach(function (key) {
	        _this._childrenObjects[key]._releaseListeners();
	      });
	    }
	
	    /**
	     * Object URL of reporter or observer
	     * @type {ObjectURL}
	     */
	
	  }, {
	    key: 'pause',
	
	
	    /**
	     * @ignore
	     */
	    value: function pause() {
	      //TODO: this feature needs more analise
	      throw 'Not implemented';
	    }
	
	    /**
	     * @ignore
	     */
	
	  }, {
	    key: 'resume',
	    value: function resume() {
	      //TODO: this feature needs more analise
	      throw 'Not implemented';
	    }
	
	    /**
	     * @ignore
	     */
	
	  }, {
	    key: 'stop',
	    value: function stop() {
	      //TODO: should remove the subscription and send message unsubscribe?
	      throw 'Not implemented';
	    }
	
	    /**
	     * Create and add a DataObjectChild to a children collection.
	     * @param {String} children - Children name where the child is added.
	     * @param {JSON} initialData - Initial data of the child
	     * @return {Promise<DataObjectChild>} - Return Promise to a new DataObjectChild.
	     */
	
	  }, {
	    key: 'addChild',
	    value: function addChild(children, initialData) {
	      var _this = this;
	
	      //create new child unique ID, based on hypertyURL
	      _this._childId++;
	      var msgChildId = _this._owner + '#' + _this._childId;
	      var msgChildPath = _this._url + '/children/' + children;
	
	      //FLOW-OUT: this message will be sent directly to a resource child address: MessageBus
	      var requestMsg = {
	        type: 'create', from: _this._owner, to: msgChildPath,
	        body: { resource: msgChildId, value: initialData }
	      };
	
	      //TODO: For Further Study
	      if (!_this._mutualAuthentication) requestMsg.body.mutualAuthentication = _this._mutualAuthentication;
	
	      //returns promise, in the future, the API may change to asynchronous call
	      return new _promise2.default(function (resolve) {
	        var msgId = _this._bus.postMessage(requestMsg);
	
	        console.log('create-reporter-child( ' + _this._owner + ' ): ', requestMsg);
	        var newChild = new _DataObjectChild2.default(_this, msgChildId, initialData, _this._owner, msgId);
	        newChild.onChange(function (event) {
	          _this._onChange(event, { path: msgChildPath, childId: msgChildId });
	        });
	
	        _this._childrenObjects[msgChildId] = newChild;
	
	        resolve(newChild);
	      });
	    }
	
	    /**
	     * Setup the callback to process create and delete of childrens.
	     * @param {function(event: MsgEvent)} callback
	     */
	
	  }, {
	    key: 'onAddChild',
	    value: function onAddChild(callback) {
	      this._onAddChildrenHandler = callback;
	    }
	
	    //FLOW-IN: message received from a remote DataObject -> addChild
	
	  }, {
	    key: '_onChildCreate',
	    value: function _onChildCreate(msg) {
	      var _this = this;
	      var msgChildId = msg.body.resource;
	
	      console.log('create-observer-child( ' + _this._owner + ' ): ', msg);
	      var newChild = new _DataObjectChild2.default(_this, msgChildId, msg.body.value);
	      _this._childrenObjects[msgChildId] = newChild;
	
	      setTimeout(function () {
	        //FLOW-OUT: will flow to DataObjectChild -> _onResponse
	        _this._bus.postMessage({
	          id: msg.id, type: 'response', from: msg.to, to: msg.from,
	          body: { code: 200, source: _this._owner }
	        });
	      });
	
	      var event = {
	        type: msg.type,
	        from: msg.from,
	        url: msg.to,
	        value: msg.body.value,
	        childId: msgChildId,
	        identity: msg.body.identity
	      };
	
	      if (_this._onAddChildrenHandler) {
	        console.log('ADD-CHILDREN-EVENT: ', event);
	        _this._onAddChildrenHandler(event);
	      }
	    }
	
	    //send delta messages to subscriptions
	
	  }, {
	    key: '_onChange',
	    value: function _onChange(event, childInfo) {
	      var _this = this;
	
	      _this._version++;
	
	      if (_this._status === 'on') {
	        //FLOW-OUT: this message will be sent directly to a resource changes address: MessageBus
	        var changeMsg = {
	          type: 'update', from: _this._url, to: _this._url + '/changes',
	          body: { version: _this._version, source: _this._owner, attribute: event.field }
	        };
	
	        console.log('[DataObject - _onChange] - ', event, childInfo, changeMsg);
	
	        if (event.oType === _ProxyObject.ObjectType.OBJECT) {
	          if (event.cType !== _ProxyObject.ChangeType.REMOVE) {
	            changeMsg.body.value = event.data;
	          }
	        } else {
	          changeMsg.body.attributeType = event.oType;
	          changeMsg.body.value = event.data;
	          if (event.cType !== _ProxyObject.ChangeType.UPDATE) {
	            changeMsg.body.operation = event.cType;
	          }
	        }
	
	        //childInfo must have (path, childId)
	        if (childInfo) {
	          changeMsg.to = childInfo.path;
	          changeMsg.body.resource = childInfo.childId;
	        }
	
	        //TODO: For Further Study
	        if (!_this._mutualAuthentication) changeMsg.body.mutualAuthentication = _this._mutualAuthentication;
	
	        _this._bus.postMessage(changeMsg);
	      }
	    }
	
	    //FLOW-IN: delta message received from a remote DataObjectReporter or DataObjectChild when changing data
	
	  }, {
	    key: '_changeObject',
	    value: function _changeObject(syncObj, msg) {
	      var _this = this;
	
	      //TODO: update version ?
	      //how to handle an incorrect version ? Example: receive a version 3 when the observer is in version 1, where is the version 2 ?
	      //will we need to confirm the reception ?
	      if (_this._version + 1 === msg.body.version) {
	        _this._version++;
	        var path = msg.body.attribute;
	        var value = (0, _utils.deepClone)(msg.body.value);
	        var findResult = syncObj.findBefore(path);
	
	        if (msg.body.attributeType === _ProxyObject.ObjectType.ARRAY) {
	          if (msg.body.operation === _ProxyObject.ChangeType.ADD) {
	            var arr = findResult.obj;
	            var index = findResult.last;
	            Array.prototype.splice.apply(arr, [index, 0].concat(value));
	          } else if (msg.body.operation === _ProxyObject.ChangeType.REMOVE) {
	            var _arr = findResult.obj;
	            var _index = findResult.last;
	            _arr.splice(_index, value);
	          } else {
	            findResult.obj[findResult.last] = value; // UPDATE
	          }
	        } else {
	          if (msg.body.value) {
	            findResult.obj[findResult.last] = value; // UPDATE or ADD
	          } else {
	            delete findResult.obj[findResult.last]; // REMOVE
	          }
	        }
	      } else {
	        //TODO: how to handle unsynchronized versions?
	        console.log('UNSYNCHRONIZED VERSION: (data => ' + _this._version + ', msg => ' + msg.body.version + ')');
	      }
	    }
	
	    //FLOW-IN: message received from a remote DataObjectChild when changing data
	
	  }, {
	    key: '_changeChildren',
	    value: function _changeChildren(msg) {
	      var _this = this;
	      console.log('Change children: ', _this._owner, msg);
	
	      var childId = msg.body.resource;
	      var children = _this._childrenObjects[childId];
	
	      if (children) {
	        _this._changeObject(children._syncObj, msg);
	      } else {
	        console.log('No children found for: ', childId);
	      }
	    }
	  }, {
	    key: 'url',
	    get: function get() {
	      return this._url;
	    }
	
	    /**
	     * Object schema URL (this field is not yet stable, and is subsject to change)
	     * @type {SchemaURL}
	     */
	
	  }, {
	    key: 'schema',
	    get: function get() {
	      return this._schema;
	    }
	
	    /**
	     * Status of the reporter or observer connection (this field is not yet stable, and is subsject to change)
	     * @type {Status} - Enum of: on | paused
	     */
	
	  }, {
	    key: 'status',
	    get: function get() {
	      return this._status;
	    }
	
	    /**
	     * Data structure to be synchronized.
	     * @type {JSON} - JSON structure that should follow the defined schema, if any.
	     */
	
	  }, {
	    key: 'data',
	    get: function get() {
	      return this._syncObj.data;
	    }
	
	    /**
	     * All created children's since the subscription, doesn't contain all children's since reporter creation.
	     * @type {Object<ChildId, DataObjectChild>}
	     */
	
	  }, {
	    key: 'childrens',
	    get: function get() {
	      return this._childrenObjects;
	    }
	  }]);
	  return DataObject;
	}(); /**
	     * Copyright 2016 PT Inovação e Sistemas SA
	     * Copyright 2016 INESC-ID
	     * Copyright 2016 QUOBIS NETWORKS SL
	     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	     * Copyright 2016 ORANGE SA
	     * Copyright 2016 Deutsche Telekom AG
	     * Copyright 2016 Apizee
	     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	     *
	     * Licensed under the Apache License, Version 2.0 (the "License");
	     * you may not use this file except in compliance with the License.
	     * You may obtain a copy of the License at
	     *
	     *   http://www.apache.org/licenses/LICENSE-2.0
	     *
	     * Unless required by applicable law or agreed to in writing, software
	     * distributed under the License is distributed on an "AS IS" BASIS,
	     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	     * See the License for the specific language governing permissions and
	     * limitations under the License.
	     **/
	
	exports.default = DataObject;
	module.exports = exports['default'];
	
	/***/ }),
	/* 122 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _ProxyObject = __webpack_require__(123);
	
	var _ProxyObject2 = _interopRequireDefault(_ProxyObject);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * The class returned from the DataObject addChildren call or from onAddChildren if remotely created.
	 * Children object synchronization is a a fast forward mechanism, no need for direct subscriptions, it uses the already authorized subscription from the parent DataObject.
	 */
	var DataObjectChild /* implements SyncStatus */ = function () {
	  /* private
	   ----event handlers----
	  _onResponseHandler: (event) => void
	  */
	
	  /**
	   * @ignore
	   * Should not be used directly by Hyperties. It's called by the DataObject.addChildren
	   */
	  function DataObjectChild(parent, childId, initialData, owner, msgId) {
	    (0, _classCallCheck3.default)(this, DataObjectChild);
	
	    var _this = this;
	
	    _this._parent = parent;
	    _this._childId = childId;
	    _this._owner = owner;
	    _this._msgId = msgId;
	
	    _this._syncObj = new _ProxyObject2.default(initialData);
	
	    _this._bus = parent._bus;
	    _this._allocateListeners();
	  }
	
	  (0, _createClass3.default)(DataObjectChild, [{
	    key: '_allocateListeners',
	    value: function _allocateListeners() {
	      var _this = this;
	
	      //this is only needed for children reporters
	      if (_this._owner) {
	        _this._listener = _this._bus.addListener(_this._owner, function (msg) {
	          if (msg.type === 'response' && msg.id === _this._msgId) {
	            console.log('DataObjectChild.onResponse:', msg);
	            _this._onResponse(msg);
	          }
	        });
	      }
	    }
	  }, {
	    key: '_releaseListeners',
	    value: function _releaseListeners() {
	      var _this = this;
	
	      if (_this._listener) {
	        _this._listener.remove();
	      }
	    }
	
	    /**
	     * Release and delete object data
	     */
	
	  }, {
	    key: 'delete',
	    value: function _delete() {
	      var _this = this;
	
	      delete _this._parent._children[_this._childId];
	
	      _this._releaseListeners();
	
	      //TODO: send delete message ?
	    }
	
	    /**
	     * Children ID generated on addChildren. Unique identifier
	     * @type {URL} - URL of the format <HypertyURL>#<numeric-sequence>
	     */
	
	  }, {
	    key: 'onChange',
	
	
	    /**
	     * Register the change listeners sent by the reporter child
	     * @param {function(event: MsgEvent)} callback
	     */
	    value: function onChange(callback) {
	      this._syncObj.observe(function (event) {
	        callback(event);
	      });
	    }
	
	    /**
	     * Setup the callback to process response notifications of the creates
	     * @param {function(event: MsgEvent)} callback
	     */
	
	  }, {
	    key: 'onResponse',
	    value: function onResponse(callback) {
	      this._onResponseHandler = callback;
	    }
	
	    //FLOW-IN: message received from a remote DataObject -> _onChildCreate
	
	  }, {
	    key: '_onResponse',
	    value: function _onResponse(msg) {
	      var _this = this;
	
	      var event = {
	        type: msg.type,
	        url: msg.body.source,
	        code: msg.body.code
	      };
	
	      if (_this._onResponseHandler) {
	        _this._onResponseHandler(event);
	      }
	    }
	  }, {
	    key: 'childId',
	    get: function get() {
	      return this._childId;
	    }
	
	    /**
	     * Data Structure to be synchronized.
	     * @type {JSON} - JSON structure that should follow the defined schema, if any.
	     */
	
	  }, {
	    key: 'data',
	    get: function get() {
	      return this._syncObj.data;
	    }
	  }]);
	  return DataObjectChild;
	}(); /**
	     * Copyright 2016 PT Inovação e Sistemas SA
	     * Copyright 2016 INESC-ID
	     * Copyright 2016 QUOBIS NETWORKS SL
	     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	     * Copyright 2016 ORANGE SA
	     * Copyright 2016 Deutsche Telekom AG
	     * Copyright 2016 Apizee
	     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	     *
	     * Licensed under the Apache License, Version 2.0 (the "License");
	     * you may not use this file except in compliance with the License.
	     * You may obtain a copy of the License at
	     *
	     *   http://www.apache.org/licenses/LICENSE-2.0
	     *
	     * Unless required by applicable law or agreed to in writing, software
	     * distributed under the License is distributed on an "AS IS" BASIS,
	     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	     * See the License for the specific language governing permissions and
	     * limitations under the License.
	     **/
	
	exports.default = DataObjectChild;
	module.exports = exports['default'];
	
	/***/ }),
	/* 123 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.ObjectType = exports.ChangeType = undefined;
	
	var _stringify = __webpack_require__(39);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	__webpack_require__(118);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var objectType = { ARRAY: '[object Array]', OBJECT: '[object Object]' };
	
	/**
	 * @access private
	 * Main class that maintains a JSON object, and observes changes in this object, recursively.
	 * Internal objects and arrays are also observed.
	 */
	
	var SyncObject = function () {
	  function SyncObject(initialData) {
	    (0, _classCallCheck3.default)(this, SyncObject);
	
	    var _this = this;
	
	    _this._observers = [];
	    _this._filters = {};
	
	    this._data = initialData || {};
	
	    this._internalObserve(this._data);
	  }
	
	  (0, _createClass3.default)(SyncObject, [{
	    key: 'observe',
	    value: function observe(callback) {
	      this._observers.push(callback);
	    }
	  }, {
	    key: 'find',
	    value: function find(path) {
	      var list = path.split('.');
	
	      return this._findWithSplit(list);
	    }
	  }, {
	    key: 'findBefore',
	    value: function findBefore(path) {
	      var result = {};
	      var list = path.split('.');
	      result.last = list.pop();
	      result.obj = this._findWithSplit(list);
	
	      return result;
	    }
	  }, {
	    key: '_findWithSplit',
	    value: function _findWithSplit(list) {
	      var obj = this._data;
	      list.forEach(function (value) {
	        obj = obj[value];
	      });
	
	      return obj;
	    }
	  }, {
	    key: '_isObservable',
	    value: function _isObservable(obj) {
	      if (obj.constructor === Object || obj.constructor === Array) {
	        return true;
	      }
	
	      return false;
	    }
	  }, {
	    key: '_internalObserve',
	    value: function _internalObserve(object) {
	      var _this2 = this;
	
	      var handler = function handler(changeset) {
	
	        changeset.every(function (change) {
	          _this2._onChanges(change);
	        });
	      };
	
	      this._data = Object.deepObserve(object, handler);
	    }
	  }, {
	    key: '_fireEvent',
	    value: function _fireEvent(event) {
	      this._observers.forEach(function (callback) {
	        callback(event);
	      });
	    }
	  }, {
	    key: '_onChanges',
	    value: function _onChanges(change) {
	
	      var obj = change.object;
	      var objType = void 0;
	
	      if (obj.constructor === Object) {
	        objType = ObjectType.OBJECT;
	      }
	
	      if (obj.constructor === Array) {
	        objType = ObjectType.ARRAY;
	      }
	
	      var fieldString = change.keypath;
	
	      // console.log('Field:', fieldString);
	      // console.log('type:', change.type);
	
	      //let oldValue = change.oldValue;
	      var newValue = obj[change.name];
	
	      console.info(change.type + ' | Field: ' + fieldString + ' | New Value:', (0, _stringify2.default)(newValue));
	
	      if (change.type === 'update') {
	        this._fireEvent({
	          cType: ChangeType.UPDATE,
	          oType: objType,
	          field: fieldString,
	          data: newValue
	        });
	      }
	
	      if (change.type === 'add') {
	        this._fireEvent({
	          cType: ChangeType.ADD,
	          oType: objType,
	          field: fieldString,
	          data: newValue
	        });
	      }
	
	      if (change.type === 'delete') {
	        this._fireEvent({
	          cType: ChangeType.REMOVE,
	          oType: objType,
	          field: fieldString
	        });
	      }
	    }
	  }, {
	    key: 'data',
	    get: function get() {
	      return this._data;
	    }
	  }]);
	  return SyncObject;
	}();
	
	var ChangeType = exports.ChangeType = { UPDATE: 'update', ADD: 'add', REMOVE: 'remove' };
	var ObjectType = exports.ObjectType = { OBJECT: 'object', ARRAY: 'array' };
	exports.default = SyncObject;
	
	/***/ }),
	/* 124 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _getPrototypeOf = __webpack_require__(31);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _getOwnPropertyDescriptor = __webpack_require__(140);
	
	var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function get(object, property, receiver) {
	  if (object === null) object = Function.prototype;
	  var desc = (0, _getOwnPropertyDescriptor2.default)(object, property);
	
	  if (desc === undefined) {
	    var parent = (0, _getPrototypeOf2.default)(object);
	
	    if (parent === null) {
	      return undefined;
	    } else {
	      return get(parent, property, receiver);
	    }
	  } else if ("value" in desc) {
	    return desc.value;
	  } else {
	    var getter = desc.get;
	
	    if (getter === undefined) {
	      return undefined;
	    }
	
	    return getter.call(receiver);
	  }
	};
	
	/***/ }),
	/* 125 */,
	/* 126 */,
	/* 127 */,
	/* 128 */,
	/* 129 */,
	/* 130 */,
	/* 131 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(71);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _assign = __webpack_require__(138);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _DataObjectReporter = __webpack_require__(120);
	
	var _DataObjectReporter2 = _interopRequireDefault(_DataObjectReporter);
	
	var _DataObjectObserver = __webpack_require__(119);
	
	var _DataObjectObserver2 = _interopRequireDefault(_DataObjectObserver);
	
	var _DataProvisional = __webpack_require__(135);
	
	var _DataProvisional2 = _interopRequireDefault(_DataProvisional);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* The main class for the syncher package.
	* The Syncher is a singleton class per Hyperty/URL and it is the owner of all created Data Sync Objects according to the Reporter - Observer pattern.
	* Main functionality is to create reporters and to subscribe to existing ones.
	*/
	var Syncher = function () {
	  /* private
	  _owner: URL
	  _bus: MiniBus
	   _subURL: URL
	   _reporters: <url: DataObjectReporter>
	  _observers: <url: DataObjectObserver>
	  _provisionals: <url: DataProvisional>
	   ----event handlers----
	  _onNotificationHandler: (event) => void
	  _onResume: (event) => void
	  */
	
	  /**
	  * Constructor that should be used by the Hyperty owner
	  * @param {HypertyURL} owner - Hyperty URL owner. An URL allocated by the runtime that uniquely identifies the Hyperty.
	  * @param {MiniBus} bus - An instance of the MiniBus provided in the sandbox. When an object (Reporter or Observed) is created, the SyncherManager will add a listener in the MiniBus to receive/send Messages of that object.
	  * @param {JSON} config - Configuration data. The only required field for now is the runtimeURL.
	  */
	  function Syncher(owner, bus, config) {
	    (0, _classCallCheck3.default)(this, Syncher);
	
	    var _this = this;
	
	    _this._owner = owner;
	    _this._bus = bus;
	
	    _this._subURL = config.runtimeURL + '/sm';
	
	    _this._reporters = {};
	    _this._observers = {};
	    _this._provisionals = {};
	
	    bus.addListener(owner, function (msg) {
	      //ignore msg sent by himself
	      if (msg.from !== owner) {
	        console.info('[Syncher] Syncher-RCV: ', msg);
	        switch (msg.type) {
	          case 'forward':
	            _this._onForward(msg);break;
	          case 'create':
	            _this._onRemoteCreate(msg);break;
	          case 'delete':
	            _this._onRemoteDelete(msg);break;
	        }
	      }
	    });
	  }
	
	  /**
	  * The owner of the Syncher and all created reporters.
	  * @type {HypertyURL}
	  */
	
	
	  (0, _createClass3.default)(Syncher, [{
	    key: 'create',
	
	
	    /**
	    * Request a DataObjectReporter creation. The URL will be be requested by the allocation mechanism.
	    * @param  {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema
	    * @param  {HypertyURL[]} observers - List of hyperties that are pre-authorized for subscription
	    * @param  {JSON} initialData - Initial data of the reporter
	    * @param  {string} objectURL - reusable dataObject URL
	    * @return {Promise<DataObjectReporter>} Return Promise to a new Reporter. The reporter can be accepted or rejected by the PEP
	    */
	    value: function create(schema, observers, initialData) {
	      var store = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	      var p2p = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
	
	      var _this = this;
	      var criteria = {};
	
	      criteria.p2p = p2p;
	      criteria.store = store;
	      criteria.schema = schema;
	      criteria.observers = observers;
	      criteria.initialData = initialData;
	
	      console.log('[syncher - create] - create Reporter - criteria: ', criteria);
	
	      (0, _assign2.default)(criteria, { resume: false });
	
	      return _this._create(criteria);
	    }
	  }, {
	    key: 'resumeReporters',
	    value: function resumeReporters(criteria) {
	      var _this = this;
	      console.log('[syncher - create] - resume Reporter - criteria: ', criteria);
	
	      (0, _assign2.default)(criteria, { resume: true });
	
	      return _this._create(criteria);
	    }
	
	    /**
	    * Request a subscription to an existent reporter object.
	    * @param {SchemaURL} schema - Hyperty Catalogue URL address that can be used to retrieve the JSON-Schema describing the Data Object schema
	    * @param {ObjectURL} objURL - Address of the existent reporter object to be observed
	    * @param {Boolean} [store=false] - Save the subscription on the Syncher Manager for further resume (Default is false)
	    * @param {Boolean} [p2p=false] - Info about if should use p2p connection (Default is false)
	    * @param {Boolean} [mutual=true] - Info about if messages of this object should be encrypted (Default is true)
	    * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.
	    */
	
	  }, {
	    key: 'subscribe',
	    value: function subscribe(schema, objURL) {
	      var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	      var p2p = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	      var mutual = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	
	      var _this = this;
	      var criteria = {};
	
	      criteria.p2p = p2p;
	      criteria.store = store;
	      criteria.schema = schema;
	      criteria.resource = objURL;
	
	      //TODO: For Further Study
	      criteria.mutual = mutual;
	
	      console.log('[syncher - subscribe] - subscribe criteria: ', criteria);
	
	      (0, _assign2.default)(criteria, { resume: false });
	
	      return _this._subscribe(criteria);
	    }
	
	    /**
	    * Request a subscription to an existent reporter object.
	    * @param {criteria} criteria - Information to discovery the observer object
	    * @return {Promise<DataObjectObserver>} Return Promise to a new observer. It's associated with the reporter.
	    */
	
	  }, {
	    key: 'resumeObservers',
	    value: function resumeObservers(criteria) {
	      var _this = this;
	      var _criteria = criteria || {};
	
	      (0, _assign2.default)(_criteria, { resume: true });
	
	      return _this._subscribe(_criteria);
	    }
	
	    /**
	    * Request a read action on the reporter object
	    * @param {ObjectURL} objURL - URL of the reporter object to be read
	    * @return {Promise<Object>} Return Promise to last available data of the reporter
	    */
	
	  }, {
	    key: 'read',
	    value: function read(objURL) {
	      var _this = this;
	
	      //FLOW-OUT: this message will be sent directly to reporter object (maybe there is no listener available, so it will be resolved with MessageBus -> resolve)
	      //will reach the remote object in DataObjectReporter -> _onRead
	      var readMsg = {
	        type: 'read', from: _this._owner, to: objURL
	      };
	
	      return new _promise2.default(function (resolve, reject) {
	        _this._bus.postMessage(readMsg, function (reply) {
	          console.log('read-response: ', reply);
	          if (reply.body.code === 200) {
	            resolve(reply.body.value);
	          } else {
	            reject(reply.body.desc);
	          }
	        });
	      });
	    }
	
	    /**
	    * Setup the callback to process create and delete events of remove Reporter objects.
	    * This is releated to the messagens sent by create to the observers Hyperty array.
	    * @param {function(event: MsgEvent)} callback
	    */
	
	  }, {
	    key: 'onNotification',
	    value: function onNotification(callback) {
	      this._onNotificationHandler = callback;
	    }
	  }, {
	    key: '_create',
	    value: function _create(criteria) {
	      var _this = this;
	
	      return new _promise2.default(function (resolve, reject) {
	        var resume = criteria.resume;
	        var initialData = criteria.initialData || {};
	        var schema = void 0;
	
	        //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onCreate
	        var requestMsg = {
	          type: 'create', from: _this._owner, to: _this._subURL,
	          body: { resume: resume }
	        };
	
	        console.log('[syncher - create]: ', criteria, requestMsg);
	
	        requestMsg.body.value = initialData;
	        requestMsg.body.value.reporter = _this._owner;
	
	        if (criteria.schema) {
	          schema = criteria.schema;
	          requestMsg.body.schema = criteria.schema;
	        }
	
	        if (criteria.p2p) requestMsg.body.p2p = criteria.p2p;
	        if (criteria.store) requestMsg.body.store = criteria.store;
	        if (criteria.observers) requestMsg.body.authorise = criteria.observers;
	
	        if (resume) {
	          console.log('[syncher - create] - resume message: ', requestMsg);
	        } else {
	          console.log('[syncher - create] - create message: ', requestMsg);
	        }
	
	        //request create to the allocation system. Can be rejected by the PolicyEngine.
	        _this._bus.postMessage(requestMsg, function (reply) {
	          console.log('[syncher - create] - create-response: ', reply);
	          if (reply.body.code === 200) {
	            //reporter creation accepted
	            var objURL = reply.body.resource;
	
	            if (resume) {
	              schema = reply.body.schema;
	              initialData = reply.body.value;
	            }
	
	            var newObj = new _DataObjectReporter2.default(_this, objURL, schema, 'on', initialData, reply.body.childrenResources);
	            _this._reporters[objURL] = newObj;
	
	            resolve(newObj);
	          } else {
	            //reporter creation rejected
	            reject(reply.body.desc);
	          }
	        });
	      });
	    }
	  }, {
	    key: '_subscribe',
	    value: function _subscribe(criteria) {
	      var _this = this;
	
	      return new _promise2.default(function (resolve, reject) {
	
	        //FLOW-OUT: this message will be sent to the runtime instance of SyncherManager -> _onLocalSubscribe
	        var subscribeMsg = {
	          type: 'subscribe', from: _this._owner, to: _this._subURL,
	          body: {}
	        };
	
	        // Hyperty request to be an Observer
	        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#hyperty-request-to-be-an-observer
	
	        // Resume Subscriptions for the same Hyperty URL
	        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-the-same-hyperty-url
	
	        // Resume Subscriptions for a certain user and data schema independently of the Hyperty URL.
	        // https://github.com/reTHINK-project/specs/blob/master/messages/data-sync-messages.md#resume-subscriptions-for-a-certain-user-and-data-schema-independently-of-the-hyperty-url
	        if (criteria) {
	          if (criteria.hasOwnProperty('p2p')) subscribeMsg.body.p2p = criteria.p2p;
	          if (criteria.hasOwnProperty('store')) subscribeMsg.body.store = criteria.store;
	          if (criteria.hasOwnProperty('schema')) subscribeMsg.body.schema = criteria.schema;
	          if (criteria.hasOwnProperty('identity')) subscribeMsg.body.identity = criteria.identity;
	          if (criteria.hasOwnProperty('resource')) subscribeMsg.body.resource = criteria.resource;
	        }
	
	        subscribeMsg.body.resume = criteria.resume;
	
	        //TODO: For Further Study
	        var mutualAuthentication = criteria.mutual;
	        if (!mutualAuthentication) subscribeMsg.body.mutualAuthentication = mutualAuthentication;
	
	        console.log('[syncher] - subscribe message: ', criteria, subscribeMsg);
	
	        //request subscription
	        //Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.
	        //for more info see the DataProvisional class documentation.
	        _this._bus.postMessage(subscribeMsg, function (reply) {
	          console.log('[syncher] - subscribe-response: ', reply);
	
	          var schema = reply.body.schema;
	          var objURL = reply.body.resource;
	
	          var newProvisional = _this._provisionals[objURL];
	          delete _this._provisionals[objURL];
	          if (newProvisional) newProvisional._releaseListeners();
	
	          if (reply.body.code < 200) {
	            console.log('[syncher] - new DataProvisional: ', reply.body.childrenResources, objURL);
	            newProvisional = new _DataProvisional2.default(_this._owner, objURL, _this._bus, reply.body.childrenResources);
	            _this._provisionals[objURL] = newProvisional;
	          } else if (reply.body.code === 200) {
	            console.log('[syncher] - new Data Object Observer: ', reply, _this._provisionals);
	
	            //TODO: For Further Study
	            var newObj = new _DataObjectObserver2.default(_this, objURL, schema, 'on', reply.body.value, newProvisional.children, reply.body.version, mutualAuthentication);
	            _this._observers[objURL] = newObj;
	
	            resolve(newObj);
	            newProvisional.apply(newObj);
	          } else {
	            reject(reply.body.desc);
	          }
	        });
	      });
	    }
	
	    //FLOW-IN: message received from a local runtime ReporterObject -> _onRemoteSubscribe
	
	  }, {
	    key: '_onForward',
	    value: function _onForward(msg) {
	      var _this = this;
	
	      var reporter = _this._reporters[msg.body.to];
	      reporter._onForward(msg);
	    }
	
	    //FLOW-IN: message received from a remote Syncher -> create (this is actually an invitation to subscribe)
	
	  }, {
	    key: '_onRemoteCreate',
	    value: function _onRemoteCreate(msg) {
	      var _this = this;
	
	      //remove "/subscription" from the URL
	      var resource = msg.from.slice(0, -13);
	
	      var event = {
	        type: msg.type,
	        from: msg.body.source,
	        url: resource,
	        schema: msg.body.schema,
	        value: msg.body.value,
	        identity: msg.body.identity,
	
	        ack: function ack(type) {
	          var lType = 200;
	          if (type) {
	            lType = type;
	          }
	
	          //send ack response message
	          _this._bus.postMessage({
	            id: msg.id, type: 'response', from: msg.to, to: msg.from,
	            body: { code: lType }
	          });
	        }
	      };
	
	      if (_this._onNotificationHandler) {
	        console.info('[Syncher] NOTIFICATION-EVENT: ', event);
	        _this._onNotificationHandler(event);
	      }
	    }
	
	    //FLOW-IN: message received from a remote DataObjectReporter -> delete
	
	  }, {
	    key: '_onRemoteDelete',
	    value: function _onRemoteDelete(msg) {
	      var _this = this;
	
	      //remove "/subscription" from the URL
	      var resource = msg.body.resource;
	
	      var object = _this._observers[resource];
	      if (object) {
	        var event = {
	          type: msg.type,
	          url: resource,
	          identity: msg.body.identity,
	
	          ack: function ack(type) {
	            var lType = 200;
	            if (type) {
	              lType = type;
	            }
	
	            //TODO: any other different options for the release process, like accept but nor release local?
	            if (lType === 200) {
	              object.delete();
	            }
	
	            //send ack response message
	            _this._bus.postMessage({
	              id: msg.id, type: 'response', from: msg.to, to: msg.from,
	              body: { code: lType, source: _this._owner }
	            });
	          }
	        };
	
	        if (_this._onNotificationHandler) {
	          console.log('NOTIFICATION-EVENT: ', event);
	          _this._onNotificationHandler(event);
	        }
	      } else {
	        _this._bus.postMessage({
	          id: msg.id, type: 'response', from: msg.to, to: msg.from,
	          body: { code: 404, source: _this._owner }
	        });
	      }
	    }
	  }, {
	    key: 'owner',
	    get: function get() {
	      return this._owner;
	    }
	
	    /**
	    * All owned reporters, the ones that were created by a create
	    * @type {Object<URL, DataObjectReporter>}
	    */
	
	  }, {
	    key: 'reporters',
	    get: function get() {
	      return this._reporters;
	    }
	
	    /**
	    * All owned observers, the ones that were created by a local subscription
	    * @type {Object<URL, DataObjectObserver>}
	    */
	
	  }, {
	    key: 'observers',
	    get: function get() {
	      return this._observers;
	    }
	  }]);
	  return Syncher;
	}(); /**
	     * Copyright 2016 PT Inovação e Sistemas SA
	     * Copyright 2016 INESC-ID
	     * Copyright 2016 QUOBIS NETWORKS SL
	     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	     * Copyright 2016 ORANGE SA
	     * Copyright 2016 Deutsche Telekom AG
	     * Copyright 2016 Apizee
	     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	     *
	     * Licensed under the Apache License, Version 2.0 (the "License");
	     * you may not use this file except in compliance with the License.
	     * You may obtain a copy of the License at
	     *
	     *   http://www.apache.org/licenses/LICENSE-2.0
	     *
	     * Unless required by applicable law or agreed to in writing, software
	     * distributed under the License is distributed on an "AS IS" BASIS,
	     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	     * See the License for the specific language governing permissions and
	     * limitations under the License.
	     **/
	
	exports.default = Syncher;
	module.exports = exports['default'];
	
	/***/ }),
	/* 132 */,
	/* 133 */,
	/* 134 */,
	/* 135 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	
	/**
	 * @access private
	 * This class is responsible for collecting delta changes in remote objects, before the response of subscription reach the observer.
	 * It's used in Syncher -> subscribe. The flow is defined as:
	 * 1. (observer) --subscribe--> (reporter)
	 * 2. (observer) <--delta updates-- (reporter)
	 * 3. (observer) <--subscribe response-- (reporter)
	 * This means that there could be delta updates transferred before the subscription confirmation.
	 * Since there is no DataObjectObserver before the ubscription confirmation, there should be some other object collecting the updates.
	 * Provisional data is applied to the DataObjectObserver after confirmation. Or discarded if there is no confirmation.
	 */
	var DataProvisional = function () {
	  /* private
	  _childrenListeners: [MsgListener]
	  _listener: MsgListener
	   _changes: []
	  */
	
	  function DataProvisional(owner, url, bus, children) {
	    (0, _classCallCheck3.default)(this, DataProvisional);
	
	    var _this = this;
	
	    _this._owner = owner;
	    _this._url = url;
	    _this._bus = bus;
	    _this._children = children;
	
	    _this._changes = [];
	    _this._allocateListeners();
	  }
	
	  (0, _createClass3.default)(DataProvisional, [{
	    key: '_allocateListeners',
	    value: function _allocateListeners() {
	      var _this = this;
	
	      _this._listener = _this._bus.addListener(_this._url, function (msg) {
	        console.log('DataProvisional-' + _this._url + '-RCV: ', msg);
	        _this._changes.push(msg);
	      });
	
	      /*
	      _this._childrenListeners = [];
	      if (_this._children) {
	        let childBaseURL = url + '/children/';
	        _this._children.forEach((child) => {
	          let childURL = childBaseURL + child;
	          let listener = _this._bus.addListener(childURL, (msg) => {
	            //ignore msg sent by himself
	            if (msg.from !== owner) {
	              console.log(msg);
	            }
	          });
	           _this._childrenListeners.push(listener);
	        });
	      }*/
	    }
	  }, {
	    key: '_releaseListeners',
	    value: function _releaseListeners() {
	      var _this = this;
	
	      _this._listener.remove();
	
	      /*_this._childrenListeners.forEach((listener) => {
	        listener.remove();
	      });*/
	    }
	  }, {
	    key: 'apply',
	    value: function apply(observer) {
	      var _this = this;
	      _this._changes.forEach(function (change) {
	        observer._changeObject(observer._syncObj, change);
	      });
	    }
	  }, {
	    key: 'children',
	    get: function get() {
	      return this._children;
	    }
	  }]);
	  return DataProvisional;
	}();
	
	exports.default = DataProvisional;
	module.exports = exports['default'];
	
	/***/ }),
	/* 136 */,
	/* 137 */,
	/* 138 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(145), __esModule: true };
	
	/***/ }),
	/* 139 */,
	/* 140 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(147), __esModule: true };
	
	/***/ }),
	/* 141 */,
	/* 142 */,
	/* 143 */,
	/* 144 */,
	/* 145 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(151);
	module.exports = __webpack_require__(0).Object.assign;
	
	/***/ }),
	/* 146 */,
	/* 147 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(153);
	var $Object = __webpack_require__(0).Object;
	module.exports = function getOwnPropertyDescriptor(it, key){
	  return $Object.getOwnPropertyDescriptor(it, key);
	};
	
	/***/ }),
	/* 148 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys  = __webpack_require__(18)
	  , gOPS     = __webpack_require__(58)
	  , pIE      = __webpack_require__(41)
	  , toObject = __webpack_require__(32)
	  , IObject  = __webpack_require__(56)
	  , $assign  = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(11)(function(){
	  var A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , aLen  = arguments.length
	    , index = 1
	    , getSymbols = gOPS.f
	    , isEnum     = pIE.f;
	  while(aLen > index){
	    var S      = IObject(arguments[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  } return T;
	} : $assign;
	
	/***/ }),
	/* 149 */,
	/* 150 */,
	/* 151 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(8);
	
	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(148)});
	
	/***/ }),
	/* 152 */,
	/* 153 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject                 = __webpack_require__(13)
	  , $getOwnPropertyDescriptor = __webpack_require__(57).f;
	
	__webpack_require__(45)('getOwnPropertyDescriptor', function(){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});
	
	/***/ }),
	/* 154 */,
	/* 155 */,
	/* 156 */,
	/* 157 */,
	/* 158 */,
	/* 159 */,
	/* 160 */,
	/* 161 */,
	/* 162 */,
	/* 163 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.DataObjectObserver = exports.DataObjectReporter = exports.Syncher = undefined;
	
	var _Syncher = __webpack_require__(131);
	
	var _Syncher2 = _interopRequireDefault(_Syncher);
	
	var _DataObjectReporter = __webpack_require__(120);
	
	var _DataObjectReporter2 = _interopRequireDefault(_DataObjectReporter);
	
	var _DataObjectObserver = __webpack_require__(119);
	
	var _DataObjectObserver2 = _interopRequireDefault(_DataObjectObserver);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.Syncher = _Syncher2.default;
	exports.DataObjectReporter = _DataObjectReporter2.default;
	exports.DataObjectObserver = _DataObjectObserver2.default;
	
	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	// version: 0.5.1
	// date: Mon Feb 20 2017 18:22:18 GMT+0000 (WET)
	// licence: 
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	
	
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define("Discovery", [], factory);
		else if(typeof exports === 'object')
			exports["Discovery"] = factory();
		else
			root[""] = root[""] || {}, root[""]["Discovery"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 158);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {
	
	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
	
	/***/ }),
	/* 1 */
	/***/ (function(module, exports) {
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
	
	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(11)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var store      = __webpack_require__(30)('wks')
	  , uid        = __webpack_require__(23)
	  , Symbol     = __webpack_require__(1).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;
	
	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var anObject       = __webpack_require__(5)
	  , IE8_DOM_DEFINE = __webpack_require__(25)
	  , toPrimitive    = __webpack_require__(21)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(2) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};
	
	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(6);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};
	
	/***/ }),
	/* 6 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};
	
	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP         = __webpack_require__(4)
	  , createDesc = __webpack_require__(15);
	module.exports = __webpack_require__(2) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};
	
	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(1)
	  , core      = __webpack_require__(0)
	  , ctx       = __webpack_require__(14)
	  , hide      = __webpack_require__(7)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;
	
	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	
	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(33);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	
	/***/ }),
	/* 11 */
	/***/ (function(module, exports) {
	
	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};
	
	/***/ }),
	/* 12 */
	/***/ (function(module, exports) {
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};
	
	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(56)
	  , defined = __webpack_require__(24);
	module.exports = function(it){
	  return IObject(defined(it));
	};
	
	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// optional / simple context binding
	var aFunction = __webpack_require__(19);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};
	
	/***/ }),
	/* 15 */
	/***/ (function(module, exports) {
	
	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};
	
	/***/ }),
	/* 16 */
	/***/ (function(module, exports) {
	
	module.exports = {};
	
	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var isObject = __webpack_require__(6)
	  , document = __webpack_require__(1).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};
	
	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(44)
	  , enumBugKeys = __webpack_require__(29);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};
	
	/***/ }),
	/* 19 */
	/***/ (function(module, exports) {
	
	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};
	
	/***/ }),
	/* 20 */
	/***/ (function(module, exports) {
	
	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};
	
	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(6);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};
	
	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var def = __webpack_require__(4).f
	  , has = __webpack_require__(12)
	  , TAG = __webpack_require__(3)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};
	
	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {
	
	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};
	
	/***/ }),
	/* 24 */
	/***/ (function(module, exports) {
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};
	
	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = !__webpack_require__(2) && !__webpack_require__(11)(function(){
	  return Object.defineProperty(__webpack_require__(17)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});
	
	/***/ }),
	/* 26 */
	/***/ (function(module, exports) {
	
	module.exports = true;
	
	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var shared = __webpack_require__(30)('keys')
	  , uid    = __webpack_require__(23);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};
	
	/***/ }),
	/* 28 */
	/***/ (function(module, exports) {
	
	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};
	
	/***/ }),
	/* 29 */
	/***/ (function(module, exports) {
	
	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');
	
	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global = __webpack_require__(1)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};
	
	/***/ }),
	/* 31 */,
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(24);
	module.exports = function(it){
	  return Object(defined(it));
	};
	
	/***/ }),
	/* 33 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(36), __esModule: true };
	
	/***/ }),
	/* 34 */,
	/* 35 */,
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(38);
	var $Object = __webpack_require__(0).Object;
	module.exports = function defineProperty(it, key, desc){
	  return $Object.defineProperty(it, key, desc);
	};
	
	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(5)
	  , dPs         = __webpack_require__(64)
	  , enumBugKeys = __webpack_require__(29)
	  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(17)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(42).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};
	
	
	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var $export = __webpack_require__(8);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(2), 'Object', {defineProperty: __webpack_require__(4).f});
	
	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(53), __esModule: true };
	
	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY        = __webpack_require__(26)
	  , $export        = __webpack_require__(8)
	  , redefine       = __webpack_require__(46)
	  , hide           = __webpack_require__(7)
	  , has            = __webpack_require__(12)
	  , Iterators      = __webpack_require__(16)
	  , $iterCreate    = __webpack_require__(62)
	  , setToStringTag = __webpack_require__(22)
	  , getPrototypeOf = __webpack_require__(43)
	  , ITERATOR       = __webpack_require__(3)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};
	
	/***/ }),
	/* 41 */,
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = __webpack_require__(1).document && document.documentElement;
	
	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(12)
	  , toObject    = __webpack_require__(32)
	  , IE_PROTO    = __webpack_require__(27)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};
	
	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var has          = __webpack_require__(12)
	  , toIObject    = __webpack_require__(13)
	  , arrayIndexOf = __webpack_require__(61)(false)
	  , IE_PROTO     = __webpack_require__(27)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};
	
	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(8)
	  , core    = __webpack_require__(0)
	  , fails   = __webpack_require__(11);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};
	
	/***/ }),
	/* 46 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = __webpack_require__(7);
	
	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(28)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};
	
	/***/ }),
	/* 48 */,
	/* 49 */,
	/* 50 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var $at  = __webpack_require__(66)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(40)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});
	
	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(69);
	var global        = __webpack_require__(1)
	  , hide          = __webpack_require__(7)
	  , Iterators     = __webpack_require__(16)
	  , TO_STRING_TAG = __webpack_require__(3)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}
	
	/***/ }),
	/* 52 */,
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var core  = __webpack_require__(0)
	  , $JSON = core.JSON || (core.JSON = {stringify: JSON.stringify});
	module.exports = function stringify(it){ // eslint-disable-line no-unused-vars
	  return $JSON.stringify.apply($JSON, arguments);
	};
	
	/***/ }),
	/* 54 */
	/***/ (function(module, exports) {
	
	
	
	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(20)
	  , TAG = __webpack_require__(3)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function(it, key){
	  try {
	    return it[key];
	  } catch(e){ /* empty */ }
	};
	
	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};
	
	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(20);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};
	
	/***/ }),
	/* 57 */,
	/* 58 */,
	/* 59 */,
	/* 60 */
	/***/ (function(module, exports) {
	
	module.exports = function(){ /* empty */ };
	
	/***/ }),
	/* 61 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(13)
	  , toLength  = __webpack_require__(47)
	  , toIndex   = __webpack_require__(68);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};
	
	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var create         = __webpack_require__(37)
	  , descriptor     = __webpack_require__(15)
	  , setToStringTag = __webpack_require__(22)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(7)(IteratorPrototype, __webpack_require__(3)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};
	
	/***/ }),
	/* 63 */
	/***/ (function(module, exports) {
	
	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};
	
	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var dP       = __webpack_require__(4)
	  , anObject = __webpack_require__(5)
	  , getKeys  = __webpack_require__(18);
	
	module.exports = __webpack_require__(2) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};
	
	/***/ }),
	/* 65 */,
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(28)
	  , defined   = __webpack_require__(24);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};
	
	/***/ }),
	/* 67 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ctx                = __webpack_require__(14)
	  , invoke             = __webpack_require__(88)
	  , html               = __webpack_require__(42)
	  , cel                = __webpack_require__(17)
	  , global             = __webpack_require__(1)
	  , process            = global.process
	  , setTask            = global.setImmediate
	  , clearTask          = global.clearImmediate
	  , MessageChannel     = global.MessageChannel
	  , counter            = 0
	  , queue              = {}
	  , ONREADYSTATECHANGE = 'onreadystatechange'
	  , defer, channel, port;
	var run = function(){
	  var id = +this;
	  if(queue.hasOwnProperty(id)){
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};
	var listener = function(event){
	  run.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if(!setTask || !clearTask){
	  setTask = function setImmediate(fn){
	    var args = [], i = 1;
	    while(arguments.length > i)args.push(arguments[i++]);
	    queue[++counter] = function(){
	      invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id){
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if(__webpack_require__(20)(process) == 'process'){
	    defer = function(id){
	      process.nextTick(ctx(run, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if(MessageChannel){
	    channel = new MessageChannel;
	    port    = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
	    defer = function(id){
	      global.postMessage(id + '', '*');
	    };
	    global.addEventListener('message', listener, false);
	  // IE8-
	  } else if(ONREADYSTATECHANGE in cel('script')){
	    defer = function(id){
	      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
	        html.removeChild(this);
	        run.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function(id){
	      setTimeout(ctx(run, id, 1), 0);
	    };
	  }
	}
	module.exports = {
	  set:   setTask,
	  clear: clearTask
	};
	
	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var toInteger = __webpack_require__(28)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};
	
	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var addToUnscopables = __webpack_require__(60)
	  , step             = __webpack_require__(63)
	  , Iterators        = __webpack_require__(16)
	  , toIObject        = __webpack_require__(13);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(40)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');
	
	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(80), __esModule: true };
	
	/***/ }),
	/* 71 */
	/***/ (function(module, exports, __webpack_require__) {
	
	module.exports = { "default": __webpack_require__(82), __esModule: true };
	
	/***/ }),
	/* 72 */,
	/* 73 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var classof   = __webpack_require__(55)
	  , ITERATOR  = __webpack_require__(3)('iterator')
	  , Iterators = __webpack_require__(16);
	module.exports = __webpack_require__(0).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};
	
	/***/ }),
	/* 74 */,
	/* 75 */,
	/* 76 */,
	/* 77 */,
	/* 78 */,
	/* 79 */,
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(102);
	module.exports = __webpack_require__(0).Object.keys;
	
	/***/ }),
	/* 81 */,
	/* 82 */
	/***/ (function(module, exports, __webpack_require__) {
	
	__webpack_require__(54);
	__webpack_require__(50);
	__webpack_require__(51);
	__webpack_require__(104);
	module.exports = __webpack_require__(0).Promise;
	
	/***/ }),
	/* 83 */,
	/* 84 */,
	/* 85 */
	/***/ (function(module, exports) {
	
	module.exports = function(it, Constructor, name, forbiddenField){
	  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};
	
	/***/ }),
	/* 86 */,
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ctx         = __webpack_require__(14)
	  , call        = __webpack_require__(91)
	  , isArrayIter = __webpack_require__(89)
	  , anObject    = __webpack_require__(5)
	  , toLength    = __webpack_require__(47)
	  , getIterFn   = __webpack_require__(73)
	  , BREAK       = {}
	  , RETURN      = {};
	var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
	  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator, result;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if(result === BREAK || result === RETURN)return result;
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    result = call(iterator, f, step.value, entries);
	    if(result === BREAK || result === RETURN)return result;
	  }
	};
	exports.BREAK  = BREAK;
	exports.RETURN = RETURN;
	
	/***/ }),
	/* 88 */
	/***/ (function(module, exports) {
	
	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	module.exports = function(fn, args, that){
	  var un = that === undefined;
	  switch(args.length){
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return              fn.apply(that, args);
	};
	
	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// check on default Array iterator
	var Iterators  = __webpack_require__(16)
	  , ITERATOR   = __webpack_require__(3)('iterator')
	  , ArrayProto = Array.prototype;
	
	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};
	
	/***/ }),
	/* 90 */,
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(5);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};
	
	/***/ }),
	/* 92 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var ITERATOR     = __webpack_require__(3)('iterator')
	  , SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function(){ SAFE_CLOSING = true; };
	  Array.from(riter, function(){ throw 2; });
	} catch(e){ /* empty */ }
	
	module.exports = function(exec, skipClosing){
	  if(!skipClosing && !SAFE_CLOSING)return false;
	  var safe = false;
	  try {
	    var arr  = [7]
	      , iter = arr[ITERATOR]();
	    iter.next = function(){ return {done: safe = true}; };
	    arr[ITERATOR] = function(){ return iter; };
	    exec(arr);
	  } catch(e){ /* empty */ }
	  return safe;
	};
	
	/***/ }),
	/* 93 */,
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var global    = __webpack_require__(1)
	  , macrotask = __webpack_require__(67).set
	  , Observer  = global.MutationObserver || global.WebKitMutationObserver
	  , process   = global.process
	  , Promise   = global.Promise
	  , isNode    = __webpack_require__(20)(process) == 'process';
	
	module.exports = function(){
	  var head, last, notify;
	
	  var flush = function(){
	    var parent, fn;
	    if(isNode && (parent = process.domain))parent.exit();
	    while(head){
	      fn   = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch(e){
	        if(head)notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if(parent)parent.enter();
	  };
	
	  // Node.js
	  if(isNode){
	    notify = function(){
	      process.nextTick(flush);
	    };
	  // browsers with MutationObserver
	  } else if(Observer){
	    var toggle = true
	      , node   = document.createTextNode('');
	    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
	    notify = function(){
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if(Promise && Promise.resolve){
	    var promise = Promise.resolve();
	    notify = function(){
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function(){
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global, flush);
	    };
	  }
	
	  return function(fn){
	    var task = {fn: fn, next: undefined};
	    if(last)last.next = task;
	    if(!head){
	      head = task;
	      notify();
	    } last = task;
	  };
	};
	
	/***/ }),
	/* 95 */,
	/* 96 */
	/***/ (function(module, exports, __webpack_require__) {
	
	var hide = __webpack_require__(7);
	module.exports = function(target, src, safe){
	  for(var key in src){
	    if(safe && target[key])target[key] = src[key];
	    else hide(target, key, src[key]);
	  } return target;
	};
	
	/***/ }),
	/* 97 */,
	/* 98 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var global      = __webpack_require__(1)
	  , core        = __webpack_require__(0)
	  , dP          = __webpack_require__(4)
	  , DESCRIPTORS = __webpack_require__(2)
	  , SPECIES     = __webpack_require__(3)('species');
	
	module.exports = function(KEY){
	  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};
	
	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 7.3.20 SpeciesConstructor(O, defaultConstructor)
	var anObject  = __webpack_require__(5)
	  , aFunction = __webpack_require__(19)
	  , SPECIES   = __webpack_require__(3)('species');
	module.exports = function(O, D){
	  var C = anObject(O).constructor, S;
	  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
	};
	
	/***/ }),
	/* 100 */,
	/* 101 */,
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {
	
	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(32)
	  , $keys    = __webpack_require__(18);
	
	__webpack_require__(45)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});
	
	/***/ }),
	/* 103 */,
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	var LIBRARY            = __webpack_require__(26)
	  , global             = __webpack_require__(1)
	  , ctx                = __webpack_require__(14)
	  , classof            = __webpack_require__(55)
	  , $export            = __webpack_require__(8)
	  , isObject           = __webpack_require__(6)
	  , aFunction          = __webpack_require__(19)
	  , anInstance         = __webpack_require__(85)
	  , forOf              = __webpack_require__(87)
	  , speciesConstructor = __webpack_require__(99)
	  , task               = __webpack_require__(67).set
	  , microtask          = __webpack_require__(94)()
	  , PROMISE            = 'Promise'
	  , TypeError          = global.TypeError
	  , process            = global.process
	  , $Promise           = global[PROMISE]
	  , process            = global.process
	  , isNode             = classof(process) == 'process'
	  , empty              = function(){ /* empty */ }
	  , Internal, GenericPromiseCapability, Wrapper;
	
	var USE_NATIVE = !!function(){
	  try {
	    // correct subclassing with @@species support
	    var promise     = $Promise.resolve(1)
	      , FakePromise = (promise.constructor = {})[__webpack_require__(3)('species')] = function(exec){ exec(empty, empty); };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
	  } catch(e){ /* empty */ }
	}();
	
	// helpers
	var sameConstructor = function(a, b){
	  // with library wrapper special case
	  return a === b || a === $Promise && b === Wrapper;
	};
	var isThenable = function(it){
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var newPromiseCapability = function(C){
	  return sameConstructor($Promise, C)
	    ? new PromiseCapability(C)
	    : new GenericPromiseCapability(C);
	};
	var PromiseCapability = GenericPromiseCapability = function(C){
	  var resolve, reject;
	  this.promise = new C(function($$resolve, $$reject){
	    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject  = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject  = aFunction(reject);
	};
	var perform = function(exec){
	  try {
	    exec();
	  } catch(e){
	    return {error: e};
	  }
	};
	var notify = function(promise, isReject){
	  if(promise._n)return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function(){
	    var value = promise._v
	      , ok    = promise._s == 1
	      , i     = 0;
	    var run = function(reaction){
	      var handler = ok ? reaction.ok : reaction.fail
	        , resolve = reaction.resolve
	        , reject  = reaction.reject
	        , domain  = reaction.domain
	        , result, then;
	      try {
	        if(handler){
	          if(!ok){
	            if(promise._h == 2)onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if(handler === true)result = value;
	          else {
	            if(domain)domain.enter();
	            result = handler(value);
	            if(domain)domain.exit();
	          }
	          if(result === reaction.promise){
	            reject(TypeError('Promise-chain cycle'));
	          } else if(then = isThenable(result)){
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch(e){
	        reject(e);
	      }
	    };
	    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if(isReject && !promise._h)onUnhandled(promise);
	  });
	};
	var onUnhandled = function(promise){
	  task.call(global, function(){
	    var value = promise._v
	      , abrupt, handler, console;
	    if(isUnhandled(promise)){
	      abrupt = perform(function(){
	        if(isNode){
	          process.emit('unhandledRejection', value, promise);
	        } else if(handler = global.onunhandledrejection){
	          handler({promise: promise, reason: value});
	        } else if((console = global.console) && console.error){
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if(abrupt)throw abrupt.error;
	  });
	};
	var isUnhandled = function(promise){
	  if(promise._h == 1)return false;
	  var chain = promise._a || promise._c
	    , i     = 0
	    , reaction;
	  while(chain.length > i){
	    reaction = chain[i++];
	    if(reaction.fail || !isUnhandled(reaction.promise))return false;
	  } return true;
	};
	var onHandleUnhandled = function(promise){
	  task.call(global, function(){
	    var handler;
	    if(isNode){
	      process.emit('rejectionHandled', promise);
	    } else if(handler = global.onrejectionhandled){
	      handler({promise: promise, reason: promise._v});
	    }
	  });
	};
	var $reject = function(value){
	  var promise = this;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if(!promise._a)promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function(value){
	  var promise = this
	    , then;
	  if(promise._d)return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if(promise === value)throw TypeError("Promise can't be resolved itself");
	    if(then = isThenable(value)){
	      microtask(function(){
	        var wrapper = {_w: promise, _d: false}; // wrap
	        try {
	          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
	        } catch(e){
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch(e){
	    $reject.call({_w: promise, _d: false}, e); // wrap
	  }
	};
	
	// constructor polyfill
	if(!USE_NATIVE){
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor){
	    anInstance(this, $Promise, PROMISE, '_h');
	    aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
	    } catch(err){
	      $reject.call(this, err);
	    }
	  };
	  Internal = function Promise(executor){
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = __webpack_require__(96)($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected){
	      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
	      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail   = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode ? process.domain : undefined;
	      this._c.push(reaction);
	      if(this._a)this._a.push(reaction);
	      if(this._s)notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function(onRejected){
	      return this.then(undefined, onRejected);
	    }
	  });
	  PromiseCapability = function(){
	    var promise  = new Internal;
	    this.promise = promise;
	    this.resolve = ctx($resolve, promise, 1);
	    this.reject  = ctx($reject, promise, 1);
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
	__webpack_require__(22)($Promise, PROMISE);
	__webpack_require__(98)(PROMISE);
	Wrapper = __webpack_require__(0)[PROMISE];
	
	// statics
	$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r){
	    var capability = newPromiseCapability(this)
	      , $$reject   = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x){
	    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
	    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
	    var capability = newPromiseCapability(this)
	      , $$resolve  = capability.resolve;
	    $$resolve(x);
	    return capability.promise;
	  }
	});
	$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(92)(function(iter){
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , resolve    = capability.resolve
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      var values    = []
	        , index     = 0
	        , remaining = 1;
	      forOf(iterable, false, function(promise){
	        var $index        = index++
	          , alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function(value){
	          if(alreadyCalled)return;
	          alreadyCalled  = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable){
	    var C          = this
	      , capability = newPromiseCapability(C)
	      , reject     = capability.reject;
	    var abrupt = perform(function(){
	      forOf(iterable, false, function(promise){
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if(abrupt)reject(abrupt.error);
	    return capability.promise;
	  }
	});
	
	/***/ }),
	/* 105 */,
	/* 106 */,
	/* 107 */,
	/* 108 */,
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _stringify = __webpack_require__(39);
	
	var _stringify2 = _interopRequireDefault(_stringify);
	
	var _keys = __webpack_require__(70);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	exports.divideURL = divideURL;
	exports.divideEmail = divideEmail;
	exports.emptyObject = emptyObject;
	exports.deepClone = deepClone;
	exports.getUserURLFromEmail = getUserURLFromEmail;
	exports.getUserEmailFromURL = getUserEmailFromURL;
	exports.convertToUserURL = convertToUserURL;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Copyright 2016 PT Inovação e Sistemas SA
	* Copyright 2016 INESC-ID
	* Copyright 2016 QUOBIS NETWORKS SL
	* Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	* Copyright 2016 ORANGE SA
	* Copyright 2016 Deutsche Telekom AG
	* Copyright 2016 Apizee
	* Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	*
	* Licensed under the Apache License, Version 2.0 (the "License");
	* you may not use this file except in compliance with the License.
	* You may obtain a copy of the License at
	*
	*   http://www.apache.org/licenses/LICENSE-2.0
	*
	* Unless required by applicable law or agreed to in writing, software
	* distributed under the License is distributed on an "AS IS" BASIS,
	* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	* See the License for the specific language governing permissions and
	* limitations under the License.
	**/
	/**
	 * Support module with some functions will be useful
	 * @module utils
	 */
	
	/**
	 * @typedef divideURL
	 * @type Object
	 * @property {string} type The type of URL
	 * @property {string} domain The domain of URL
	 * @property {string} identity The identity of URL
	 */
	
	/**
	 * Divide an url in type, domain and identity
	 * @param  {URL.URL} url - url address
	 * @return {divideURL} the result of divideURL
	 */
	function divideURL(url) {
	
	  if (!url) throw Error('URL is needed to split');
	
	  function recurse(value) {
	    var regex = /([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
	    var subst = '$1,$3,$4';
	    var parts = value.replace(regex, subst).split(',');
	    return parts;
	  }
	
	  var parts = recurse(url);
	
	  // If the url has no scheme
	  if (parts[0] === url && !parts[0].includes('@')) {
	
	    var _result = {
	      type: "",
	      domain: url,
	      identity: ""
	    };
	
	    console.error('[DivideURL] DivideURL don\'t support url without scheme. Please review your url address', url);
	
	    return _result;
	  }
	
	  // check if the url has the scheme and includes an @
	  if (parts[0] === url && parts[0].includes('@')) {
	    var scheme = parts[0] === url ? 'smtp' : parts[0];
	    parts = recurse(scheme + '://' + parts[0]);
	  }
	
	  // if the domain includes an @, divide it to domain and identity respectively
	  if (parts[1].includes('@')) {
	    parts[2] = parts[0] + '://' + parts[1];
	    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);
	  } /*else if (parts[2].includes('/')) {
	    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);
	    }*/
	
	  var result = {
	    type: parts[0],
	    domain: parts[1],
	    identity: parts[2]
	  };
	
	  return result;
	}
	
	function divideEmail(email) {
	  var indexOfAt = email.indexOf('@');
	
	  var result = {
	    username: email.substring(0, indexOfAt),
	    domain: email.substring(indexOfAt + 1, email.length)
	  };
	
	  return result;
	}
	
	/**
	 * Check if an Object is empty
	 * @param  {Object} object Object to be checked
	 * @return {Boolean}       status of Object, empty or not (true|false);
	 */
	function emptyObject(object) {
	  return (0, _keys2.default)(object).length > 0 ? false : true;
	}
	
	/**
	 * Make a COPY of the original data
	 * @param  {Object}  obj - object to be cloned
	 * @return {Object}
	 */
	function deepClone(obj) {
	  //TODO: simple but inefficient JSON deep clone...
	  if (obj) return JSON.parse((0, _stringify2.default)(obj));
	}
	
	/**
	 * Obtains the user URL that corresponds to a given email
	 * @param  {string} userEmail The user email
	 * @return {URL.URL} userURL The user URL
	 */
	function getUserURLFromEmail(userEmail) {
	  var indexOfAt = userEmail.indexOf('@');
	  return 'user://' + userEmail.substring(indexOfAt + 1, userEmail.length) + '/' + userEmail.substring(0, indexOfAt);
	}
	
	/**
	 * Obtains the user email that corresponds to a given URL
	 * @param  {URL.URL} userURL The user URL
	 * @return {string} userEmail The user email
	 */
	function getUserEmailFromURL(userURL) {
	  var url = divideURL(userURL);
	  return url.identity.replace('/', '') + '@' + url.domain; // identity field has '/exampleID' instead of 'exampleID'
	}
	
	/**
	 * Check if the user identifier is already in the URL format, if not, convert to URL format
	 * @param  {string}   identifier  user identifier
	 * @return {string}   userURL    the user URL
	 */
	function convertToUserURL(identifier) {
	
	  // check if the identifier is already in the url format
	  if (identifier.substring(0, 7) === 'user://') {
	    var dividedURL = divideURL(identifier);
	
	    //check if the url is well formated
	    if (dividedURL.domain && dividedURL.identity) {
	      return identifier;
	    } else {
	      throw 'userURL with wrong format';
	    }
	
	    //if not, convert the user email to URL format
	  } else {
	    return getUserURLFromEmail(identifier);
	  }
	}
	
	/***/ }),
	/* 110 */,
	/* 111 */,
	/* 112 */,
	/* 113 */,
	/* 114 */,
	/* 115 */,
	/* 116 */,
	/* 117 */,
	/* 118 */,
	/* 119 */,
	/* 120 */,
	/* 121 */,
	/* 122 */,
	/* 123 */,
	/* 124 */,
	/* 125 */,
	/* 126 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _promise = __webpack_require__(71);
	
	var _promise2 = _interopRequireDefault(_promise);
	
	var _classCallCheck2 = __webpack_require__(9);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(10);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _utils = __webpack_require__(109);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	* Core Discovery interface
	* Class to allow applications to search for hyperties and DataObjects using the message bus
	*/
	var Discovery = function () {
	
	  /**
	  * To initialise the HypertyDiscover, which will provide the support for hyperties to
	  * query users registered in outside the internal core.
	  * @param  {MessageBus}          msgbus                msgbus
	  * @param  {RuntimeURL}          runtimeURL            runtimeURL
	  */
	  function Discovery(hypertyURL, msgBus) {
	    (0, _classCallCheck3.default)(this, Discovery);
	
	    var _this = this;
	    _this.messageBus = msgBus;
	
	    _this.domain = (0, _utils.divideURL)(hypertyURL).domain;
	    _this.discoveryURL = hypertyURL;
	  }
	
	  /**
	  * function to request about an dataObject registered in domain registry with a given name, and
	  * return the dataObject information, if found.
	  * @param  {String}              name  dataObject URL
	  * @param  {String}            domain (Optional)
	  * @return {Promise}          Promise
	  */
	
	
	  (0, _createClass3.default)(Discovery, [{
	    key: 'discoverDataObjectPerName',
	    value: function discoverDataObjectPerName(name, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	
	      activeDomain = !domain ? _this.domain : domain;
	
	      var msg = {
	        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: name }
	      };
	
	      return new _promise2.default(function (resolve, reject) {
	
	        _this.messageBus.postMessage(msg, function (reply) {
	
	          var dataObject = reply.body.value;
	
	          if (dataObject) {
	            resolve(dataObject);
	          } else {
	            reject('DataObject not found');
	          }
	        });
	      });
	    }
	
	    /**
	    * function to request about dataObject registered in domain registry, and
	    * return the dataObject information, if found.
	    * @param  {String}              url  dataObject URL
	    * @param  {String}            domain (Optional)
	    * @return {Promise}          Promise
	    */
	
	  }, {
	    key: 'discoverDataObjectPerURL',
	    value: function discoverDataObjectPerURL(url, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	
	      if (!domain) {
	        activeDomain = _this.domain;
	      } else {
	        activeDomain = domain;
	      }
	
	      var msg = {
	        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: url }
	      };
	
	      return new _promise2.default(function (resolve, reject) {
	
	        _this.messageBus.postMessage(msg, function (reply) {
	
	          var dataObject = reply.body.value;
	
	          if (dataObject) {
	            resolve(dataObject);
	          } else {
	            reject('DataObject not found');
	          }
	        });
	      });
	    }
	
	    /**
	    *  function to delete an Data Object registered in the Domain Registry
	    *  @param   {String}           url              dataObject url
	    *  @param   {domain}           domain         (Optional)
	    *  @return  {Promise}          Promise          result
	    */
	
	  }, {
	    key: 'deleteDataObject',
	    value: function deleteDataObject(url, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	
	      if (!domain) {
	        activeDomain = _this.domain;
	      } else {
	        activeDomain = domain;
	      }
	
	      var msg = {
	        type: 'delete', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { value: { name: url } } };
	
	      return new _promise2.default(function (resolve, reject) {
	
	        _this.messageBus.postMessage(msg, function (reply) {
	
	          var response = reply.body.code;
	
	          if (response === 200) {
	            resolve(response);
	          } else {
	            reject('Error on deleting dataObject');
	          }
	        });
	      });
	    }
	
	    /**
	    * function to request about specific reporter dataObject registered in domain registry, and
	    * return the dataObjects from that reporter.
	    * @param  {String}           reporter     dataObject reporter
	    * @param  {String}           domain       (Optional)
	    * @return {Array}           Promise       DataObjects
	    */
	
	  }, {
	    key: 'discoverDataObjectPerReporter',
	    value: function discoverDataObjectPerReporter(reporter, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	
	      if (!domain) {
	        activeDomain = _this.domain;
	      } else {
	        activeDomain = domain;
	      }
	
	      var msg = {
	        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: reporter }
	      };
	
	      return new _promise2.default(function (resolve, reject) {
	
	        _this.messageBus.postMessage(msg, function (reply) {
	
	          var dataObjects = reply.body.value;
	
	          if (dataObjects) {
	            resolve(dataObjects);
	          } else {
	            reject('No dataObject was found');
	          }
	        });
	      });
	    }
	
	    /** Advanced Search for dataObjects registered in domain registry
	    * @param  {String}           user                  user identifier, either in url or email format
	    * @param  {Array<string>}    schema (Optional)     types of dataObject schemas
	    * @param  {Array<string>}    resources (Optional)  types of dataObject resources
	    * @param  {String}           domain (Optional)     domain of the registry to search
	    */
	
	  }, {
	    key: 'discoverDataObject',
	    value: function discoverDataObject(name, schema, resources, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	      //let userIdentifier = convertToUserURL(user);
	
	      activeDomain = !domain ? _this.domain : domain;
	
	      var msg = {
	        type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: name,
	          criteria: { resources: resources, dataSchemes: schema }
	        }
	      };
	
	      return new _promise2.default(function (resolve, reject) {
	
	        _this.messageBus.postMessage(msg, function (reply) {
	
	          var hyperties = reply.body.value;
	
	          if (hyperties) {
	            resolve(hyperties);
	          } else {
	            reject('No DataObject was found');
	          }
	        });
	      });
	    }
	
	    /** Advanced Search for Hyperties registered in domain registry
	    * @param  {String}           user                  user identifier, either in url or email format
	    * @param  {Array<string>}    schema (Optional)     types of hyperties schemas
	    * @param  {Array<string>}    resources (Optional)  types of hyperties resources
	    * @param  {String}           domain (Optional)     domain of the registry to search
	    */
	
	  }, {
	    key: 'discoverHyperty',
	    value: function discoverHyperty(user, schema, resources, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	      var userIdentifier = (0, _utils.convertToUserURL)(user);
	
	      if (!domain) {
	        activeDomain = _this.domain;
	      } else {
	        activeDomain = domain;
	      }
	
	      return new _promise2.default(function (resolve, reject) {
	
	        console.log('[Discovery.discoverHyperty] ACTIVE DOMAIN -> ', activeDomain, 'user->', user, 'schema->', schema, 'resources->', resources, 'domain->', domain);
	        if (user.includes(':') && !user.includes('user://')) {
	          console.log('[Discovery.discoverHyperty] ' + user + ' is legacy domain');
	          var legacyUser = { userID: user, hypertyID: user, schema: schema, resources: resources };
	          return resolve(legacyUser);
	        }
	        var msg = {
	          type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: userIdentifier,
	            criteria: { resources: resources, dataSchemes: schema }
	          }
	        };
	
	        console.info('[Discovery] msg to send->', msg);
	
	        _this.messageBus.postMessage(msg, function (reply) {
	
	          console.info('[Discovery] ON discoverHyperty->', reply);
	          var hyperties = reply.body.value;
	
	          if (hyperties) {
	            resolve(hyperties);
	          } else {
	            reject('No Hyperty was found');
	          }
	        });
	      });
	    }
	
	    /**
	    * function to request about users registered in domain registry, and
	    * return the last hyperty instance registered by the user.
	    * @param  {email}              email
	    * @param  {domain}            domain (Optional)
	    * @return {Promise}          Promise
	    */
	
	  }, {
	    key: 'discoverHypertyPerUser',
	    value: function discoverHypertyPerUser(email, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	
	      return new _promise2.default(function (resolve, reject) {
	
	        // Hack for legacy users
	        if (email.includes(':') && !email.includes('user://')) {
	          console.log('[Discovery.discoverHyperty] ' + email + 'is legacy domain');
	          var legacyUser = { id: email, hypertyURL: email, descriptor: 'unknown' };
	          return resolve(legacyUser);
	        }
	
	        if (!domain) {
	          activeDomain = _this.domain;
	        } else {
	          activeDomain = domain;
	        }
	
	        var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));
	
	        // message to query domain registry, asking for a user hyperty.
	        var message = {
	          type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
	        };
	
	        console.info('[Discovery] Message: ', message, activeDomain, identityURL);
	
	        //console.info('[Discovery] message READ', message);
	
	        _this.messageBus.postMessage(message, function (reply) {
	          console.info('[Discovery] message reply', reply);
	
	          var hyperty = void 0;
	          var mostRecent = void 0;
	          var lastHyperty = void 0;
	          var value = reply.body.value;
	
	          for (hyperty in value) {
	            if (value[hyperty].lastModified !== undefined) {
	              if (mostRecent === undefined) {
	                mostRecent = new Date(value[hyperty].lastModified);
	                lastHyperty = hyperty;
	              } else {
	                var hypertyDate = new Date(value[hyperty].lastModified);
	                if (mostRecent.getTime() < hypertyDate.getTime()) {
	                  mostRecent = hypertyDate;
	                  lastHyperty = hyperty;
	                }
	              }
	            }
	          }
	
	          console.info('[Discovery] Last Hyperty: ', lastHyperty, mostRecent);
	
	          var hypertyURL = lastHyperty;
	
	          if (hypertyURL === undefined) {
	            return reject('User Hyperty not found');
	          }
	
	          var idPackage = {
	            id: email,
	            descriptor: value[hypertyURL].descriptor,
	            hypertyURL: hypertyURL
	          };
	
	          console.info('[Discovery] ===> hypertyDiscovery messageBundle: ', idPackage);
	          resolve(idPackage);
	        });
	      });
	    }
	
	    /**
	    * function to request about users registered in domain registry, and
	    * return the all the hyperties registered by the user
	    * @param  {email}              email
	    * @param  {domain}            domain (Optional)
	    * @return {Promise}          Promise
	    */
	
	  }, {
	    key: 'discoverHypertiesPerUser',
	    value: function discoverHypertiesPerUser(email, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	
	      return new _promise2.default(function (resolve, reject) {
	
	        if (email.includes(':') && !email.includes('user://')) {
	          console.log('[Discovery.discoverHyperty] is legacy domain');
	          var legacyUser = { userID: email, hypertyID: email, schema: schema, resources: resources };
	          return resolve(legacyUser);
	        }
	
	        if (!domain) {
	          activeDomain = _this.domain;
	        } else {
	          activeDomain = domain;
	        }
	
	        var identityURL = 'user://' + email.substring(email.indexOf('@') + 1, email.length) + '/' + email.substring(0, email.indexOf('@'));
	
	        // message to query domain registry, asking for a user hyperty.
	        var message = {
	          type: 'read', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { resource: identityURL }
	        };
	
	        console.info('[Discovery] Message discoverHypertiesPerUser: ', message, activeDomain, identityURL);
	
	        //console.info('[Discovery] message READ', message);
	
	        _this.messageBus.postMessage(message, function (reply) {
	          console.info('[Discovery] discoverHypertiesPerUser reply', reply);
	
	          var value = reply.body.value;
	
	          if (!value) {
	            return reject('User Hyperty not found');
	          }
	
	          resolve(value);
	        });
	      });
	    }
	
	    /**
	    *  function to delete an hypertyInstance in the Domain Registry
	    *  @param   {String}           user              user url
	    *  @param   {String}           hypertyInstance   HypertyInsntance url
	    *  @param   {domain}           domain (Optional)
	    *  @return  {Promise}          Promise          result
	    */
	
	  }, {
	    key: 'deleteHyperty',
	    value: function deleteHyperty(user, hypertyInstance, domain) {
	      var _this = this;
	      var activeDomain = void 0;
	
	      if (!domain) {
	        activeDomain = _this.domain;
	      } else {
	        activeDomain = domain;
	      }
	
	      var msg = {
	        type: 'delete', from: _this.discoveryURL, to: 'domain://registry.' + activeDomain + '/', body: { value: { user: user, url: hypertyInstance } } };
	
	      return new _promise2.default(function (resolve, reject) {
	
	        _this.messageBus.postMessage(msg, function (reply) {
	
	          var response = reply.body.code;
	
	          if (response) {
	            resolve('Hyperty successfully deleted');
	          } else {
	            reject('Error on deleting hyperty');
	          }
	        });
	      });
	    }
	  }]);
	  return Discovery;
	}(); /**
	     * Copyright 2016 PT Inovação e Sistemas SA
	     * Copyright 2016 INESC-ID
	     * Copyright 2016 QUOBIS NETWORKS SL
	     * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	     * Copyright 2016 ORANGE SA
	     * Copyright 2016 Deutsche Telekom AG
	     * Copyright 2016 Apizee
	     * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	     *
	     * Licensed under the Apache License, Version 2.0 (the "License");
	     * you may not use this file except in compliance with the License.
	     * You may obtain a copy of the License at
	     *
	     *   http://www.apache.org/licenses/LICENSE-2.0
	     *
	     * Unless required by applicable law or agreed to in writing, software
	     * distributed under the License is distributed on an "AS IS" BASIS,
	     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	     * See the License for the specific language governing permissions and
	     * limitations under the License.
	     **/
	
	exports.default = Discovery;
	module.exports = exports['default'];
	
	/***/ }),
	/* 127 */,
	/* 128 */,
	/* 129 */,
	/* 130 */,
	/* 131 */,
	/* 132 */,
	/* 133 */,
	/* 134 */,
	/* 135 */,
	/* 136 */,
	/* 137 */,
	/* 138 */,
	/* 139 */,
	/* 140 */,
	/* 141 */,
	/* 142 */,
	/* 143 */,
	/* 144 */,
	/* 145 */,
	/* 146 */,
	/* 147 */,
	/* 148 */,
	/* 149 */,
	/* 150 */,
	/* 151 */,
	/* 152 */,
	/* 153 */,
	/* 154 */,
	/* 155 */,
	/* 156 */,
	/* 157 */,
	/* 158 */
	/***/ (function(module, exports, __webpack_require__) {
	
	"use strict";
	
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _Discovery = __webpack_require__(126);
	
	var _Discovery2 = _interopRequireDefault(_Discovery);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _Discovery2.default;
	module.exports = exports['default'];
	
	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.divideURL = divideURL;
	exports.deepClone = deepClone;
	exports.getUserMedia = getUserMedia;
	/**
	 * Copyright 2016 PT Inovação e Sistemas SA
	 * Copyright 2016 INESC-ID
	 * Copyright 2016 QUOBIS NETWORKS SL
	 * Copyright 2016 FRAUNHOFER-GESELLSCHAFT ZUR FOERDERUNG DER ANGEWANDTEN FORSCHUNG E.V
	 * Copyright 2016 ORANGE SA
	 * Copyright 2016 Deutsche Telekom AG
	 * Copyright 2016 Apizee
	 * Copyright 2016 TECHNISCHE UNIVERSITAT BERLIN
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 **/
	
	// jshint browser:true, jquery: true
	// jshint varstmt: true
	/* global Handlebars */
	
	/**
	 * Support module with some functions will be useful
	 * @module utils
	 */
	
	/**
	 * @typedef divideURL
	 * @type Object
	 * @property {string} type The type of URL
	 * @property {string} domain The domain of URL
	 * @property {string} identity The identity of URL
	 */
	
	/**
	 * Divide an url in type, domain and identity
	 * @param  {URL.URL} url - url address
	 * @return {divideURL} the result of divideURL
	 */
	function divideURL(url) {
	
	  if (!url) throw Error('URL is needed to split');
	
	  function recurse(value) {
	    var regex = /([a-zA-Z-]*)(:\/\/(?:\.)?|:)([-a-zA-Z0-9@:%._\+~#=]{2,256})([-a-zA-Z0-9@:%._\+~#=\/]*)/gi;
	    var subst = '$1,$3,$4';
	    var parts = value.replace(regex, subst).split(',');
	    return parts;
	  }
	
	  var parts = recurse(url);
	
	  // If the url has no scheme
	  if (parts[0] === url && !parts[0].includes('@')) {
	
	    var _result = {
	      type: "",
	      domain: url,
	      identity: ""
	    };
	
	    console.error('[DivideURL] DivideURL don\'t support url without scheme. Please review your url address', url);
	
	    return _result;
	  }
	
	  // check if the url has the scheme and includes an @
	  if (parts[0] === url && parts[0].includes('@')) {
	    var scheme = parts[0] === url ? 'smtp' : parts[0];
	    parts = recurse(scheme + '://' + parts[0]);
	  }
	
	  // if the domain includes an @, divide it to domain and identity respectively
	  if (parts[1].includes('@')) {
	    parts[2] = parts[0] + '://' + parts[1];
	    parts[1] = parts[1].substr(parts[1].indexOf('@') + 1);
	  } /*else if (parts[2].includes('/')) {
	    parts[2] = parts[2].substr(parts[2].lastIndexOf('/')+1);
	    }*/
	
	  var result = {
	    type: parts[0],
	    domain: parts[1],
	    identity: parts[2]
	  };
	
	  return result;
	}
	
	/**
	 * Make a COPY of the original data
	 * @param  {Object}  obj - object to be cloned
	 * @return {Object}
	 */
	function deepClone(obj) {
	  //TODO: simple but inefficient JSON deep clone...
	  if (obj) return JSON.parse(JSON.stringify(obj));
	}
	
	/**
	 * Get WebRTC API resources
	 * @param  {object}     options Object containing the information that resources will be used (camera, mic, resolution, etc);
	 * @return {Promise}
	 */
	function getUserMedia(constraints) {
	
	  return new Promise(function (resolve, reject) {
	
	    navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {
	      resolve(mediaStream);
	    }).catch(function (reason) {
	      reject(reason);
	    });
	  });
	}

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Search = function () {
	  function Search(discovery, identityManager) {
	    _classCallCheck(this, Search);
	
	    if (!discovery) throw new Error('The discovery component is a needed parameter');
	    if (!identityManager) throw new Error('The identityManager component is a needed parameter');
	
	    var _this = this;
	
	    _this.discovery = discovery;
	    _this.identityManager = identityManager;
	  }
	
	  _createClass(Search, [{
	    key: 'myIdentity',
	    value: function myIdentity() {
	      var _this = this;
	
	      return new Promise(function (resolve, reject) {
	
	        _this.identityManager.discoverUserRegistered().then(function (result) {
	          resolve(result);
	        }).catch(function (reason) {
	          reject(reason);
	        });
	      });
	    }
	
	    /**
	     * List of usersURL to search
	     * @param  {array<URL.userURL>}  users List of UserUR, like this format user://<ipddomain>/<user-identifier>
	     * @return {Promise}
	     */
	
	  }, {
	    key: 'users',
	    value: function users(usersURLs, providedDomains, schemes, resources) {
	
	      if (!usersURLs) throw new Error('You need to provide a list of users');
	      if (!providedDomains) throw new Error('You need to provide a list of domains');
	      if (!resources) throw new Error('You need to provide a list of resources');
	      if (!schemes) throw new Error('You need to provide a list of schemes');
	
	      var _this = this;
	
	      return new Promise(function (resolve, reject) {
	
	        console.info('[Search] Users: ', usersURLs, usersURLs.length);
	        console.info('[Search] Domains: ', providedDomains, providedDomains.length);
	
	        if (usersURLs.length === 0) {
	          console.info('Don\'t have users to discovery');
	
	          resolve(usersURLs);
	        } else {
	          var getUsers = [];
	
	          usersURLs.forEach(function (userURL, index) {
	            var currentDomain = providedDomains[index];
	            console.info('[Search] Search user ' + userURL + ' for provided domain:', currentDomain);
	            getUsers.push(_this.discovery.discoverHyperty(userURL, schemes, resources, currentDomain));
	          });
	
	          console.info('Requests promises: ', getUsers);
	
	          Promise.all(getUsers.map(function (promise) {
	            return promise.then(function (hyperty) {
	              return hyperty;
	            }, function (error) {
	              return error;
	            });
	          })).then(function (hyperties) {
	
	            console.info('[Search] Hyperties', hyperties);
	
	            var result = hyperties.map(function (hyperty) {
	
	              var recent = Object.keys(hyperty).reduceRight(function (a, b) {
	                var hypertyDate = new Date(hyperty[b].lastModified);
	                var hypertyDateP = new Date(hyperty[a].lastModified);
	                if (hypertyDateP.getTime() < hypertyDate.getTime()) {
	                  return b;
	                }
	                return a;
	              });
	              return hyperty[recent];
	            });
	
	            var clean = result.filter(function (hyperty) {
	              return hyperty.hasOwnProperty('hypertyID');
	            });
	
	            console.log('Requests result: ', clean);
	            if (hyperties[0] === 'No Hyperty was found') {
	              console.log('[Search - Users] ON reject');
	              reject('No Hyperty was found');
	            } else if (Object.keys(clean).length === 0) {
	              resolve(hyperties);
	            } else {
	              resolve(clean);
	            }
	          }).catch(function (reason) {
	            console.error(reason);
	            resolve(usersURLs);
	          });
	        }
	      });
	    }
	  }]);
	
	  return Search;
	}();
	
	exports.default = Search;
	module.exports = exports['default'];

/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,