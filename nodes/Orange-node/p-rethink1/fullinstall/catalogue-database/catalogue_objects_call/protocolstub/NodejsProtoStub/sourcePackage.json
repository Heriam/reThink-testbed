{
  "encoding": "base64",
  "sourceCodeClassname": "NodejsProtoStub",
  "sourceCode":"KGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09Im9iamVjdCImJnR5cGVvZiBtb2R1bGUhPT0idW5kZWZpbmVkIil7bW9kdWxlLmV4cG9ydHM9ZigpfWVsc2UgaWYodHlwZW9mIGRlZmluZT09PSJmdW5jdGlvbiImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT0idW5kZWZpbmVkIil7Zz13aW5kb3d9ZWxzZSBpZih0eXBlb2YgZ2xvYmFsIT09InVuZGVmaW5lZCIpe2c9Z2xvYmFsfWVsc2UgaWYodHlwZW9mIHNlbGYhPT0idW5kZWZpbmVkIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuYWN0aXZhdGUgPSBmKCl9fSkoZnVuY3Rpb24oKXt2YXIgZGVmaW5lLG1vZHVsZSxleHBvcnRzO3JldHVybiAoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoIkNhbm5vdCBmaW5kIG1vZHVsZSAnIitvKyInIik7dGhyb3cgZi5jb2RlPSJNT0RVTEVfTk9UX0ZPVU5EIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PSJmdW5jdGlvbiImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCm1vZHVsZS5leHBvcnRzID0gYWZ0ZXINCg0KZnVuY3Rpb24gYWZ0ZXIoY291bnQsIGNhbGxiYWNrLCBlcnJfY2IpIHsNCiAgICB2YXIgYmFpbCA9IGZhbHNlDQogICAgZXJyX2NiID0gZXJyX2NiIHx8IG5vb3ANCiAgICBwcm94eS5jb3VudCA9IGNvdW50DQoNCiAgICByZXR1cm4gKGNvdW50ID09PSAwKSA/IGNhbGxiYWNrKCkgOiBwcm94eQ0KDQogICAgZnVuY3Rpb24gcHJveHkoZXJyLCByZXN1bHQpIHsNCiAgICAgICAgaWYgKHByb3h5LmNvdW50IDw9IDApIHsNCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWZ0ZXIgY2FsbGVkIHRvbyBtYW55IHRpbWVzJykNCiAgICAgICAgfQ0KICAgICAgICAtLXByb3h5LmNvdW50DQoNCiAgICAgICAgLy8gYWZ0ZXIgZmlyc3QgZXJyb3IsIHJlc3QgYXJlIHBhc3NlZCB0byBlcnJfY2INCiAgICAgICAgaWYgKGVycikgew0KICAgICAgICAgICAgYmFpbCA9IHRydWUNCiAgICAgICAgICAgIGNhbGxiYWNrKGVycikNCiAgICAgICAgICAgIC8vIGZ1dHVyZSBlcnJvciBjYWxsYmFja3Mgd2lsbCBnbyB0byBlcnJvciBoYW5kbGVyDQogICAgICAgICAgICBjYWxsYmFjayA9IGVycl9jYg0KICAgICAgICB9IGVsc2UgaWYgKHByb3h5LmNvdW50ID09PSAwICYmICFiYWlsKSB7DQogICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpDQogICAgICAgIH0NCiAgICB9DQp9DQoNCmZ1bmN0aW9uIG5vb3AoKSB7fQ0KDQp9LHt9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCi8qKg0KICogQW4gYWJzdHJhY3Rpb24gZm9yIHNsaWNpbmcgYW4gYXJyYXlidWZmZXIgZXZlbiB3aGVuDQogKiBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgaXMgbm90IHN1cHBvcnRlZA0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcnJheWJ1ZmZlciwgc3RhcnQsIGVuZCkgew0KICB2YXIgYnl0ZXMgPSBhcnJheWJ1ZmZlci5ieXRlTGVuZ3RoOw0KICBzdGFydCA9IHN0YXJ0IHx8IDA7DQogIGVuZCA9IGVuZCB8fCBieXRlczsNCg0KICBpZiAoYXJyYXlidWZmZXIuc2xpY2UpIHsgcmV0dXJuIGFycmF5YnVmZmVyLnNsaWNlKHN0YXJ0LCBlbmQpOyB9DQoNCiAgaWYgKHN0YXJ0IDwgMCkgeyBzdGFydCArPSBieXRlczsgfQ0KICBpZiAoZW5kIDwgMCkgeyBlbmQgKz0gYnl0ZXM7IH0NCiAgaWYgKGVuZCA+IGJ5dGVzKSB7IGVuZCA9IGJ5dGVzOyB9DQoNCiAgaWYgKHN0YXJ0ID49IGJ5dGVzIHx8IHN0YXJ0ID49IGVuZCB8fCBieXRlcyA9PT0gMCkgew0KICAgIHJldHVybiBuZXcgQXJyYXlCdWZmZXIoMCk7DQogIH0NCg0KICB2YXIgYWJ2ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpOw0KICB2YXIgcmVzdWx0ID0gbmV3IFVpbnQ4QXJyYXkoZW5kIC0gc3RhcnQpOw0KICBmb3IgKHZhciBpID0gc3RhcnQsIGlpID0gMDsgaSA8IGVuZDsgaSsrLCBpaSsrKSB7DQogICAgcmVzdWx0W2lpXSA9IGFidltpXTsNCiAgfQ0KICByZXR1cm4gcmVzdWx0LmJ1ZmZlcjsNCn07DQoNCn0se31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KDQovKioNCiAqIEV4cG9zZSBgQmFja29mZmAuDQogKi8NCg0KbW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmOw0KDQovKioNCiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC4NCiAqDQogKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF0NCiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXQ0KICogLSBgaml0dGVyYCBbMF0NCiAqIC0gYGZhY3RvcmAgWzJdDQogKg0KICogQHBhcmFtIHtPYmplY3R9IG9wdHMNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZnVuY3Rpb24gQmFja29mZihvcHRzKSB7DQogIG9wdHMgPSBvcHRzIHx8IHt9Ow0KICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwOw0KICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwOw0KICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7DQogIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7DQogIHRoaXMuYXR0ZW1wdHMgPSAwOw0KfQ0KDQovKioNCiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi4NCiAqDQogKiBAcmV0dXJuIHtOdW1iZXJ9DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXsNCiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspOw0KICBpZiAodGhpcy5qaXR0ZXIpIHsNCiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpOw0KICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTsNCiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247DQogIH0NCiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwOw0KfTsNCg0KLyoqDQogKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLg0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpew0KICB0aGlzLmF0dGVtcHRzID0gMDsNCn07DQoNCi8qKg0KICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpCYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pew0KICB0aGlzLm1zID0gbWluOw0KfTsNCg0KLyoqDQogKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb24NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7DQogIHRoaXMubWF4ID0gbWF4Ow0KfTsNCg0KLyoqDQogKiBTZXQgdGhlIGppdHRlcg0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXsNCiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7DQp9Ow0KDQoNCn0se31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KLyoNCiAqIGJhc2U2NC1hcnJheWJ1ZmZlcg0KICogaHR0cHM6Ly9naXRodWIuY29tL25pa2xhc3ZoL2Jhc2U2NC1hcnJheWJ1ZmZlcg0KICoNCiAqIENvcHlyaWdodCAoYykgMjAxMiBOaWtsYXMgdm9uIEhlcnR6ZW4NCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4NCiAqLw0KKGZ1bmN0aW9uKCl7DQogICJ1c2Ugc3RyaWN0IjsNCg0KICB2YXIgY2hhcnMgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLyI7DQoNCiAgLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4Lg0KICB2YXIgbG9va3VwID0gbmV3IFVpbnQ4QXJyYXkoMjU2KTsNCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFycy5sZW5ndGg7IGkrKykgew0KICAgIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7DQogIH0NCg0KICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7DQogICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLA0KICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gIiI7DQoNCiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz0zKSB7DQogICAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07DQogICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpXSAmIDMpIDw8IDQpIHwgKGJ5dGVzW2kgKyAxXSA+PiA0KV07DQogICAgICBiYXNlNjQgKz0gY2hhcnNbKChieXRlc1tpICsgMV0gJiAxNSkgPDwgMikgfCAoYnl0ZXNbaSArIDJdID4+IDYpXTsNCiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107DQogICAgfQ0KDQogICAgaWYgKChsZW4gJSAzKSA9PT0gMikgew0KICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMSkgKyAiPSI7DQogICAgfSBlbHNlIGlmIChsZW4gJSAzID09PSAxKSB7DQogICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKSArICI9PSI7DQogICAgfQ0KDQogICAgcmV0dXJuIGJhc2U2NDsNCiAgfTsNCg0KICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHsNCiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsDQogICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsDQogICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7DQoNCiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gIj0iKSB7DQogICAgICBidWZmZXJMZW5ndGgtLTsNCiAgICAgIGlmIChiYXNlNjRbYmFzZTY0Lmxlbmd0aCAtIDJdID09PSAiPSIpIHsNCiAgICAgICAgYnVmZmVyTGVuZ3RoLS07DQogICAgICB9DQogICAgfQ0KDQogICAgdmFyIGFycmF5YnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKGJ1ZmZlckxlbmd0aCksDQogICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhcnJheWJ1ZmZlcik7DQoNCiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKz00KSB7DQogICAgICBlbmNvZGVkMSA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKV07DQogICAgICBlbmNvZGVkMiA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKzEpXTsNCiAgICAgIGVuY29kZWQzID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkrMildOw0KICAgICAgZW5jb2RlZDQgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSszKV07DQoNCiAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7DQogICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTsNCiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7DQogICAgfQ0KDQogICAgcmV0dXJuIGFycmF5YnVmZmVyOw0KICB9Ow0KfSkoKTsNCg0KfSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQooZnVuY3Rpb24gKGdsb2JhbCl7DQovKioNCiAqIENyZWF0ZSBhIGJsb2IgYnVpbGRlciBldmVuIHdoZW4gdmVuZG9yIHByZWZpeGVzIGV4aXN0DQogKi8NCg0KdmFyIEJsb2JCdWlsZGVyID0gZ2xvYmFsLkJsb2JCdWlsZGVyDQogIHx8IGdsb2JhbC5XZWJLaXRCbG9iQnVpbGRlcg0KICB8fCBnbG9iYWwuTVNCbG9iQnVpbGRlcg0KICB8fCBnbG9iYWwuTW96QmxvYkJ1aWxkZXI7DQoNCi8qKg0KICogQ2hlY2sgaWYgQmxvYiBjb25zdHJ1Y3RvciBpcyBzdXBwb3J0ZWQNCiAqLw0KDQp2YXIgYmxvYlN1cHBvcnRlZCA9IChmdW5jdGlvbigpIHsNCiAgdHJ5IHsNCiAgICB2YXIgYSA9IG5ldyBCbG9iKFsnaGknXSk7DQogICAgcmV0dXJuIGEuc2l6ZSA9PT0gMjsNCiAgfSBjYXRjaChlKSB7DQogICAgcmV0dXJuIGZhbHNlOw0KICB9DQp9KSgpOw0KDQovKioNCiAqIENoZWNrIGlmIEJsb2IgY29uc3RydWN0b3Igc3VwcG9ydHMgQXJyYXlCdWZmZXJWaWV3cw0KICogRmFpbHMgaW4gU2FmYXJpIDYsIHNvIHdlIG5lZWQgdG8gbWFwIHRvIEFycmF5QnVmZmVycyB0aGVyZS4NCiAqLw0KDQp2YXIgYmxvYlN1cHBvcnRzQXJyYXlCdWZmZXJWaWV3ID0gYmxvYlN1cHBvcnRlZCAmJiAoZnVuY3Rpb24oKSB7DQogIHRyeSB7DQogICAgdmFyIGIgPSBuZXcgQmxvYihbbmV3IFVpbnQ4QXJyYXkoWzEsMl0pXSk7DQogICAgcmV0dXJuIGIuc2l6ZSA9PT0gMjsNCiAgfSBjYXRjaChlKSB7DQogICAgcmV0dXJuIGZhbHNlOw0KICB9DQp9KSgpOw0KDQovKioNCiAqIENoZWNrIGlmIEJsb2JCdWlsZGVyIGlzIHN1cHBvcnRlZA0KICovDQoNCnZhciBibG9iQnVpbGRlclN1cHBvcnRlZCA9IEJsb2JCdWlsZGVyDQogICYmIEJsb2JCdWlsZGVyLnByb3RvdHlwZS5hcHBlbmQNCiAgJiYgQmxvYkJ1aWxkZXIucHJvdG90eXBlLmdldEJsb2I7DQoNCi8qKg0KICogSGVscGVyIGZ1bmN0aW9uIHRoYXQgbWFwcyBBcnJheUJ1ZmZlclZpZXdzIHRvIEFycmF5QnVmZmVycw0KICogVXNlZCBieSBCbG9iQnVpbGRlciBjb25zdHJ1Y3RvciBhbmQgb2xkIGJyb3dzZXJzIHRoYXQgZGlkbid0DQogKiBzdXBwb3J0IGl0IGluIHRoZSBCbG9iIGNvbnN0cnVjdG9yLg0KICovDQoNCmZ1bmN0aW9uIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KSB7DQogIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7DQogICAgdmFyIGNodW5rID0gYXJ5W2ldOw0KICAgIGlmIChjaHVuay5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgew0KICAgICAgdmFyIGJ1ZiA9IGNodW5rLmJ1ZmZlcjsNCg0KICAgICAgLy8gaWYgdGhpcyBpcyBhIHN1YmFycmF5LCBtYWtlIGEgY29weSBzbyB3ZSBvbmx5DQogICAgICAvLyBpbmNsdWRlIHRoZSBzdWJhcnJheSByZWdpb24gZnJvbSB0aGUgdW5kZXJseWluZyBidWZmZXINCiAgICAgIGlmIChjaHVuay5ieXRlTGVuZ3RoICE9PSBidWYuYnl0ZUxlbmd0aCkgew0KICAgICAgICB2YXIgY29weSA9IG5ldyBVaW50OEFycmF5KGNodW5rLmJ5dGVMZW5ndGgpOw0KICAgICAgICBjb3B5LnNldChuZXcgVWludDhBcnJheShidWYsIGNodW5rLmJ5dGVPZmZzZXQsIGNodW5rLmJ5dGVMZW5ndGgpKTsNCiAgICAgICAgYnVmID0gY29weS5idWZmZXI7DQogICAgICB9DQoNCiAgICAgIGFyeVtpXSA9IGJ1ZjsNCiAgICB9DQogIH0NCn0NCg0KZnVuY3Rpb24gQmxvYkJ1aWxkZXJDb25zdHJ1Y3RvcihhcnksIG9wdGlvbnMpIHsNCiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307DQoNCiAgdmFyIGJiID0gbmV3IEJsb2JCdWlsZGVyKCk7DQogIG1hcEFycmF5QnVmZmVyVmlld3MoYXJ5KTsNCg0KICBmb3IgKHZhciBpID0gMDsgaSA8IGFyeS5sZW5ndGg7IGkrKykgew0KICAgIGJiLmFwcGVuZChhcnlbaV0pOw0KICB9DQoNCiAgcmV0dXJuIChvcHRpb25zLnR5cGUpID8gYmIuZ2V0QmxvYihvcHRpb25zLnR5cGUpIDogYmIuZ2V0QmxvYigpOw0KfTsNCg0KZnVuY3Rpb24gQmxvYkNvbnN0cnVjdG9yKGFyeSwgb3B0aW9ucykgew0KICBtYXBBcnJheUJ1ZmZlclZpZXdzKGFyeSk7DQogIHJldHVybiBuZXcgQmxvYihhcnksIG9wdGlvbnMgfHwge30pOw0KfTsNCg0KbW9kdWxlLmV4cG9ydHMgPSAoZnVuY3Rpb24oKSB7DQogIGlmIChibG9iU3VwcG9ydGVkKSB7DQogICAgcmV0dXJuIGJsb2JTdXBwb3J0c0FycmF5QnVmZmVyVmlldyA/IGdsb2JhbC5CbG9iIDogQmxvYkNvbnN0cnVjdG9yOw0KICB9IGVsc2UgaWYgKGJsb2JCdWlsZGVyU3VwcG9ydGVkKSB7DQogICAgcmV0dXJuIEJsb2JCdWlsZGVyQ29uc3RydWN0b3I7DQogIH0gZWxzZSB7DQogICAgcmV0dXJuIHVuZGVmaW5lZDsNCiAgfQ0KfSkoKTsNCg0KfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pDQoNCn0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KDQp9LHt9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCi8qKg0KICogU2xpY2UgcmVmZXJlbmNlLg0KICovDQoNCnZhciBzbGljZSA9IFtdLnNsaWNlOw0KDQovKioNCiAqIEJpbmQgYG9iamAgdG8gYGZuYC4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gb2JqDQogKiBAcGFyYW0ge0Z1bmN0aW9ufFN0cmluZ30gZm4gb3Igc3RyaW5nDQogKiBAcmV0dXJuIHtGdW5jdGlvbn0NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIGZuKXsNCiAgaWYgKCdzdHJpbmcnID09IHR5cGVvZiBmbikgZm4gPSBvYmpbZm5dOw0KICBpZiAoJ2Z1bmN0aW9uJyAhPSB0eXBlb2YgZm4pIHRocm93IG5ldyBFcnJvcignYmluZCgpIHJlcXVpcmVzIGEgZnVuY3Rpb24nKTsNCiAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7DQogIHJldHVybiBmdW5jdGlvbigpew0KICAgIHJldHVybiBmbi5hcHBseShvYmosIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpOw0KICB9DQp9Ow0KDQp9LHt9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCg0KLyoqDQogKiBFeHBvc2UgYEVtaXR0ZXJgLg0KICovDQoNCm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjsNCg0KLyoqDQogKiBJbml0aWFsaXplIGEgbmV3IGBFbWl0dGVyYC4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7DQogIGlmIChvYmopIHJldHVybiBtaXhpbihvYmopOw0KfTsNCg0KLyoqDQogKiBNaXhpbiB0aGUgZW1pdHRlciBwcm9wZXJ0aWVzLg0KICoNCiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoNCiAqIEByZXR1cm4ge09iamVjdH0NCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmZ1bmN0aW9uIG1peGluKG9iaikgew0KICBmb3IgKHZhciBrZXkgaW4gRW1pdHRlci5wcm90b3R5cGUpIHsNCiAgICBvYmpba2V5XSA9IEVtaXR0ZXIucHJvdG90eXBlW2tleV07DQogIH0NCiAgcmV0dXJuIG9iajsNCn0NCg0KLyoqDQogKiBMaXN0ZW4gb24gdGhlIGdpdmVuIGBldmVudGAgd2l0aCBgZm5gLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudA0KICogQHBhcmFtIHtGdW5jdGlvbn0gZm4NCiAqIEByZXR1cm4ge0VtaXR0ZXJ9DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCkVtaXR0ZXIucHJvdG90eXBlLm9uID0NCkVtaXR0ZXIucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pew0KICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307DQogICh0aGlzLl9jYWxsYmFja3NbZXZlbnRdID0gdGhpcy5fY2FsbGJhY2tzW2V2ZW50XSB8fCBbXSkNCiAgICAucHVzaChmbik7DQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBBZGRzIGFuIGBldmVudGAgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGludm9rZWQgYSBzaW5nbGUNCiAqIHRpbWUgdGhlbiBhdXRvbWF0aWNhbGx5IHJlbW92ZWQuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50DQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbg0KICogQHJldHVybiB7RW1pdHRlcn0NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KRW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7DQogIHZhciBzZWxmID0gdGhpczsNCiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9Ow0KDQogIGZ1bmN0aW9uIG9uKCkgew0KICAgIHNlbGYub2ZmKGV2ZW50LCBvbik7DQogICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTsNCiAgfQ0KDQogIG9uLmZuID0gZm47DQogIHRoaXMub24oZXZlbnQsIG9uKTsNCiAgcmV0dXJuIHRoaXM7DQp9Ow0KDQovKioNCiAqIFJlbW92ZSB0aGUgZ2l2ZW4gY2FsbGJhY2sgZm9yIGBldmVudGAgb3IgYWxsDQogKiByZWdpc3RlcmVkIGNhbGxiYWNrcy4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQNCiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuDQogKiBAcmV0dXJuIHtFbWl0dGVyfQ0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpFbWl0dGVyLnByb3RvdHlwZS5vZmYgPQ0KRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPQ0KRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0NCkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudCwgZm4pew0KICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307DQoNCiAgLy8gYWxsDQogIGlmICgwID09IGFyZ3VtZW50cy5sZW5ndGgpIHsNCiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTsNCiAgICByZXR1cm4gdGhpczsNCiAgfQ0KDQogIC8vIHNwZWNpZmljIGV2ZW50DQogIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbZXZlbnRdOw0KICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7DQoNCiAgLy8gcmVtb3ZlIGFsbCBoYW5kbGVycw0KICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7DQogICAgZGVsZXRlIHRoaXMuX2NhbGxiYWNrc1tldmVudF07DQogICAgcmV0dXJuIHRoaXM7DQogIH0NCg0KICAvLyByZW1vdmUgc3BlY2lmaWMgaGFuZGxlcg0KICB2YXIgY2I7DQogIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7DQogICAgY2IgPSBjYWxsYmFja3NbaV07DQogICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHsNCiAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaSwgMSk7DQogICAgICBicmVhazsNCiAgICB9DQogIH0NCiAgcmV0dXJuIHRoaXM7DQp9Ow0KDQovKioNCiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudA0KICogQHBhcmFtIHtNaXhlZH0gLi4uDQogKiBAcmV0dXJuIHtFbWl0dGVyfQ0KICovDQoNCkVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbihldmVudCl7DQogIHRoaXMuX2NhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrcyB8fCB7fTsNCiAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkNCiAgICAsIGNhbGxiYWNrcyA9IHRoaXMuX2NhbGxiYWNrc1tldmVudF07DQoNCiAgaWYgKGNhbGxiYWNrcykgew0KICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrcy5zbGljZSgwKTsNCiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7DQogICAgICBjYWxsYmFja3NbaV0uYXBwbHkodGhpcywgYXJncyk7DQogICAgfQ0KICB9DQoNCiAgcmV0dXJuIHRoaXM7DQp9Ow0KDQovKioNCiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50DQogKiBAcmV0dXJuIHtBcnJheX0NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KRW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpew0KICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307DQogIHJldHVybiB0aGlzLl9jYWxsYmFja3NbZXZlbnRdIHx8IFtdOw0KfTsNCg0KLyoqDQogKiBDaGVjayBpZiB0aGlzIGVtaXR0ZXIgaGFzIGBldmVudGAgaGFuZGxlcnMuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50DQogKiBAcmV0dXJuIHtCb29sZWFufQ0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpFbWl0dGVyLnByb3RvdHlwZS5oYXNMaXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7DQogIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoOw0KfTsNCg0KfSx7fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYSwgYil7DQogIHZhciBmbiA9IGZ1bmN0aW9uKCl7fTsNCiAgZm4ucHJvdG90eXBlID0gYi5wcm90b3R5cGU7DQogIGEucHJvdG90eXBlID0gbmV3IGZuOw0KICBhLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGE7DQp9Ow0KfSx7fV0sMTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KDQovKioNCiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC4NCiAqDQogKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuDQogKi8NCg0KZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kZWJ1ZycpOw0KZXhwb3J0cy5sb2cgPSBsb2c7DQpleHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzOw0KZXhwb3J0cy5zYXZlID0gc2F2ZTsNCmV4cG9ydHMubG9hZCA9IGxvYWQ7DQpleHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9yczsNCmV4cG9ydHMuc3RvcmFnZSA9ICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUNCiAgICAgICAgICAgICAgICYmICd1bmRlZmluZWQnICE9IHR5cGVvZiBjaHJvbWUuc3RvcmFnZQ0KICAgICAgICAgICAgICAgICAgPyBjaHJvbWUuc3RvcmFnZS5sb2NhbA0KICAgICAgICAgICAgICAgICAgOiBsb2NhbHN0b3JhZ2UoKTsNCg0KLyoqDQogKiBDb2xvcnMuDQogKi8NCg0KZXhwb3J0cy5jb2xvcnMgPSBbDQogICdsaWdodHNlYWdyZWVuJywNCiAgJ2ZvcmVzdGdyZWVuJywNCiAgJ2dvbGRlbnJvZCcsDQogICdkb2RnZXJibHVlJywNCiAgJ2RhcmtvcmNoaWQnLA0KICAnY3JpbXNvbicNCl07DQoNCi8qKg0KICogQ3VycmVudGx5IG9ubHkgV2ViS2l0LWJhc2VkIFdlYiBJbnNwZWN0b3JzLCBGaXJlZm94ID49IHYzMSwNCiAqIGFuZCB0aGUgRmlyZWJ1ZyBleHRlbnNpb24gKGFueSBGaXJlZm94IHZlcnNpb24pIGFyZSBrbm93bg0KICogdG8gc3VwcG9ydCAiJWMiIENTUyBjdXN0b21pemF0aW9ucy4NCiAqDQogKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9ycw0KICovDQoNCmZ1bmN0aW9uIHVzZUNvbG9ycygpIHsNCiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzMNCiAgcmV0dXJuICgnV2Via2l0QXBwZWFyYW5jZScgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlKSB8fA0KICAgIC8vIGlzIGZpcmVidWc/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5ODEyMC8zNzY3NzMNCiAgICAod2luZG93LmNvbnNvbGUgJiYgKGNvbnNvbGUuZmlyZWJ1ZyB8fCAoY29uc29sZS5leGNlcHRpb24gJiYgY29uc29sZS50YWJsZSkpKSB8fA0KICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxPw0KICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlcw0KICAgIChuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcLyhcZCspLykgJiYgcGFyc2VJbnQoUmVnRXhwLiQxLCAxMCkgPj0gMzEpOw0KfQ0KDQovKioNCiAqIE1hcCAlaiB0byBgSlNPTi5zdHJpbmdpZnkoKWAsIHNpbmNlIG5vIFdlYiBJbnNwZWN0b3JzIGRvIHRoYXQgYnkgZGVmYXVsdC4NCiAqLw0KDQpleHBvcnRzLmZvcm1hdHRlcnMuaiA9IGZ1bmN0aW9uKHYpIHsNCiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpOw0KfTsNCg0KDQovKioNCiAqIENvbG9yaXplIGxvZyBhcmd1bWVudHMgaWYgZW5hYmxlZC4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIGZvcm1hdEFyZ3MoKSB7DQogIHZhciBhcmdzID0gYXJndW1lbnRzOw0KICB2YXIgdXNlQ29sb3JzID0gdGhpcy51c2VDb2xvcnM7DQoNCiAgYXJnc1swXSA9ICh1c2VDb2xvcnMgPyAnJWMnIDogJycpDQogICAgKyB0aGlzLm5hbWVzcGFjZQ0KICAgICsgKHVzZUNvbG9ycyA/ICcgJWMnIDogJyAnKQ0KICAgICsgYXJnc1swXQ0KICAgICsgKHVzZUNvbG9ycyA/ICclYyAnIDogJyAnKQ0KICAgICsgJysnICsgZXhwb3J0cy5odW1hbml6ZSh0aGlzLmRpZmYpOw0KDQogIGlmICghdXNlQ29sb3JzKSByZXR1cm4gYXJnczsNCg0KICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7DQogIGFyZ3MgPSBbYXJnc1swXSwgYywgJ2NvbG9yOiBpbmhlcml0J10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDEpKTsNCg0KICAvLyB0aGUgZmluYWwgIiVjIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXINCiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0bw0KICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG8NCiAgdmFyIGluZGV4ID0gMDsNCiAgdmFyIGxhc3RDID0gMDsNCiAgYXJnc1swXS5yZXBsYWNlKC8lW2EteiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7DQogICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47DQogICAgaW5kZXgrKzsNCiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHsNCiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlYw0KICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bikNCiAgICAgIGxhc3RDID0gaW5kZXg7DQogICAgfQ0KICB9KTsNCg0KICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7DQogIHJldHVybiBhcmdzOw0KfQ0KDQovKioNCiAqIEludm9rZXMgYGNvbnNvbGUubG9nKClgIHdoZW4gYXZhaWxhYmxlLg0KICogTm8tb3Agd2hlbiBgY29uc29sZS5sb2dgIGlzIG5vdCBhICJmdW5jdGlvbiIuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpmdW5jdGlvbiBsb2coKSB7DQogIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlDQogIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknDQogIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGUNCiAgICAmJiBjb25zb2xlLmxvZw0KICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpOw0KfQ0KDQovKioNCiAqIFNhdmUgYG5hbWVzcGFjZXNgLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHsNCiAgdHJ5IHsNCiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7DQogICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTsNCiAgICB9IGVsc2Ugew0KICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlczsNCiAgICB9DQogIH0gY2F0Y2goZSkge30NCn0NCg0KLyoqDQogKiBMb2FkIGBuYW1lc3BhY2VzYC4NCiAqDQogKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBsb2FkKCkgew0KICB2YXIgcjsNCiAgdHJ5IHsNCiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnOw0KICB9IGNhdGNoKGUpIHt9DQogIHJldHVybiByOw0KfQ0KDQovKioNCiAqIEVuYWJsZSBuYW1lc3BhY2VzIGxpc3RlZCBpbiBgbG9jYWxTdG9yYWdlLmRlYnVnYCBpbml0aWFsbHkuDQogKi8NCg0KZXhwb3J0cy5lbmFibGUobG9hZCgpKTsNCg0KLyoqDQogKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuDQogKg0KICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzDQogKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZQ0KICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC4NCiAqDQogKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9DQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKXsNCiAgdHJ5IHsNCiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTsNCiAgfSBjYXRjaCAoZSkge30NCn0NCg0KfSx7Ii4vZGVidWciOjExfV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KDQovKioNCiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXINCiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuDQogKg0KICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLg0KICovDQoNCmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGRlYnVnOw0KZXhwb3J0cy5jb2VyY2UgPSBjb2VyY2U7DQpleHBvcnRzLmRpc2FibGUgPSBkaXNhYmxlOw0KZXhwb3J0cy5lbmFibGUgPSBlbmFibGU7DQpleHBvcnRzLmVuYWJsZWQgPSBlbmFibGVkOw0KZXhwb3J0cy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7DQoNCi8qKg0KICogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuDQogKi8NCg0KZXhwb3J0cy5uYW1lcyA9IFtdOw0KZXhwb3J0cy5za2lwcyA9IFtdOw0KDQovKioNCiAqIE1hcCBvZiBzcGVjaWFsICIlbiIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnICJmb3JtYXQiIGFyZ3VtZW50Lg0KICoNCiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyY2FzZWQgbGV0dGVyLCBpLmUuICJuIi4NCiAqLw0KDQpleHBvcnRzLmZvcm1hdHRlcnMgPSB7fTsNCg0KLyoqDQogKiBQcmV2aW91c2x5IGFzc2lnbmVkIGNvbG9yLg0KICovDQoNCnZhciBwcmV2Q29sb3IgPSAwOw0KDQovKioNCiAqIFByZXZpb3VzIGxvZyB0aW1lc3RhbXAuDQogKi8NCg0KdmFyIHByZXZUaW1lOw0KDQovKioNCiAqIFNlbGVjdCBhIGNvbG9yLg0KICoNCiAqIEByZXR1cm4ge051bWJlcn0NCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmZ1bmN0aW9uIHNlbGVjdENvbG9yKCkgew0KICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbcHJldkNvbG9yKysgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdOw0KfQ0KDQovKioNCiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2UNCiAqIEByZXR1cm4ge0Z1bmN0aW9ufQ0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpmdW5jdGlvbiBkZWJ1ZyhuYW1lc3BhY2UpIHsNCg0KICAvLyBkZWZpbmUgdGhlIGBkaXNhYmxlZGAgdmVyc2lvbg0KICBmdW5jdGlvbiBkaXNhYmxlZCgpIHsNCiAgfQ0KICBkaXNhYmxlZC5lbmFibGVkID0gZmFsc2U7DQoNCiAgLy8gZGVmaW5lIHRoZSBgZW5hYmxlZGAgdmVyc2lvbg0KICBmdW5jdGlvbiBlbmFibGVkKCkgew0KDQogICAgdmFyIHNlbGYgPSBlbmFibGVkOw0KDQogICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXANCiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpOw0KICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7DQogICAgc2VsZi5kaWZmID0gbXM7DQogICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7DQogICAgc2VsZi5jdXJyID0gY3VycjsNCiAgICBwcmV2VGltZSA9IGN1cnI7DQoNCiAgICAvLyBhZGQgdGhlIGBjb2xvcmAgaWYgbm90IHNldA0KICAgIGlmIChudWxsID09IHNlbGYudXNlQ29sb3JzKSBzZWxmLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7DQogICAgaWYgKG51bGwgPT0gc2VsZi5jb2xvciAmJiBzZWxmLnVzZUNvbG9ycykgc2VsZi5jb2xvciA9IHNlbGVjdENvbG9yKCk7DQoNCiAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7DQoNCiAgICBhcmdzWzBdID0gZXhwb3J0cy5jb2VyY2UoYXJnc1swXSk7DQoNCiAgICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBhcmdzWzBdKSB7DQogICAgICAvLyBhbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlbw0KICAgICAgYXJncyA9IFsnJW8nXS5jb25jYXQoYXJncyk7DQogICAgfQ0KDQogICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnMNCiAgICB2YXIgaW5kZXggPSAwOw0KICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EteiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7DQogICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4DQogICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDsNCiAgICAgIGluZGV4Kys7DQogICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07DQogICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikgew0KICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07DQogICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTsNCg0KICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgDQogICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTsNCiAgICAgICAgaW5kZXgtLTsNCiAgICAgIH0NCiAgICAgIHJldHVybiBtYXRjaDsNCiAgICB9KTsNCg0KICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZXhwb3J0cy5mb3JtYXRBcmdzKSB7DQogICAgICBhcmdzID0gZXhwb3J0cy5mb3JtYXRBcmdzLmFwcGx5KHNlbGYsIGFyZ3MpOw0KICAgIH0NCiAgICB2YXIgbG9nRm4gPSBlbmFibGVkLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpOw0KICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpOw0KICB9DQogIGVuYWJsZWQuZW5hYmxlZCA9IHRydWU7DQoNCiAgdmFyIGZuID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSkgPyBlbmFibGVkIDogZGlzYWJsZWQ7DQoNCiAgZm4ubmFtZXNwYWNlID0gbmFtZXNwYWNlOw0KDQogIHJldHVybiBmbjsNCn0NCg0KLyoqDQogKiBFbmFibGVzIGEgZGVidWcgbW9kZSBieSBuYW1lc3BhY2VzLiBUaGlzIGNhbiBpbmNsdWRlIG1vZGVzDQogKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7DQogIGV4cG9ydHMuc2F2ZShuYW1lc3BhY2VzKTsNCg0KICB2YXIgc3BsaXQgPSAobmFtZXNwYWNlcyB8fCAnJykuc3BsaXQoL1tccyxdKy8pOw0KICB2YXIgbGVuID0gc3BsaXQubGVuZ3RoOw0KDQogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHsNCiAgICBpZiAoIXNwbGl0W2ldKSBjb250aW51ZTsgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3MNCiAgICBuYW1lc3BhY2VzID0gc3BsaXRbaV0ucmVwbGFjZSgvXCovZywgJy4qPycpOw0KICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHsNCiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7DQogICAgfSBlbHNlIHsNCiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTsNCiAgICB9DQogIH0NCn0NCg0KLyoqDQogKiBEaXNhYmxlIGRlYnVnIG91dHB1dC4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIGRpc2FibGUoKSB7DQogIGV4cG9ydHMuZW5hYmxlKCcnKTsNCn0NCg0KLyoqDQogKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IG5hbWUNCiAqIEByZXR1cm4ge0Jvb2xlYW59DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkgew0KICB2YXIgaSwgbGVuOw0KICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7DQogICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkgew0KICAgICAgcmV0dXJuIGZhbHNlOw0KICAgIH0NCiAgfQ0KICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7DQogICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkgew0KICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICB9DQogIHJldHVybiBmYWxzZTsNCn0NCg0KLyoqDQogKiBDb2VyY2UgYHZhbGAuDQogKg0KICogQHBhcmFtIHtNaXhlZH0gdmFsDQogKiBAcmV0dXJuIHtNaXhlZH0NCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHsNCiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlOw0KICByZXR1cm4gdmFsOw0KfQ0KDQp9LHsibXMiOjI5fV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KDQptb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliLycpOw0KDQp9LHsiLi9saWIvIjoxM31dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCg0KbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL3NvY2tldCcpOw0KDQovKioNCiAqIEV4cG9ydHMgcGFyc2VyDQogKg0KICogQGFwaSBwdWJsaWMNCiAqDQogKi8NCm1vZHVsZS5leHBvcnRzLnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTsNCg0KfSx7Ii4vc29ja2V0IjoxNCwiZW5naW5lLmlvLXBhcnNlciI6MjJ9XSwxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQooZnVuY3Rpb24gKGdsb2JhbCl7DQovKioNCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuDQogKi8NCg0KdmFyIHRyYW5zcG9ydHMgPSByZXF1aXJlKCcuL3RyYW5zcG9ydHMnKTsNCnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTsNCnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ2VuZ2luZS5pby1jbGllbnQ6c29ja2V0Jyk7DQp2YXIgaW5kZXggPSByZXF1aXJlKCdpbmRleG9mJyk7DQp2YXIgcGFyc2VyID0gcmVxdWlyZSgnZW5naW5lLmlvLXBhcnNlcicpOw0KdmFyIHBhcnNldXJpID0gcmVxdWlyZSgncGFyc2V1cmknKTsNCnZhciBwYXJzZWpzb24gPSByZXF1aXJlKCdwYXJzZWpzb24nKTsNCnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpOw0KDQovKioNCiAqIE1vZHVsZSBleHBvcnRzLg0KICovDQoNCm1vZHVsZS5leHBvcnRzID0gU29ja2V0Ow0KDQovKioNCiAqIFNvY2tldCBjb25zdHJ1Y3Rvci4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IHVyaSBvciBvcHRpb25zDQogKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucw0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpmdW5jdGlvbiBTb2NrZXQgKHVyaSwgb3B0cykgew0KICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU29ja2V0KSkgcmV0dXJuIG5ldyBTb2NrZXQodXJpLCBvcHRzKTsNCg0KICBvcHRzID0gb3B0cyB8fCB7fTsNCg0KICBpZiAodXJpICYmICdvYmplY3QnID09PSB0eXBlb2YgdXJpKSB7DQogICAgb3B0cyA9IHVyaTsNCiAgICB1cmkgPSBudWxsOw0KICB9DQoNCiAgaWYgKHVyaSkgew0KICAgIHVyaSA9IHBhcnNldXJpKHVyaSk7DQogICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0Ow0KICAgIG9wdHMuc2VjdXJlID0gdXJpLnByb3RvY29sID09PSAnaHR0cHMnIHx8IHVyaS5wcm90b2NvbCA9PT0gJ3dzcyc7DQogICAgb3B0cy5wb3J0ID0gdXJpLnBvcnQ7DQogICAgaWYgKHVyaS5xdWVyeSkgb3B0cy5xdWVyeSA9IHVyaS5xdWVyeTsNCiAgfSBlbHNlIGlmIChvcHRzLmhvc3QpIHsNCiAgICBvcHRzLmhvc3RuYW1lID0gcGFyc2V1cmkob3B0cy5ob3N0KS5ob3N0Ow0KICB9DQoNCiAgdGhpcy5zZWN1cmUgPSBudWxsICE9IG9wdHMuc2VjdXJlID8gb3B0cy5zZWN1cmUNCiAgICA6IChnbG9iYWwubG9jYXRpb24gJiYgJ2h0dHBzOicgPT09IGxvY2F0aW9uLnByb3RvY29sKTsNCg0KICBpZiAob3B0cy5ob3N0bmFtZSAmJiAhb3B0cy5wb3J0KSB7DQogICAgLy8gaWYgbm8gcG9ydCBpcyBzcGVjaWZpZWQgbWFudWFsbHksIHVzZSB0aGUgcHJvdG9jb2wgZGVmYXVsdA0KICAgIG9wdHMucG9ydCA9IHRoaXMuc2VjdXJlID8gJzQ0MycgOiAnODAnOw0KICB9DQoNCiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7DQogIHRoaXMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lIHx8DQogICAgKGdsb2JhbC5sb2NhdGlvbiA/IGxvY2F0aW9uLmhvc3RuYW1lIDogJ2xvY2FsaG9zdCcpOw0KICB0aGlzLnBvcnQgPSBvcHRzLnBvcnQgfHwgKGdsb2JhbC5sb2NhdGlvbiAmJiBsb2NhdGlvbi5wb3J0DQogICAgICA/IGxvY2F0aW9uLnBvcnQNCiAgICAgIDogKHRoaXMuc2VjdXJlID8gNDQzIDogODApKTsNCiAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnkgfHwge307DQogIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIHRoaXMucXVlcnkpIHRoaXMucXVlcnkgPSBwYXJzZXFzLmRlY29kZSh0aGlzLnF1ZXJ5KTsNCiAgdGhpcy51cGdyYWRlID0gZmFsc2UgIT09IG9wdHMudXBncmFkZTsNCiAgdGhpcy5wYXRoID0gKG9wdHMucGF0aCB8fCAnL2VuZ2luZS5pbycpLnJlcGxhY2UoL1wvJC8sICcnKSArICcvJzsNCiAgdGhpcy5mb3JjZUpTT05QID0gISFvcHRzLmZvcmNlSlNPTlA7DQogIHRoaXMuanNvbnAgPSBmYWxzZSAhPT0gb3B0cy5qc29ucDsNCiAgdGhpcy5mb3JjZUJhc2U2NCA9ICEhb3B0cy5mb3JjZUJhc2U2NDsNCiAgdGhpcy5lbmFibGVzWERSID0gISFvcHRzLmVuYWJsZXNYRFI7DQogIHRoaXMudGltZXN0YW1wUGFyYW0gPSBvcHRzLnRpbWVzdGFtcFBhcmFtIHx8ICd0JzsNCiAgdGhpcy50aW1lc3RhbXBSZXF1ZXN0cyA9IG9wdHMudGltZXN0YW1wUmVxdWVzdHM7DQogIHRoaXMudHJhbnNwb3J0cyA9IG9wdHMudHJhbnNwb3J0cyB8fCBbJ3BvbGxpbmcnLCAnd2Vic29ja2V0J107DQogIHRoaXMucmVhZHlTdGF0ZSA9ICcnOw0KICB0aGlzLndyaXRlQnVmZmVyID0gW107DQogIHRoaXMucG9saWN5UG9ydCA9IG9wdHMucG9saWN5UG9ydCB8fCA4NDM7DQogIHRoaXMucmVtZW1iZXJVcGdyYWRlID0gb3B0cy5yZW1lbWJlclVwZ3JhZGUgfHwgZmFsc2U7DQogIHRoaXMuYmluYXJ5VHlwZSA9IG51bGw7DQogIHRoaXMub25seUJpbmFyeVVwZ3JhZGVzID0gb3B0cy5vbmx5QmluYXJ5VXBncmFkZXM7DQogIHRoaXMucGVyTWVzc2FnZURlZmxhdGUgPSBmYWxzZSAhPT0gb3B0cy5wZXJNZXNzYWdlRGVmbGF0ZSA/IChvcHRzLnBlck1lc3NhZ2VEZWZsYXRlIHx8IHt9KSA6IGZhbHNlOw0KDQogIGlmICh0cnVlID09PSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlKSB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlID0ge307DQogIGlmICh0aGlzLnBlck1lc3NhZ2VEZWZsYXRlICYmIG51bGwgPT0gdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZS50aHJlc2hvbGQpIHsNCiAgICB0aGlzLnBlck1lc3NhZ2VEZWZsYXRlLnRocmVzaG9sZCA9IDEwMjQ7DQogIH0NCg0KICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnQNCiAgdGhpcy5wZnggPSBvcHRzLnBmeCB8fCBudWxsOw0KICB0aGlzLmtleSA9IG9wdHMua2V5IHx8IG51bGw7DQogIHRoaXMucGFzc3BocmFzZSA9IG9wdHMucGFzc3BocmFzZSB8fCBudWxsOw0KICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQgfHwgbnVsbDsNCiAgdGhpcy5jYSA9IG9wdHMuY2EgfHwgbnVsbDsNCiAgdGhpcy5jaXBoZXJzID0gb3B0cy5jaXBoZXJzIHx8IG51bGw7DQogIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBvcHRzLnJlamVjdFVuYXV0aG9yaXplZDsNCg0KICAvLyBvdGhlciBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudA0KICB2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnICYmIGdsb2JhbDsNCiAgaWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsKSB7DQogICAgaWYgKG9wdHMuZXh0cmFIZWFkZXJzICYmIE9iamVjdC5rZXlzKG9wdHMuZXh0cmFIZWFkZXJzKS5sZW5ndGggPiAwKSB7DQogICAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzOw0KICAgIH0NCiAgfQ0KDQogIHRoaXMub3BlbigpOw0KfQ0KDQpTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gZmFsc2U7DQoNCi8qKg0KICogTWl4IGluIGBFbWl0dGVyYC4NCiAqLw0KDQpFbWl0dGVyKFNvY2tldC5wcm90b3R5cGUpOw0KDQovKioNCiAqIFByb3RvY29sIHZlcnNpb24uDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpTb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50DQoNCi8qKg0KICogRXhwb3NlIGRlcHMgZm9yIGxlZ2FjeSBjb21wYXRpYmlsaXR5DQogKiBhbmQgc3RhbmRhbG9uZSBicm93c2VyIGFjY2Vzcy4NCiAqLw0KDQpTb2NrZXQuU29ja2V0ID0gU29ja2V0Ow0KU29ja2V0LlRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0Jyk7DQpTb2NrZXQudHJhbnNwb3J0cyA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0cycpOw0KU29ja2V0LnBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTsNCg0KLyoqDQogKiBDcmVhdGVzIHRyYW5zcG9ydCBvZiB0aGUgZ2l2ZW4gdHlwZS4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWUNCiAqIEByZXR1cm4ge1RyYW5zcG9ydH0NCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClNvY2tldC5wcm90b3R5cGUuY3JlYXRlVHJhbnNwb3J0ID0gZnVuY3Rpb24gKG5hbWUpIHsNCiAgZGVidWcoJ2NyZWF0aW5nIHRyYW5zcG9ydCAiJXMiJywgbmFtZSk7DQogIHZhciBxdWVyeSA9IGNsb25lKHRoaXMucXVlcnkpOw0KDQogIC8vIGFwcGVuZCBlbmdpbmUuaW8gcHJvdG9jb2wgaWRlbnRpZmllcg0KICBxdWVyeS5FSU8gPSBwYXJzZXIucHJvdG9jb2w7DQoNCiAgLy8gdHJhbnNwb3J0IG5hbWUNCiAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTsNCg0KICAvLyBzZXNzaW9uIGlkIGlmIHdlIGFscmVhZHkgaGF2ZSBvbmUNCiAgaWYgKHRoaXMuaWQpIHF1ZXJ5LnNpZCA9IHRoaXMuaWQ7DQoNCiAgdmFyIHRyYW5zcG9ydCA9IG5ldyB0cmFuc3BvcnRzW25hbWVdKHsNCiAgICBhZ2VudDogdGhpcy5hZ2VudCwNCiAgICBob3N0bmFtZTogdGhpcy5ob3N0bmFtZSwNCiAgICBwb3J0OiB0aGlzLnBvcnQsDQogICAgc2VjdXJlOiB0aGlzLnNlY3VyZSwNCiAgICBwYXRoOiB0aGlzLnBhdGgsDQogICAgcXVlcnk6IHF1ZXJ5LA0KICAgIGZvcmNlSlNPTlA6IHRoaXMuZm9yY2VKU09OUCwNCiAgICBqc29ucDogdGhpcy5qc29ucCwNCiAgICBmb3JjZUJhc2U2NDogdGhpcy5mb3JjZUJhc2U2NCwNCiAgICBlbmFibGVzWERSOiB0aGlzLmVuYWJsZXNYRFIsDQogICAgdGltZXN0YW1wUmVxdWVzdHM6IHRoaXMudGltZXN0YW1wUmVxdWVzdHMsDQogICAgdGltZXN0YW1wUGFyYW06IHRoaXMudGltZXN0YW1wUGFyYW0sDQogICAgcG9saWN5UG9ydDogdGhpcy5wb2xpY3lQb3J0LA0KICAgIHNvY2tldDogdGhpcywNCiAgICBwZng6IHRoaXMucGZ4LA0KICAgIGtleTogdGhpcy5rZXksDQogICAgcGFzc3BocmFzZTogdGhpcy5wYXNzcGhyYXNlLA0KICAgIGNlcnQ6IHRoaXMuY2VydCwNCiAgICBjYTogdGhpcy5jYSwNCiAgICBjaXBoZXJzOiB0aGlzLmNpcGhlcnMsDQogICAgcmVqZWN0VW5hdXRob3JpemVkOiB0aGlzLnJlamVjdFVuYXV0aG9yaXplZCwNCiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSwNCiAgICBleHRyYUhlYWRlcnM6IHRoaXMuZXh0cmFIZWFkZXJzDQogIH0pOw0KDQogIHJldHVybiB0cmFuc3BvcnQ7DQp9Ow0KDQpmdW5jdGlvbiBjbG9uZSAob2JqKSB7DQogIHZhciBvID0ge307DQogIGZvciAodmFyIGkgaW4gb2JqKSB7DQogICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkgew0KICAgICAgb1tpXSA9IG9ialtpXTsNCiAgICB9DQogIH0NCiAgcmV0dXJuIG87DQp9DQoNCi8qKg0KICogSW5pdGlhbGl6ZXMgdHJhbnNwb3J0IHRvIHVzZSBhbmQgc3RhcnRzIHByb2JlLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQpTb2NrZXQucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7DQogIHZhciB0cmFuc3BvcnQ7DQogIGlmICh0aGlzLnJlbWVtYmVyVXBncmFkZSAmJiBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzICYmIHRoaXMudHJhbnNwb3J0cy5pbmRleE9mKCd3ZWJzb2NrZXQnKSAhPT0gLTEpIHsNCiAgICB0cmFuc3BvcnQgPSAnd2Vic29ja2V0JzsNCiAgfSBlbHNlIGlmICgwID09PSB0aGlzLnRyYW5zcG9ydHMubGVuZ3RoKSB7DQogICAgLy8gRW1pdCBlcnJvciBvbiBuZXh0IHRpY2sgc28gaXQgY2FuIGJlIGxpc3RlbmVkIHRvDQogICAgdmFyIHNlbGYgPSB0aGlzOw0KICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgc2VsZi5lbWl0KCdlcnJvcicsICdObyB0cmFuc3BvcnRzIGF2YWlsYWJsZScpOw0KICAgIH0sIDApOw0KICAgIHJldHVybjsNCiAgfSBlbHNlIHsNCiAgICB0cmFuc3BvcnQgPSB0aGlzLnRyYW5zcG9ydHNbMF07DQogIH0NCiAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnOw0KDQogIC8vIFJldHJ5IHdpdGggdGhlIG5leHQgdHJhbnNwb3J0IGlmIHRoZSB0cmFuc3BvcnQgaXMgZGlzYWJsZWQgKGpzb25wOiBmYWxzZSkNCiAgdHJ5IHsNCiAgICB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydCh0cmFuc3BvcnQpOw0KICB9IGNhdGNoIChlKSB7DQogICAgdGhpcy50cmFuc3BvcnRzLnNoaWZ0KCk7DQogICAgdGhpcy5vcGVuKCk7DQogICAgcmV0dXJuOw0KICB9DQoNCiAgdHJhbnNwb3J0Lm9wZW4oKTsNCiAgdGhpcy5zZXRUcmFuc3BvcnQodHJhbnNwb3J0KTsNCn07DQoNCi8qKg0KICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQuIERpc2FibGVzIHRoZSBleGlzdGluZyBvbmUgKGlmIGFueSkuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5zZXRUcmFuc3BvcnQgPSBmdW5jdGlvbiAodHJhbnNwb3J0KSB7DQogIGRlYnVnKCdzZXR0aW5nIHRyYW5zcG9ydCAlcycsIHRyYW5zcG9ydC5uYW1lKTsNCiAgdmFyIHNlbGYgPSB0aGlzOw0KDQogIGlmICh0aGlzLnRyYW5zcG9ydCkgew0KICAgIGRlYnVnKCdjbGVhcmluZyBleGlzdGluZyB0cmFuc3BvcnQgJXMnLCB0aGlzLnRyYW5zcG9ydC5uYW1lKTsNCiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTsNCiAgfQ0KDQogIC8vIHNldCB1cCB0cmFuc3BvcnQNCiAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7DQoNCiAgLy8gc2V0IHVwIHRyYW5zcG9ydCBsaXN0ZW5lcnMNCiAgdHJhbnNwb3J0DQogIC5vbignZHJhaW4nLCBmdW5jdGlvbiAoKSB7DQogICAgc2VsZi5vbkRyYWluKCk7DQogIH0pDQogIC5vbigncGFja2V0JywgZnVuY3Rpb24gKHBhY2tldCkgew0KICAgIHNlbGYub25QYWNrZXQocGFja2V0KTsNCiAgfSkNCiAgLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlKSB7DQogICAgc2VsZi5vbkVycm9yKGUpOw0KICB9KQ0KICAub24oJ2Nsb3NlJywgZnVuY3Rpb24gKCkgew0KICAgIHNlbGYub25DbG9zZSgndHJhbnNwb3J0IGNsb3NlJyk7DQogIH0pOw0KfTsNCg0KLyoqDQogKiBQcm9iZXMgYSB0cmFuc3BvcnQuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IHRyYW5zcG9ydCBuYW1lDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLnByb2JlID0gZnVuY3Rpb24gKG5hbWUpIHsNCiAgZGVidWcoJ3Byb2JpbmcgdHJhbnNwb3J0ICIlcyInLCBuYW1lKTsNCiAgdmFyIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KG5hbWUsIHsgcHJvYmU6IDEgfSk7DQogIHZhciBmYWlsZWQgPSBmYWxzZTsNCiAgdmFyIHNlbGYgPSB0aGlzOw0KDQogIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTsNCg0KICBmdW5jdGlvbiBvblRyYW5zcG9ydE9wZW4gKCkgew0KICAgIGlmIChzZWxmLm9ubHlCaW5hcnlVcGdyYWRlcykgew0KICAgICAgdmFyIHVwZ3JhZGVMb3Nlc0JpbmFyeSA9ICF0aGlzLnN1cHBvcnRzQmluYXJ5ICYmIHNlbGYudHJhbnNwb3J0LnN1cHBvcnRzQmluYXJ5Ow0KICAgICAgZmFpbGVkID0gZmFpbGVkIHx8IHVwZ3JhZGVMb3Nlc0JpbmFyeTsNCiAgICB9DQogICAgaWYgKGZhaWxlZCkgcmV0dXJuOw0KDQogICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCAiJXMiIG9wZW5lZCcsIG5hbWUpOw0KICAgIHRyYW5zcG9ydC5zZW5kKFt7IHR5cGU6ICdwaW5nJywgZGF0YTogJ3Byb2JlJyB9XSk7DQogICAgdHJhbnNwb3J0Lm9uY2UoJ3BhY2tldCcsIGZ1bmN0aW9uIChtc2cpIHsNCiAgICAgIGlmIChmYWlsZWQpIHJldHVybjsNCiAgICAgIGlmICgncG9uZycgPT09IG1zZy50eXBlICYmICdwcm9iZScgPT09IG1zZy5kYXRhKSB7DQogICAgICAgIGRlYnVnKCdwcm9iZSB0cmFuc3BvcnQgIiVzIiBwb25nJywgbmFtZSk7DQogICAgICAgIHNlbGYudXBncmFkaW5nID0gdHJ1ZTsNCiAgICAgICAgc2VsZi5lbWl0KCd1cGdyYWRpbmcnLCB0cmFuc3BvcnQpOw0KICAgICAgICBpZiAoIXRyYW5zcG9ydCkgcmV0dXJuOw0KICAgICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gJ3dlYnNvY2tldCcgPT09IHRyYW5zcG9ydC5uYW1lOw0KDQogICAgICAgIGRlYnVnKCdwYXVzaW5nIGN1cnJlbnQgdHJhbnNwb3J0ICIlcyInLCBzZWxmLnRyYW5zcG9ydC5uYW1lKTsNCiAgICAgICAgc2VsZi50cmFuc3BvcnQucGF1c2UoZnVuY3Rpb24gKCkgew0KICAgICAgICAgIGlmIChmYWlsZWQpIHJldHVybjsNCiAgICAgICAgICBpZiAoJ2Nsb3NlZCcgPT09IHNlbGYucmVhZHlTdGF0ZSkgcmV0dXJuOw0KICAgICAgICAgIGRlYnVnKCdjaGFuZ2luZyB0cmFuc3BvcnQgYW5kIHNlbmRpbmcgdXBncmFkZSBwYWNrZXQnKTsNCg0KICAgICAgICAgIGNsZWFudXAoKTsNCg0KICAgICAgICAgIHNlbGYuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7DQogICAgICAgICAgdHJhbnNwb3J0LnNlbmQoW3sgdHlwZTogJ3VwZ3JhZGUnIH1dKTsNCiAgICAgICAgICBzZWxmLmVtaXQoJ3VwZ3JhZGUnLCB0cmFuc3BvcnQpOw0KICAgICAgICAgIHRyYW5zcG9ydCA9IG51bGw7DQogICAgICAgICAgc2VsZi51cGdyYWRpbmcgPSBmYWxzZTsNCiAgICAgICAgICBzZWxmLmZsdXNoKCk7DQogICAgICAgIH0pOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCAiJXMiIGZhaWxlZCcsIG5hbWUpOw0KICAgICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdwcm9iZSBlcnJvcicpOw0KICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7DQogICAgICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyKTsNCiAgICAgIH0NCiAgICB9KTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGZyZWV6ZVRyYW5zcG9ydCAoKSB7DQogICAgaWYgKGZhaWxlZCkgcmV0dXJuOw0KDQogICAgLy8gQW55IGNhbGxiYWNrIGNhbGxlZCBieSB0cmFuc3BvcnQgc2hvdWxkIGJlIGlnbm9yZWQgc2luY2Ugbm93DQogICAgZmFpbGVkID0gdHJ1ZTsNCg0KICAgIGNsZWFudXAoKTsNCg0KICAgIHRyYW5zcG9ydC5jbG9zZSgpOw0KICAgIHRyYW5zcG9ydCA9IG51bGw7DQogIH0NCg0KICAvLyBIYW5kbGUgYW55IGVycm9yIHRoYXQgaGFwcGVucyB3aGlsZSBwcm9iaW5nDQogIGZ1bmN0aW9uIG9uZXJyb3IgKGVycikgew0KICAgIHZhciBlcnJvciA9IG5ldyBFcnJvcigncHJvYmUgZXJyb3I6ICcgKyBlcnIpOw0KICAgIGVycm9yLnRyYW5zcG9ydCA9IHRyYW5zcG9ydC5uYW1lOw0KDQogICAgZnJlZXplVHJhbnNwb3J0KCk7DQoNCiAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0ICIlcyIgZmFpbGVkIGJlY2F1c2Ugb2YgZXJyb3I6ICVzJywgbmFtZSwgZXJyKTsNCg0KICAgIHNlbGYuZW1pdCgndXBncmFkZUVycm9yJywgZXJyb3IpOw0KICB9DQoNCiAgZnVuY3Rpb24gb25UcmFuc3BvcnRDbG9zZSAoKSB7DQogICAgb25lcnJvcigndHJhbnNwb3J0IGNsb3NlZCcpOw0KICB9DQoNCiAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIGNsb3NlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nDQogIGZ1bmN0aW9uIG9uY2xvc2UgKCkgew0KICAgIG9uZXJyb3IoJ3NvY2tldCBjbG9zZWQnKTsNCiAgfQ0KDQogIC8vIFdoZW4gdGhlIHNvY2tldCBpcyB1cGdyYWRlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nDQogIGZ1bmN0aW9uIG9udXBncmFkZSAodG8pIHsNCiAgICBpZiAodHJhbnNwb3J0ICYmIHRvLm5hbWUgIT09IHRyYW5zcG9ydC5uYW1lKSB7DQogICAgICBkZWJ1ZygnIiVzIiB3b3JrcyAtIGFib3J0aW5nICIlcyInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7DQogICAgICBmcmVlemVUcmFuc3BvcnQoKTsNCiAgICB9DQogIH0NCg0KICAvLyBSZW1vdmUgYWxsIGxpc3RlbmVycyBvbiB0aGUgdHJhbnNwb3J0IGFuZCBvbiBzZWxmDQogIGZ1bmN0aW9uIGNsZWFudXAgKCkgew0KICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7DQogICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpOw0KICAgIHRyYW5zcG9ydC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTsNCiAgICBzZWxmLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpOw0KICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIoJ3VwZ3JhZGluZycsIG9udXBncmFkZSk7DQogIH0NCg0KICB0cmFuc3BvcnQub25jZSgnb3BlbicsIG9uVHJhbnNwb3J0T3Blbik7DQogIHRyYW5zcG9ydC5vbmNlKCdlcnJvcicsIG9uZXJyb3IpOw0KICB0cmFuc3BvcnQub25jZSgnY2xvc2UnLCBvblRyYW5zcG9ydENsb3NlKTsNCg0KICB0aGlzLm9uY2UoJ2Nsb3NlJywgb25jbG9zZSk7DQogIHRoaXMub25jZSgndXBncmFkaW5nJywgb251cGdyYWRlKTsNCg0KICB0cmFuc3BvcnQub3BlbigpOw0KfTsNCg0KLyoqDQogKiBDYWxsZWQgd2hlbiBjb25uZWN0aW9uIGlzIGRlZW1lZCBvcGVuLg0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5vbk9wZW4gPSBmdW5jdGlvbiAoKSB7DQogIGRlYnVnKCdzb2NrZXQgb3BlbicpOw0KICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7DQogIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSAnd2Vic29ja2V0JyA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTsNCiAgdGhpcy5lbWl0KCdvcGVuJyk7DQogIHRoaXMuZmx1c2goKTsNCg0KICAvLyB3ZSBjaGVjayBmb3IgYHJlYWR5U3RhdGVgIGluIGNhc2UgYW4gYG9wZW5gDQogIC8vIGxpc3RlbmVyIGFscmVhZHkgY2xvc2VkIHRoZSBzb2NrZXQNCiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudXBncmFkZSAmJiB0aGlzLnRyYW5zcG9ydC5wYXVzZSkgew0KICAgIGRlYnVnKCdzdGFydGluZyB1cGdyYWRlIHByb2JlcycpOw0KICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGhpcy51cGdyYWRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsNCiAgICAgIHRoaXMucHJvYmUodGhpcy51cGdyYWRlc1tpXSk7DQogICAgfQ0KICB9DQp9Ow0KDQovKioNCiAqIEhhbmRsZXMgYSBwYWNrZXQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5vblBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQpIHsNCiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7DQogICAgZGVidWcoJ3NvY2tldCByZWNlaXZlOiB0eXBlICIlcyIsIGRhdGEgIiVzIicsIHBhY2tldC50eXBlLCBwYWNrZXQuZGF0YSk7DQoNCiAgICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7DQoNCiAgICAvLyBTb2NrZXQgaXMgbGl2ZSAtIGFueSBwYWNrZXQgY291bnRzDQogICAgdGhpcy5lbWl0KCdoZWFydGJlYXQnKTsNCg0KICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHsNCiAgICAgIGNhc2UgJ29wZW4nOg0KICAgICAgICB0aGlzLm9uSGFuZHNoYWtlKHBhcnNlanNvbihwYWNrZXQuZGF0YSkpOw0KICAgICAgICBicmVhazsNCg0KICAgICAgY2FzZSAncG9uZyc6DQogICAgICAgIHRoaXMuc2V0UGluZygpOw0KICAgICAgICB0aGlzLmVtaXQoJ3BvbmcnKTsNCiAgICAgICAgYnJlYWs7DQoNCiAgICAgIGNhc2UgJ2Vycm9yJzoNCiAgICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignc2VydmVyIGVycm9yJyk7DQogICAgICAgIGVyci5jb2RlID0gcGFja2V0LmRhdGE7DQogICAgICAgIHRoaXMub25FcnJvcihlcnIpOw0KICAgICAgICBicmVhazsNCg0KICAgICAgY2FzZSAnbWVzc2FnZSc6DQogICAgICAgIHRoaXMuZW1pdCgnZGF0YScsIHBhY2tldC5kYXRhKTsNCiAgICAgICAgdGhpcy5lbWl0KCdtZXNzYWdlJywgcGFja2V0LmRhdGEpOw0KICAgICAgICBicmVhazsNCiAgICB9DQogIH0gZWxzZSB7DQogICAgZGVidWcoJ3BhY2tldCByZWNlaXZlZCB3aXRoIHNvY2tldCByZWFkeVN0YXRlICIlcyInLCB0aGlzLnJlYWR5U3RhdGUpOw0KICB9DQp9Ow0KDQovKioNCiAqIENhbGxlZCB1cG9uIGhhbmRzaGFrZSBjb21wbGV0aW9uLg0KICoNCiAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kc2hha2Ugb2JqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLm9uSGFuZHNoYWtlID0gZnVuY3Rpb24gKGRhdGEpIHsNCiAgdGhpcy5lbWl0KCdoYW5kc2hha2UnLCBkYXRhKTsNCiAgdGhpcy5pZCA9IGRhdGEuc2lkOw0KICB0aGlzLnRyYW5zcG9ydC5xdWVyeS5zaWQgPSBkYXRhLnNpZDsNCiAgdGhpcy51cGdyYWRlcyA9IHRoaXMuZmlsdGVyVXBncmFkZXMoZGF0YS51cGdyYWRlcyk7DQogIHRoaXMucGluZ0ludGVydmFsID0gZGF0YS5waW5nSW50ZXJ2YWw7DQogIHRoaXMucGluZ1RpbWVvdXQgPSBkYXRhLnBpbmdUaW1lb3V0Ow0KICB0aGlzLm9uT3BlbigpOw0KICAvLyBJbiBjYXNlIG9wZW4gaGFuZGxlciBjbG9zZXMgc29ja2V0DQogIGlmICgnY2xvc2VkJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSByZXR1cm47DQogIHRoaXMuc2V0UGluZygpOw0KDQogIC8vIFByb2xvbmcgbGl2ZW5lc3Mgb2Ygc29ja2V0IG9uIGhlYXJ0YmVhdA0KICB0aGlzLnJlbW92ZUxpc3RlbmVyKCdoZWFydGJlYXQnLCB0aGlzLm9uSGVhcnRiZWF0KTsNCiAgdGhpcy5vbignaGVhcnRiZWF0JywgdGhpcy5vbkhlYXJ0YmVhdCk7DQp9Ow0KDQovKioNCiAqIFJlc2V0cyBwaW5nIHRpbWVvdXQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5vbkhlYXJ0YmVhdCA9IGZ1bmN0aW9uICh0aW1lb3V0KSB7DQogIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpOw0KICB2YXIgc2VsZiA9IHRoaXM7DQogIHNlbGYucGluZ1RpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgIGlmICgnY2xvc2VkJyA9PT0gc2VsZi5yZWFkeVN0YXRlKSByZXR1cm47DQogICAgc2VsZi5vbkNsb3NlKCdwaW5nIHRpbWVvdXQnKTsNCiAgfSwgdGltZW91dCB8fCAoc2VsZi5waW5nSW50ZXJ2YWwgKyBzZWxmLnBpbmdUaW1lb3V0KSk7DQp9Ow0KDQovKioNCiAqIFBpbmdzIHNlcnZlciBldmVyeSBgdGhpcy5waW5nSW50ZXJ2YWxgIGFuZCBleHBlY3RzIHJlc3BvbnNlDQogKiB3aXRoaW4gYHRoaXMucGluZ1RpbWVvdXRgIG9yIGNsb3NlcyBjb25uZWN0aW9uLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClNvY2tldC5wcm90b3R5cGUuc2V0UGluZyA9IGZ1bmN0aW9uICgpIHsNCiAgdmFyIHNlbGYgPSB0aGlzOw0KICBjbGVhclRpbWVvdXQoc2VsZi5waW5nSW50ZXJ2YWxUaW1lcik7DQogIHNlbGYucGluZ0ludGVydmFsVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICBkZWJ1Zygnd3JpdGluZyBwaW5nIHBhY2tldCAtIGV4cGVjdGluZyBwb25nIHdpdGhpbiAlc21zJywgc2VsZi5waW5nVGltZW91dCk7DQogICAgc2VsZi5waW5nKCk7DQogICAgc2VsZi5vbkhlYXJ0YmVhdChzZWxmLnBpbmdUaW1lb3V0KTsNCiAgfSwgc2VsZi5waW5nSW50ZXJ2YWwpOw0KfTsNCg0KLyoqDQoqIFNlbmRzIGEgcGluZyBwYWNrZXQuDQoqDQoqIEBhcGkgcHJpdmF0ZQ0KKi8NCg0KU29ja2V0LnByb3RvdHlwZS5waW5nID0gZnVuY3Rpb24gKCkgew0KICB2YXIgc2VsZiA9IHRoaXM7DQogIHRoaXMuc2VuZFBhY2tldCgncGluZycsIGZ1bmN0aW9uICgpIHsNCiAgICBzZWxmLmVtaXQoJ3BpbmcnKTsNCiAgfSk7DQp9Ow0KDQovKioNCiAqIENhbGxlZCBvbiBgZHJhaW5gIGV2ZW50DQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5vbkRyYWluID0gZnVuY3Rpb24gKCkgew0KICB0aGlzLndyaXRlQnVmZmVyLnNwbGljZSgwLCB0aGlzLnByZXZCdWZmZXJMZW4pOw0KDQogIC8vIHNldHRpbmcgcHJldkJ1ZmZlckxlbiA9IDAgaXMgdmVyeSBpbXBvcnRhbnQNCiAgLy8gZm9yIGV4YW1wbGUsIHdoZW4gdXBncmFkaW5nLCB1cGdyYWRlIHBhY2tldCBpcyBzZW50IG92ZXIsDQogIC8vIGFuZCBhIG5vbnplcm8gcHJldkJ1ZmZlckxlbiBjb3VsZCBjYXVzZSBwcm9ibGVtcyBvbiBgZHJhaW5gDQogIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7DQoNCiAgaWYgKDAgPT09IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7DQogICAgdGhpcy5lbWl0KCdkcmFpbicpOw0KICB9IGVsc2Ugew0KICAgIHRoaXMuZmx1c2goKTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBGbHVzaCB3cml0ZSBidWZmZXJzLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClNvY2tldC5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7DQogIGlmICgnY2xvc2VkJyAhPT0gdGhpcy5yZWFkeVN0YXRlICYmIHRoaXMudHJhbnNwb3J0LndyaXRhYmxlICYmDQogICAgIXRoaXMudXBncmFkaW5nICYmIHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoKSB7DQogICAgZGVidWcoJ2ZsdXNoaW5nICVkIHBhY2tldHMgaW4gc29ja2V0JywgdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpOw0KICAgIHRoaXMudHJhbnNwb3J0LnNlbmQodGhpcy53cml0ZUJ1ZmZlcik7DQogICAgLy8ga2VlcCB0cmFjayBvZiBjdXJyZW50IGxlbmd0aCBvZiB3cml0ZUJ1ZmZlcg0KICAgIC8vIHNwbGljZSB3cml0ZUJ1ZmZlciBhbmQgY2FsbGJhY2tCdWZmZXIgb24gYGRyYWluYA0KICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IHRoaXMud3JpdGVCdWZmZXIubGVuZ3RoOw0KICAgIHRoaXMuZW1pdCgnZmx1c2gnKTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBTZW5kcyBhIG1lc3NhZ2UuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UuDQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi4NCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLg0KICogQHJldHVybiB7U29ja2V0fSBmb3IgY2hhaW5pbmcuDQogKiBAYXBpIHB1YmxpYw0KICovDQoNClNvY2tldC5wcm90b3R5cGUud3JpdGUgPQ0KU29ja2V0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24gKG1zZywgb3B0aW9ucywgZm4pIHsNCiAgdGhpcy5zZW5kUGFja2V0KCdtZXNzYWdlJywgbXNnLCBvcHRpb25zLCBmbik7DQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBTZW5kcyBhIHBhY2tldC4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gcGFja2V0IHR5cGUuDQogKiBAcGFyYW0ge1N0cmluZ30gZGF0YS4NCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLg0KICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLnNlbmRQYWNrZXQgPSBmdW5jdGlvbiAodHlwZSwgZGF0YSwgb3B0aW9ucywgZm4pIHsNCiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBkYXRhKSB7DQogICAgZm4gPSBkYXRhOw0KICAgIGRhdGEgPSB1bmRlZmluZWQ7DQogIH0NCg0KICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIG9wdGlvbnMpIHsNCiAgICBmbiA9IG9wdGlvbnM7DQogICAgb3B0aW9ucyA9IG51bGw7DQogIH0NCg0KICBpZiAoJ2Nsb3NpbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSkgew0KICAgIHJldHVybjsNCiAgfQ0KDQogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9Ow0KICBvcHRpb25zLmNvbXByZXNzID0gZmFsc2UgIT09IG9wdGlvbnMuY29tcHJlc3M7DQoNCiAgdmFyIHBhY2tldCA9IHsNCiAgICB0eXBlOiB0eXBlLA0KICAgIGRhdGE6IGRhdGEsDQogICAgb3B0aW9uczogb3B0aW9ucw0KICB9Ow0KICB0aGlzLmVtaXQoJ3BhY2tldENyZWF0ZScsIHBhY2tldCk7DQogIHRoaXMud3JpdGVCdWZmZXIucHVzaChwYWNrZXQpOw0KICBpZiAoZm4pIHRoaXMub25jZSgnZmx1c2gnLCBmbik7DQogIHRoaXMuZmx1c2goKTsNCn07DQoNCi8qKg0KICogQ2xvc2VzIHRoZSBjb25uZWN0aW9uLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClNvY2tldC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7DQogIGlmICgnb3BlbmluZycgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnb3BlbicgPT09IHRoaXMucmVhZHlTdGF0ZSkgew0KICAgIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zaW5nJzsNCg0KICAgIHZhciBzZWxmID0gdGhpczsNCg0KICAgIGlmICh0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCkgew0KICAgICAgdGhpcy5vbmNlKCdkcmFpbicsIGZ1bmN0aW9uICgpIHsNCiAgICAgICAgaWYgKHRoaXMudXBncmFkaW5nKSB7DQogICAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICBjbG9zZSgpOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICB9IGVsc2UgaWYgKHRoaXMudXBncmFkaW5nKSB7DQogICAgICB3YWl0Rm9yVXBncmFkZSgpOw0KICAgIH0gZWxzZSB7DQogICAgICBjbG9zZSgpOw0KICAgIH0NCiAgfQ0KDQogIGZ1bmN0aW9uIGNsb3NlICgpIHsNCiAgICBzZWxmLm9uQ2xvc2UoJ2ZvcmNlZCBjbG9zZScpOw0KICAgIGRlYnVnKCdzb2NrZXQgY2xvc2luZyAtIHRlbGxpbmcgdHJhbnNwb3J0IHRvIGNsb3NlJyk7DQogICAgc2VsZi50cmFuc3BvcnQuY2xvc2UoKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGNsZWFudXBBbmRDbG9zZSAoKSB7DQogICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkZScsIGNsZWFudXBBbmRDbG9zZSk7DQogICAgc2VsZi5yZW1vdmVMaXN0ZW5lcigndXBncmFkZUVycm9yJywgY2xlYW51cEFuZENsb3NlKTsNCiAgICBjbG9zZSgpOw0KICB9DQoNCiAgZnVuY3Rpb24gd2FpdEZvclVwZ3JhZGUgKCkgew0KICAgIC8vIHdhaXQgZm9yIHVwZ3JhZGUgdG8gZmluaXNoIHNpbmNlIHdlIGNhbid0IHNlbmQgcGFja2V0cyB3aGlsZSBwYXVzaW5nIGEgdHJhbnNwb3J0DQogICAgc2VsZi5vbmNlKCd1cGdyYWRlJywgY2xlYW51cEFuZENsb3NlKTsNCiAgICBzZWxmLm9uY2UoJ3VwZ3JhZGVFcnJvcicsIGNsZWFudXBBbmRDbG9zZSk7DQogIH0NCg0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGVycm9yDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycikgew0KICBkZWJ1Zygnc29ja2V0IGVycm9yICVqJywgZXJyKTsNCiAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlOw0KICB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTsNCiAgdGhpcy5vbkNsb3NlKCd0cmFuc3BvcnQgZXJyb3InLCBlcnIpOw0KfTsNCg0KLyoqDQogKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgY2xvc2UuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKHJlYXNvbiwgZGVzYykgew0KICBpZiAoJ29wZW5pbmcnID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgJ2Nsb3NpbmcnID09PSB0aGlzLnJlYWR5U3RhdGUpIHsNCiAgICBkZWJ1Zygnc29ja2V0IGNsb3NlIHdpdGggcmVhc29uOiAiJXMiJywgcmVhc29uKTsNCiAgICB2YXIgc2VsZiA9IHRoaXM7DQoNCiAgICAvLyBjbGVhciB0aW1lcnMNCiAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7DQogICAgY2xlYXJUaW1lb3V0KHRoaXMucGluZ1RpbWVvdXRUaW1lcik7DQoNCiAgICAvLyBzdG9wIGV2ZW50IGZyb20gZmlyaW5nIGFnYWluIGZvciB0cmFuc3BvcnQNCiAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoJ2Nsb3NlJyk7DQoNCiAgICAvLyBlbnN1cmUgdHJhbnNwb3J0IHdvbid0IHN0YXkgb3Blbg0KICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7DQoNCiAgICAvLyBpZ25vcmUgZnVydGhlciB0cmFuc3BvcnQgY29tbXVuaWNhdGlvbg0KICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpOw0KDQogICAgLy8gc2V0IHJlYWR5IHN0YXRlDQogICAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7DQoNCiAgICAvLyBjbGVhciBzZXNzaW9uIGlkDQogICAgdGhpcy5pZCA9IG51bGw7DQoNCiAgICAvLyBlbWl0IGNsb3NlIGV2ZW50DQogICAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbiwgZGVzYyk7DQoNCiAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGwNCiAgICAvLyBncmFiIHRoZSBidWZmZXJzIG9uIGBjbG9zZWAgZXZlbnQNCiAgICBzZWxmLndyaXRlQnVmZmVyID0gW107DQogICAgc2VsZi5wcmV2QnVmZmVyTGVuID0gMDsNCiAgfQ0KfTsNCg0KLyoqDQogKiBGaWx0ZXJzIHVwZ3JhZGVzLCByZXR1cm5pbmcgb25seSB0aG9zZSBtYXRjaGluZyBjbGllbnQgdHJhbnNwb3J0cy4NCiAqDQogKiBAcGFyYW0ge0FycmF5fSBzZXJ2ZXIgdXBncmFkZXMNCiAqIEBhcGkgcHJpdmF0ZQ0KICoNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLmZpbHRlclVwZ3JhZGVzID0gZnVuY3Rpb24gKHVwZ3JhZGVzKSB7DQogIHZhciBmaWx0ZXJlZFVwZ3JhZGVzID0gW107DQogIGZvciAodmFyIGkgPSAwLCBqID0gdXBncmFkZXMubGVuZ3RoOyBpIDwgajsgaSsrKSB7DQogICAgaWYgKH5pbmRleCh0aGlzLnRyYW5zcG9ydHMsIHVwZ3JhZGVzW2ldKSkgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTsNCiAgfQ0KICByZXR1cm4gZmlsdGVyZWRVcGdyYWRlczsNCn07DQoNCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQ0KDQp9LHsiLi90cmFuc3BvcnQiOjE1LCIuL3RyYW5zcG9ydHMiOjE2LCJjb21wb25lbnQtZW1pdHRlciI6OCwiZGVidWciOjEwLCJlbmdpbmUuaW8tcGFyc2VyIjoyMiwiaW5kZXhvZiI6MjcsInBhcnNlanNvbiI6MzAsInBhcnNlcXMiOjMxLCJwYXJzZXVyaSI6MzJ9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQovKioNCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuDQogKi8NCg0KdmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTsNCnZhciBFbWl0dGVyID0gcmVxdWlyZSgnY29tcG9uZW50LWVtaXR0ZXInKTsNCg0KLyoqDQogKiBNb2R1bGUgZXhwb3J0cy4NCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydDsNCg0KLyoqDQogKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuDQogKg0KICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBUcmFuc3BvcnQgKG9wdHMpIHsNCiAgdGhpcy5wYXRoID0gb3B0cy5wYXRoOw0KICB0aGlzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZTsNCiAgdGhpcy5wb3J0ID0gb3B0cy5wb3J0Ow0KICB0aGlzLnNlY3VyZSA9IG9wdHMuc2VjdXJlOw0KICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTsNCiAgdGhpcy50aW1lc3RhbXBQYXJhbSA9IG9wdHMudGltZXN0YW1wUGFyYW07DQogIHRoaXMudGltZXN0YW1wUmVxdWVzdHMgPSBvcHRzLnRpbWVzdGFtcFJlcXVlc3RzOw0KICB0aGlzLnJlYWR5U3RhdGUgPSAnJzsNCiAgdGhpcy5hZ2VudCA9IG9wdHMuYWdlbnQgfHwgZmFsc2U7DQogIHRoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7DQogIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjsNCg0KICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnQNCiAgdGhpcy5wZnggPSBvcHRzLnBmeDsNCiAgdGhpcy5rZXkgPSBvcHRzLmtleTsNCiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlOw0KICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7DQogIHRoaXMuY2EgPSBvcHRzLmNhOw0KICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7DQogIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7DQoNCiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnQNCiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVyczsNCn0NCg0KLyoqDQogKiBNaXggaW4gYEVtaXR0ZXJgLg0KICovDQoNCkVtaXR0ZXIoVHJhbnNwb3J0LnByb3RvdHlwZSk7DQoNCi8qKg0KICogRW1pdHMgYW4gZXJyb3IuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IHN0cg0KICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmcNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KVHJhbnNwb3J0LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKG1zZywgZGVzYykgew0KICB2YXIgZXJyID0gbmV3IEVycm9yKG1zZyk7DQogIGVyci50eXBlID0gJ1RyYW5zcG9ydEVycm9yJzsNCiAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYzsNCiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7DQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBPcGVucyB0aGUgdHJhbnNwb3J0Lg0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KVHJhbnNwb3J0LnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkgew0KICBpZiAoJ2Nsb3NlZCcgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCAnJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7DQogICAgdGhpcy5yZWFkeVN0YXRlID0gJ29wZW5pbmcnOw0KICAgIHRoaXMuZG9PcGVuKCk7DQogIH0NCg0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHsNCiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8ICdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7DQogICAgdGhpcy5kb0Nsb3NlKCk7DQogICAgdGhpcy5vbkNsb3NlKCk7DQogIH0NCg0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogU2VuZHMgbXVsdGlwbGUgcGFja2V0cy4NCiAqDQogKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpUcmFuc3BvcnQucHJvdG90eXBlLnNlbmQgPSBmdW5jdGlvbiAocGFja2V0cykgew0KICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHsNCiAgICB0aGlzLndyaXRlKHBhY2tldHMpOw0KICB9IGVsc2Ugew0KICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IG5vdCBvcGVuJyk7DQogIH0NCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gb3Blbg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClRyYW5zcG9ydC5wcm90b3R5cGUub25PcGVuID0gZnVuY3Rpb24gKCkgew0KICB0aGlzLnJlYWR5U3RhdGUgPSAnb3Blbic7DQogIHRoaXMud3JpdGFibGUgPSB0cnVlOw0KICB0aGlzLmVtaXQoJ29wZW4nKTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHdpdGggZGF0YS4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gZGF0YQ0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkgew0KICB2YXIgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTsNCiAgdGhpcy5vblBhY2tldChwYWNrZXQpOw0KfTsNCg0KLyoqDQogKiBDYWxsZWQgd2l0aCBhIGRlY29kZWQgcGFja2V0Lg0KICovDQoNClRyYW5zcG9ydC5wcm90b3R5cGUub25QYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7DQogIHRoaXMuZW1pdCgncGFja2V0JywgcGFja2V0KTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gY2xvc2UuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlID0gZnVuY3Rpb24gKCkgew0KICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJzsNCiAgdGhpcy5lbWl0KCdjbG9zZScpOw0KfTsNCg0KfSx7ImNvbXBvbmVudC1lbWl0dGVyIjo4LCJlbmdpbmUuaW8tcGFyc2VyIjoyMn1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCihmdW5jdGlvbiAoZ2xvYmFsKXsNCi8qKg0KICogTW9kdWxlIGRlcGVuZGVuY2llcw0KICovDQoNCnZhciBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0LXNzbCcpOw0KdmFyIFhIUiA9IHJlcXVpcmUoJy4vcG9sbGluZy14aHInKTsNCnZhciBKU09OUCA9IHJlcXVpcmUoJy4vcG9sbGluZy1qc29ucCcpOw0KdmFyIHdlYnNvY2tldCA9IHJlcXVpcmUoJy4vd2Vic29ja2V0Jyk7DQoNCi8qKg0KICogRXhwb3J0IHRyYW5zcG9ydHMuDQogKi8NCg0KZXhwb3J0cy5wb2xsaW5nID0gcG9sbGluZzsNCmV4cG9ydHMud2Vic29ja2V0ID0gd2Vic29ja2V0Ow0KDQovKioNCiAqIFBvbGxpbmcgdHJhbnNwb3J0IHBvbHltb3JwaGljIGNvbnN0cnVjdG9yLg0KICogRGVjaWRlcyBvbiB4aHIgdnMganNvbnAgYmFzZWQgb24gZmVhdHVyZSBkZXRlY3Rpb24uDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KZnVuY3Rpb24gcG9sbGluZyAob3B0cykgew0KICB2YXIgeGhyOw0KICB2YXIgeGQgPSBmYWxzZTsNCiAgdmFyIHhzID0gZmFsc2U7DQogIHZhciBqc29ucCA9IGZhbHNlICE9PSBvcHRzLmpzb25wOw0KDQogIGlmIChnbG9iYWwubG9jYXRpb24pIHsNCiAgICB2YXIgaXNTU0wgPSAnaHR0cHM6JyA9PT0gbG9jYXRpb24ucHJvdG9jb2w7DQogICAgdmFyIHBvcnQgPSBsb2NhdGlvbi5wb3J0Ow0KDQogICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YA0KICAgIGlmICghcG9ydCkgew0KICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7DQogICAgfQ0KDQogICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7DQogICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7DQogIH0NCg0KICBvcHRzLnhkb21haW4gPSB4ZDsNCiAgb3B0cy54c2NoZW1lID0geHM7DQogIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTsNCg0KICBpZiAoJ29wZW4nIGluIHhociAmJiAhb3B0cy5mb3JjZUpTT05QKSB7DQogICAgcmV0dXJuIG5ldyBYSFIob3B0cyk7DQogIH0gZWxzZSB7DQogICAgaWYgKCFqc29ucCkgdGhyb3cgbmV3IEVycm9yKCdKU09OUCBkaXNhYmxlZCcpOw0KICAgIHJldHVybiBuZXcgSlNPTlAob3B0cyk7DQogIH0NCn0NCg0KfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pDQoNCn0seyIuL3BvbGxpbmctanNvbnAiOjE3LCIuL3BvbGxpbmcteGhyIjoxOCwiLi93ZWJzb2NrZXQiOjIwLCJ4bWxodHRwcmVxdWVzdC1zc2wiOjIxfV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KKGZ1bmN0aW9uIChnbG9iYWwpew0KDQovKioNCiAqIE1vZHVsZSByZXF1aXJlbWVudHMuDQogKi8NCg0KdmFyIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKTsNCnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTsNCg0KLyoqDQogKiBNb2R1bGUgZXhwb3J0cy4NCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IEpTT05QUG9sbGluZzsNCg0KLyoqDQogKiBDYWNoZWQgcmVndWxhciBleHByZXNzaW9ucy4NCiAqLw0KDQp2YXIgck5ld2xpbmUgPSAvXG4vZzsNCnZhciByRXNjYXBlZE5ld2xpbmUgPSAvXFxuL2c7DQoNCi8qKg0KICogR2xvYmFsIEpTT05QIGNhbGxiYWNrcy4NCiAqLw0KDQp2YXIgY2FsbGJhY2tzOw0KDQovKioNCiAqIE5vb3AuDQogKi8NCg0KZnVuY3Rpb24gZW1wdHkgKCkgeyB9DQoNCi8qKg0KICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gb3B0cy4NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZnVuY3Rpb24gSlNPTlBQb2xsaW5nIChvcHRzKSB7DQogIFBvbGxpbmcuY2FsbCh0aGlzLCBvcHRzKTsNCg0KICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTsNCg0KICAvLyBkZWZpbmUgZ2xvYmFsIGNhbGxiYWNrcyBhcnJheSBpZiBub3QgcHJlc2VudA0KICAvLyB3ZSBkbyB0aGlzIGhlcmUgKGxhemlseSkgdG8gYXZvaWQgdW5uZWVkZWQgZ2xvYmFsIHBvbGx1dGlvbg0KICBpZiAoIWNhbGxiYWNrcykgew0KICAgIC8vIHdlIG5lZWQgdG8gY29uc2lkZXIgbXVsdGlwbGUgZW5naW5lcyBpbiB0aGUgc2FtZSBwYWdlDQogICAgaWYgKCFnbG9iYWwuX19fZWlvKSBnbG9iYWwuX19fZWlvID0gW107DQogICAgY2FsbGJhY2tzID0gZ2xvYmFsLl9fX2VpbzsNCiAgfQ0KDQogIC8vIGNhbGxiYWNrIGlkZW50aWZpZXINCiAgdGhpcy5pbmRleCA9IGNhbGxiYWNrcy5sZW5ndGg7DQoNCiAgLy8gYWRkIGNhbGxiYWNrIHRvIGpzb25wIGdsb2JhbA0KICB2YXIgc2VsZiA9IHRoaXM7DQogIGNhbGxiYWNrcy5wdXNoKGZ1bmN0aW9uIChtc2cpIHsNCiAgICBzZWxmLm9uRGF0YShtc2cpOw0KICB9KTsNCg0KICAvLyBhcHBlbmQgdG8gcXVlcnkgc3RyaW5nDQogIHRoaXMucXVlcnkuaiA9IHRoaXMuaW5kZXg7DQoNCiAgLy8gcHJldmVudCBzcHVyaW91cyBlcnJvcnMgZnJvbSBiZWluZyBlbWl0dGVkIHdoZW4gdGhlIHdpbmRvdyBpcyB1bmxvYWRlZA0KICBpZiAoZ2xvYmFsLmRvY3VtZW50ICYmIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7DQogICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uICgpIHsNCiAgICAgIGlmIChzZWxmLnNjcmlwdCkgc2VsZi5zY3JpcHQub25lcnJvciA9IGVtcHR5Ow0KICAgIH0sIGZhbHNlKTsNCiAgfQ0KfQ0KDQovKioNCiAqIEluaGVyaXRzIGZyb20gUG9sbGluZy4NCiAqLw0KDQppbmhlcml0KEpTT05QUG9sbGluZywgUG9sbGluZyk7DQoNCi8qDQogKiBKU09OUCBvbmx5IHN1cHBvcnRzIGJpbmFyeSBhcyBiYXNlNjQgZW5jb2RlZCBzdHJpbmdzDQogKi8NCg0KSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlOw0KDQovKioNCiAqIENsb3NlcyB0aGUgc29ja2V0Lg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHsNCiAgaWYgKHRoaXMuc2NyaXB0KSB7DQogICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7DQogICAgdGhpcy5zY3JpcHQgPSBudWxsOw0KICB9DQoNCiAgaWYgKHRoaXMuZm9ybSkgew0KICAgIHRoaXMuZm9ybS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9ybSk7DQogICAgdGhpcy5mb3JtID0gbnVsbDsNCiAgICB0aGlzLmlmcmFtZSA9IG51bGw7DQogIH0NCg0KICBQb2xsaW5nLnByb3RvdHlwZS5kb0Nsb3NlLmNhbGwodGhpcyk7DQp9Ow0KDQovKioNCiAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KSlNPTlBQb2xsaW5nLnByb3RvdHlwZS5kb1BvbGwgPSBmdW5jdGlvbiAoKSB7DQogIHZhciBzZWxmID0gdGhpczsNCiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOw0KDQogIGlmICh0aGlzLnNjcmlwdCkgew0KICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpOw0KICAgIHRoaXMuc2NyaXB0ID0gbnVsbDsNCiAgfQ0KDQogIHNjcmlwdC5hc3luYyA9IHRydWU7DQogIHNjcmlwdC5zcmMgPSB0aGlzLnVyaSgpOw0KICBzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7DQogICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsIGVycm9yJywgZSk7DQogIH07DQoNCiAgdmFyIGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdOw0KICBpZiAoaW5zZXJ0QXQpIHsNCiAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTsNCiAgfSBlbHNlIHsNCiAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5KS5hcHBlbmRDaGlsZChzY3JpcHQpOw0KICB9DQogIHRoaXMuc2NyaXB0ID0gc2NyaXB0Ow0KDQogIHZhciBpc1VBZ2Vja28gPSAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOw0KDQogIGlmIChpc1VBZ2Vja28pIHsNCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgIHZhciBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTsNCiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTsNCiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lKTsNCiAgICB9LCAxMDApOw0KICB9DQp9Ow0KDQovKioNCiAqIFdyaXRlcyB3aXRoIGEgaGlkZGVuIGlmcmFtZS4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kDQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC4NCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCkpTT05QUG9sbGluZy5wcm90b3R5cGUuZG9Xcml0ZSA9IGZ1bmN0aW9uIChkYXRhLCBmbikgew0KICB2YXIgc2VsZiA9IHRoaXM7DQoNCiAgaWYgKCF0aGlzLmZvcm0pIHsNCiAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTsNCiAgICB2YXIgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RleHRhcmVhJyk7DQogICAgdmFyIGlkID0gdGhpcy5pZnJhbWVJZCA9ICdlaW9faWZyYW1lXycgKyB0aGlzLmluZGV4Ow0KICAgIHZhciBpZnJhbWU7DQoNCiAgICBmb3JtLmNsYXNzTmFtZSA9ICdzb2NrZXRpbyc7DQogICAgZm9ybS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7DQogICAgZm9ybS5zdHlsZS50b3AgPSAnLTEwMDBweCc7DQogICAgZm9ybS5zdHlsZS5sZWZ0ID0gJy0xMDAwcHgnOw0KICAgIGZvcm0udGFyZ2V0ID0gaWQ7DQogICAgZm9ybS5tZXRob2QgPSAnUE9TVCc7DQogICAgZm9ybS5zZXRBdHRyaWJ1dGUoJ2FjY2VwdC1jaGFyc2V0JywgJ3V0Zi04Jyk7DQogICAgYXJlYS5uYW1lID0gJ2QnOw0KICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7DQogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmb3JtKTsNCg0KICAgIHRoaXMuZm9ybSA9IGZvcm07DQogICAgdGhpcy5hcmVhID0gYXJlYTsNCiAgfQ0KDQogIHRoaXMuZm9ybS5hY3Rpb24gPSB0aGlzLnVyaSgpOw0KDQogIGZ1bmN0aW9uIGNvbXBsZXRlICgpIHsNCiAgICBpbml0SWZyYW1lKCk7DQogICAgZm4oKTsNCiAgfQ0KDQogIGZ1bmN0aW9uIGluaXRJZnJhbWUgKCkgew0KICAgIGlmIChzZWxmLmlmcmFtZSkgew0KICAgICAgdHJ5IHsNCiAgICAgICAgc2VsZi5mb3JtLnJlbW92ZUNoaWxkKHNlbGYuaWZyYW1lKTsNCiAgICAgIH0gY2F0Y2ggKGUpIHsNCiAgICAgICAgc2VsZi5vbkVycm9yKCdqc29ucCBwb2xsaW5nIGlmcmFtZSByZW1vdmFsIGVycm9yJywgZSk7DQogICAgICB9DQogICAgfQ0KDQogICAgdHJ5IHsNCiAgICAgIC8vIGllNiBkeW5hbWljIGlmcmFtZXMgd2l0aCB0YXJnZXQ9IiIgc3VwcG9ydCAodGhhbmtzIENocmlzIExhbWJhY2hlcikNCiAgICAgIHZhciBodG1sID0gJzxpZnJhbWUgc3JjPSJqYXZhc2NyaXB0OjAiIG5hbWU9IicgKyBzZWxmLmlmcmFtZUlkICsgJyI+JzsNCiAgICAgIGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaHRtbCk7DQogICAgfSBjYXRjaCAoZSkgew0KICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7DQogICAgICBpZnJhbWUubmFtZSA9IHNlbGYuaWZyYW1lSWQ7DQogICAgICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6MCc7DQogICAgfQ0KDQogICAgaWZyYW1lLmlkID0gc2VsZi5pZnJhbWVJZDsNCg0KICAgIHNlbGYuZm9ybS5hcHBlbmRDaGlsZChpZnJhbWUpOw0KICAgIHNlbGYuaWZyYW1lID0gaWZyYW1lOw0KICB9DQoNCiAgaW5pdElmcmFtZSgpOw0KDQogIC8vIGVzY2FwZSBcbiB0byBwcmV2ZW50IGl0IGZyb20gYmVpbmcgY29udmVydGVkIGludG8gXHJcbiBieSBzb21lIFVBcw0KICAvLyBkb3VibGUgZXNjYXBpbmcgaXMgcmVxdWlyZWQgZm9yIGVzY2FwZWQgbmV3IGxpbmVzIGJlY2F1c2UgdW5lc2NhcGluZyBvZiBuZXcgbGluZXMgY2FuIGJlIGRvbmUgc2FmZWx5IG9uIHNlcnZlci1zaWRlDQogIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCAnXFxcbicpOw0KICB0aGlzLmFyZWEudmFsdWUgPSBkYXRhLnJlcGxhY2Uock5ld2xpbmUsICdcXG4nKTsNCg0KICB0cnkgew0KICAgIHRoaXMuZm9ybS5zdWJtaXQoKTsNCiAgfSBjYXRjaCAoZSkge30NCg0KICBpZiAodGhpcy5pZnJhbWUuYXR0YWNoRXZlbnQpIHsNCiAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7DQogICAgICBpZiAoc2VsZi5pZnJhbWUucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykgew0KICAgICAgICBjb21wbGV0ZSgpOw0KICAgICAgfQ0KICAgIH07DQogIH0gZWxzZSB7DQogICAgdGhpcy5pZnJhbWUub25sb2FkID0gY29tcGxldGU7DQogIH0NCn07DQoNCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQ0KDQp9LHsiLi9wb2xsaW5nIjoxOSwiY29tcG9uZW50LWluaGVyaXQiOjl9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQooZnVuY3Rpb24gKGdsb2JhbCl7DQovKioNCiAqIE1vZHVsZSByZXF1aXJlbWVudHMuDQogKi8NCg0KdmFyIFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZSgneG1saHR0cHJlcXVlc3Qtc3NsJyk7DQp2YXIgUG9sbGluZyA9IHJlcXVpcmUoJy4vcG9sbGluZycpOw0KdmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpOw0KdmFyIGluaGVyaXQgPSByZXF1aXJlKCdjb21wb25lbnQtaW5oZXJpdCcpOw0KdmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nLXhocicpOw0KDQovKioNCiAqIE1vZHVsZSBleHBvcnRzLg0KICovDQoNCm1vZHVsZS5leHBvcnRzID0gWEhSOw0KbW9kdWxlLmV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7DQoNCi8qKg0KICogRW1wdHkgZnVuY3Rpb24NCiAqLw0KDQpmdW5jdGlvbiBlbXB0eSAoKSB7fQ0KDQovKioNCiAqIFhIUiBQb2xsaW5nIGNvbnN0cnVjdG9yLg0KICoNCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIFhIUiAob3B0cykgew0KICBQb2xsaW5nLmNhbGwodGhpcywgb3B0cyk7DQoNCiAgaWYgKGdsb2JhbC5sb2NhdGlvbikgew0KICAgIHZhciBpc1NTTCA9ICdodHRwczonID09PSBsb2NhdGlvbi5wcm90b2NvbDsNCiAgICB2YXIgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7DQoNCiAgICAvLyBzb21lIHVzZXIgYWdlbnRzIGhhdmUgZW1wdHkgYGxvY2F0aW9uLnBvcnRgDQogICAgaWYgKCFwb3J0KSB7DQogICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDsNCiAgICB9DQoNCiAgICB0aGlzLnhkID0gb3B0cy5ob3N0bmFtZSAhPT0gZ2xvYmFsLmxvY2F0aW9uLmhvc3RuYW1lIHx8DQogICAgICBwb3J0ICE9PSBvcHRzLnBvcnQ7DQogICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDsNCiAgfSBlbHNlIHsNCiAgICB0aGlzLmV4dHJhSGVhZGVycyA9IG9wdHMuZXh0cmFIZWFkZXJzOw0KICB9DQp9DQoNCi8qKg0KICogSW5oZXJpdHMgZnJvbSBQb2xsaW5nLg0KICovDQoNCmluaGVyaXQoWEhSLCBQb2xsaW5nKTsNCg0KLyoqDQogKiBYSFIgc3VwcG9ydHMgYmluYXJ5DQogKi8NCg0KWEhSLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7DQoNCi8qKg0KICogQ3JlYXRlcyBhIHJlcXVlc3QuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZA0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KWEhSLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gKG9wdHMpIHsNCiAgb3B0cyA9IG9wdHMgfHwge307DQogIG9wdHMudXJpID0gdGhpcy51cmkoKTsNCiAgb3B0cy54ZCA9IHRoaXMueGQ7DQogIG9wdHMueHMgPSB0aGlzLnhzOw0KICBvcHRzLmFnZW50ID0gdGhpcy5hZ2VudCB8fCBmYWxzZTsNCiAgb3B0cy5zdXBwb3J0c0JpbmFyeSA9IHRoaXMuc3VwcG9ydHNCaW5hcnk7DQogIG9wdHMuZW5hYmxlc1hEUiA9IHRoaXMuZW5hYmxlc1hEUjsNCg0KICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnQNCiAgb3B0cy5wZnggPSB0aGlzLnBmeDsNCiAgb3B0cy5rZXkgPSB0aGlzLmtleTsNCiAgb3B0cy5wYXNzcGhyYXNlID0gdGhpcy5wYXNzcGhyYXNlOw0KICBvcHRzLmNlcnQgPSB0aGlzLmNlcnQ7DQogIG9wdHMuY2EgPSB0aGlzLmNhOw0KICBvcHRzLmNpcGhlcnMgPSB0aGlzLmNpcGhlcnM7DQogIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gdGhpcy5yZWplY3RVbmF1dGhvcml6ZWQ7DQoNCiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnQNCiAgb3B0cy5leHRyYUhlYWRlcnMgPSB0aGlzLmV4dHJhSGVhZGVyczsNCg0KICByZXR1cm4gbmV3IFJlcXVlc3Qob3B0cyk7DQp9Ow0KDQovKioNCiAqIFNlbmRzIGRhdGEuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IGRhdGEgdG8gc2VuZC4NCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxlZCB1cG9uIGZsdXNoLg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KWEhSLnByb3RvdHlwZS5kb1dyaXRlID0gZnVuY3Rpb24gKGRhdGEsIGZuKSB7DQogIHZhciBpc0JpbmFyeSA9IHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJyAmJiBkYXRhICE9PSB1bmRlZmluZWQ7DQogIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6ICdQT1NUJywgZGF0YTogZGF0YSwgaXNCaW5hcnk6IGlzQmluYXJ5IH0pOw0KICB2YXIgc2VsZiA9IHRoaXM7DQogIHJlcS5vbignc3VjY2VzcycsIGZuKTsNCiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHsNCiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb3N0IGVycm9yJywgZXJyKTsNCiAgfSk7DQogIHRoaXMuc2VuZFhociA9IHJlcTsNCn07DQoNCi8qKg0KICogU3RhcnRzIGEgcG9sbCBjeWNsZS4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpYSFIucHJvdG90eXBlLmRvUG9sbCA9IGZ1bmN0aW9uICgpIHsNCiAgZGVidWcoJ3hociBwb2xsJyk7DQogIHZhciByZXEgPSB0aGlzLnJlcXVlc3QoKTsNCiAgdmFyIHNlbGYgPSB0aGlzOw0KICByZXEub24oJ2RhdGEnLCBmdW5jdGlvbiAoZGF0YSkgew0KICAgIHNlbGYub25EYXRhKGRhdGEpOw0KICB9KTsNCiAgcmVxLm9uKCdlcnJvcicsIGZ1bmN0aW9uIChlcnIpIHsNCiAgICBzZWxmLm9uRXJyb3IoJ3hociBwb2xsIGVycm9yJywgZXJyKTsNCiAgfSk7DQogIHRoaXMucG9sbFhociA9IHJlcTsNCn07DQoNCi8qKg0KICogUmVxdWVzdCBjb25zdHJ1Y3Rvcg0KICoNCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIFJlcXVlc3QgKG9wdHMpIHsNCiAgdGhpcy5tZXRob2QgPSBvcHRzLm1ldGhvZCB8fCAnR0VUJzsNCiAgdGhpcy51cmkgPSBvcHRzLnVyaTsNCiAgdGhpcy54ZCA9ICEhb3B0cy54ZDsNCiAgdGhpcy54cyA9ICEhb3B0cy54czsNCiAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jOw0KICB0aGlzLmRhdGEgPSB1bmRlZmluZWQgIT09IG9wdHMuZGF0YSA/IG9wdHMuZGF0YSA6IG51bGw7DQogIHRoaXMuYWdlbnQgPSBvcHRzLmFnZW50Ow0KICB0aGlzLmlzQmluYXJ5ID0gb3B0cy5pc0JpbmFyeTsNCiAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IG9wdHMuc3VwcG9ydHNCaW5hcnk7DQogIHRoaXMuZW5hYmxlc1hEUiA9IG9wdHMuZW5hYmxlc1hEUjsNCg0KICAvLyBTU0wgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnQNCiAgdGhpcy5wZnggPSBvcHRzLnBmeDsNCiAgdGhpcy5rZXkgPSBvcHRzLmtleTsNCiAgdGhpcy5wYXNzcGhyYXNlID0gb3B0cy5wYXNzcGhyYXNlOw0KICB0aGlzLmNlcnQgPSBvcHRzLmNlcnQ7DQogIHRoaXMuY2EgPSBvcHRzLmNhOw0KICB0aGlzLmNpcGhlcnMgPSBvcHRzLmNpcGhlcnM7DQogIHRoaXMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQ7DQoNCiAgLy8gb3RoZXIgb3B0aW9ucyBmb3IgTm9kZS5qcyBjbGllbnQNCiAgdGhpcy5leHRyYUhlYWRlcnMgPSBvcHRzLmV4dHJhSGVhZGVyczsNCg0KICB0aGlzLmNyZWF0ZSgpOw0KfQ0KDQovKioNCiAqIE1peCBpbiBgRW1pdHRlcmAuDQogKi8NCg0KRW1pdHRlcihSZXF1ZXN0LnByb3RvdHlwZSk7DQoNCi8qKg0KICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KUmVxdWVzdC5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkgew0KICB2YXIgb3B0cyA9IHsgYWdlbnQ6IHRoaXMuYWdlbnQsIHhkb21haW46IHRoaXMueGQsIHhzY2hlbWU6IHRoaXMueHMsIGVuYWJsZXNYRFI6IHRoaXMuZW5hYmxlc1hEUiB9Ow0KDQogIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudA0KICBvcHRzLnBmeCA9IHRoaXMucGZ4Ow0KICBvcHRzLmtleSA9IHRoaXMua2V5Ow0KICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7DQogIG9wdHMuY2VydCA9IHRoaXMuY2VydDsNCiAgb3B0cy5jYSA9IHRoaXMuY2E7DQogIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVyczsNCiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDsNCg0KICB2YXIgeGhyID0gdGhpcy54aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3Qob3B0cyk7DQogIHZhciBzZWxmID0gdGhpczsNCg0KICB0cnkgew0KICAgIGRlYnVnKCd4aHIgb3BlbiAlczogJXMnLCB0aGlzLm1ldGhvZCwgdGhpcy51cmkpOw0KICAgIHhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7DQogICAgdHJ5IHsNCiAgICAgIGlmICh0aGlzLmV4dHJhSGVhZGVycykgew0KICAgICAgICB4aHIuc2V0RGlzYWJsZUhlYWRlckNoZWNrKHRydWUpOw0KICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMuZXh0cmFIZWFkZXJzKSB7DQogICAgICAgICAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7DQogICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihpLCB0aGlzLmV4dHJhSGVhZGVyc1tpXSk7DQogICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICB9DQogICAgfSBjYXRjaCAoZSkge30NCiAgICBpZiAodGhpcy5zdXBwb3J0c0JpbmFyeSkgew0KICAgICAgLy8gVGhpcyBoYXMgdG8gYmUgZG9uZSBhZnRlciBvcGVuIGJlY2F1c2UgRmlyZWZveCBpcyBzdHVwaWQNCiAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTMyMTY5MDMvZ2V0LWJpbmFyeS1kYXRhLXdpdGgteG1saHR0cHJlcXVlc3QtaW4tYS1maXJlZm94LWV4dGVuc2lvbg0KICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdhcnJheWJ1ZmZlcic7DQogICAgfQ0KDQogICAgaWYgKCdQT1NUJyA9PT0gdGhpcy5tZXRob2QpIHsNCiAgICAgIHRyeSB7DQogICAgICAgIGlmICh0aGlzLmlzQmluYXJ5KSB7DQogICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpOw0KICAgICAgICB9DQogICAgICB9IGNhdGNoIChlKSB7fQ0KICAgIH0NCg0KICAgIC8vIGllNiBjaGVjaw0KICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpIHsNCiAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlOw0KICAgIH0NCg0KICAgIGlmICh0aGlzLmhhc1hEUigpKSB7DQogICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKCkgew0KICAgICAgICBzZWxmLm9uTG9hZCgpOw0KICAgICAgfTsNCiAgICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24gKCkgew0KICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnJlc3BvbnNlVGV4dCk7DQogICAgICB9Ow0KICAgIH0gZWxzZSB7DQogICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkgew0KICAgICAgICBpZiAoNCAhPT0geGhyLnJlYWR5U3RhdGUpIHJldHVybjsNCiAgICAgICAgaWYgKDIwMCA9PT0geGhyLnN0YXR1cyB8fCAxMjIzID09PSB4aHIuc3RhdHVzKSB7DQogICAgICAgICAgc2VsZi5vbkxvYWQoKTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGBlcnJvcmAgZXZlbnQgaGFuZGxlciB0aGF0J3MgdXNlci1zZXQNCiAgICAgICAgICAvLyBkb2VzIG5vdCB0aHJvdyBpbiB0aGUgc2FtZSB0aWNrIGFuZCBnZXRzIGNhdWdodCBoZXJlDQogICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICBzZWxmLm9uRXJyb3IoeGhyLnN0YXR1cyk7DQogICAgICAgICAgfSwgMCk7DQogICAgICAgIH0NCiAgICAgIH07DQogICAgfQ0KDQogICAgZGVidWcoJ3hociBkYXRhICVzJywgdGhpcy5kYXRhKTsNCiAgICB4aHIuc2VuZCh0aGlzLmRhdGEpOw0KICB9IGNhdGNoIChlKSB7DQogICAgLy8gTmVlZCB0byBkZWZlciBzaW5jZSAuY3JlYXRlKCkgaXMgY2FsbGVkIGRpcmVjdGx5IGZocm9tIHRoZSBjb25zdHJ1Y3Rvcg0KICAgIC8vIGFuZCB0aHVzIHRoZSAnZXJyb3InIGV2ZW50IGNhbiBvbmx5IGJlIG9ubHkgYm91bmQgKmFmdGVyKiB0aGlzIGV4Y2VwdGlvbg0KICAgIC8vIG9jY3Vycy4gIFRoZXJlZm9yZSwgYWxzbywgd2UgY2Fubm90IHRocm93IGhlcmUgYXQgYWxsLg0KICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgc2VsZi5vbkVycm9yKGUpOw0KICAgIH0sIDApOw0KICAgIHJldHVybjsNCiAgfQ0KDQogIGlmIChnbG9iYWwuZG9jdW1lbnQpIHsNCiAgICB0aGlzLmluZGV4ID0gUmVxdWVzdC5yZXF1ZXN0c0NvdW50Kys7DQogICAgUmVxdWVzdC5yZXF1ZXN0c1t0aGlzLmluZGV4XSA9IHRoaXM7DQogIH0NCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZXNwb25zZS4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpSZXF1ZXN0LnByb3RvdHlwZS5vblN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7DQogIHRoaXMuZW1pdCgnc3VjY2VzcycpOw0KICB0aGlzLmNsZWFudXAoKTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIGlmIHdlIGhhdmUgZGF0YS4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpSZXF1ZXN0LnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkgew0KICB0aGlzLmVtaXQoJ2RhdGEnLCBkYXRhKTsNCiAgdGhpcy5vblN1Y2Nlc3MoKTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gZXJyb3IuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KUmVxdWVzdC5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIChlcnIpIHsNCiAgdGhpcy5lbWl0KCdlcnJvcicsIGVycik7DQogIHRoaXMuY2xlYW51cCh0cnVlKTsNCn07DQoNCi8qKg0KICogQ2xlYW5zIHVwIGhvdXNlLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClJlcXVlc3QucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoZnJvbUVycm9yKSB7DQogIGlmICgndW5kZWZpbmVkJyA9PT0gdHlwZW9mIHRoaXMueGhyIHx8IG51bGwgPT09IHRoaXMueGhyKSB7DQogICAgcmV0dXJuOw0KICB9DQogIC8vIHhtbGh0dHByZXF1ZXN0DQogIGlmICh0aGlzLmhhc1hEUigpKSB7DQogICAgdGhpcy54aHIub25sb2FkID0gdGhpcy54aHIub25lcnJvciA9IGVtcHR5Ow0KICB9IGVsc2Ugew0KICAgIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGVtcHR5Ow0KICB9DQoNCiAgaWYgKGZyb21FcnJvcikgew0KICAgIHRyeSB7DQogICAgICB0aGlzLnhoci5hYm9ydCgpOw0KICAgIH0gY2F0Y2ggKGUpIHt9DQogIH0NCg0KICBpZiAoZ2xvYmFsLmRvY3VtZW50KSB7DQogICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07DQogIH0NCg0KICB0aGlzLnhociA9IG51bGw7DQp9Ow0KDQovKioNCiAqIENhbGxlZCB1cG9uIGxvYWQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KUmVxdWVzdC5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24gKCkgew0KICB2YXIgZGF0YTsNCiAgdHJ5IHsNCiAgICB2YXIgY29udGVudFR5cGU7DQogICAgdHJ5IHsNCiAgICAgIGNvbnRlbnRUeXBlID0gdGhpcy54aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ0NvbnRlbnQtVHlwZScpLnNwbGl0KCc7JylbMF07DQogICAgfSBjYXRjaCAoZSkge30NCiAgICBpZiAoY29udGVudFR5cGUgPT09ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nKSB7DQogICAgICBkYXRhID0gdGhpcy54aHIucmVzcG9uc2UgfHwgdGhpcy54aHIucmVzcG9uc2VUZXh0Ow0KICAgIH0gZWxzZSB7DQogICAgICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkpIHsNCiAgICAgICAgZGF0YSA9IHRoaXMueGhyLnJlc3BvbnNlVGV4dDsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgZGF0YSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkodGhpcy54aHIucmVzcG9uc2UpKTsNCiAgICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICAgIHZhciB1aThBcnIgPSBuZXcgVWludDhBcnJheSh0aGlzLnhoci5yZXNwb25zZSk7DQogICAgICAgICAgdmFyIGRhdGFBcnJheSA9IFtdOw0KICAgICAgICAgIGZvciAodmFyIGlkeCA9IDAsIGxlbmd0aCA9IHVpOEFyci5sZW5ndGg7IGlkeCA8IGxlbmd0aDsgaWR4KyspIHsNCiAgICAgICAgICAgIGRhdGFBcnJheS5wdXNoKHVpOEFycltpZHhdKTsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBkYXRhQXJyYXkpOw0KICAgICAgICB9DQogICAgICB9DQogICAgfQ0KICB9IGNhdGNoIChlKSB7DQogICAgdGhpcy5vbkVycm9yKGUpOw0KICB9DQogIGlmIChudWxsICE9IGRhdGEpIHsNCiAgICB0aGlzLm9uRGF0YShkYXRhKTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KUmVxdWVzdC5wcm90b3R5cGUuaGFzWERSID0gZnVuY3Rpb24gKCkgew0KICByZXR1cm4gJ3VuZGVmaW5lZCcgIT09IHR5cGVvZiBnbG9iYWwuWERvbWFpblJlcXVlc3QgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSOw0KfTsNCg0KLyoqDQogKiBBYm9ydHMgdGhlIHJlcXVlc3QuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpSZXF1ZXN0LnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uICgpIHsNCiAgdGhpcy5jbGVhbnVwKCk7DQp9Ow0KDQovKioNCiAqIEFib3J0cyBwZW5kaW5nIHJlcXVlc3RzIHdoZW4gdW5sb2FkaW5nIHRoZSB3aW5kb3cuIFRoaXMgaXMgbmVlZGVkIHRvIHByZXZlbnQNCiAqIG1lbW9yeSBsZWFrcyAoZS5nLiB3aGVuIHVzaW5nIElFKSBhbmQgdG8gZW5zdXJlIHRoYXQgbm8gc3B1cmlvdXMgZXJyb3IgaXMNCiAqIGVtaXR0ZWQuDQogKi8NCg0KaWYgKGdsb2JhbC5kb2N1bWVudCkgew0KICBSZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwOw0KICBSZXF1ZXN0LnJlcXVlc3RzID0ge307DQogIGlmIChnbG9iYWwuYXR0YWNoRXZlbnQpIHsNCiAgICBnbG9iYWwuYXR0YWNoRXZlbnQoJ29udW5sb2FkJywgdW5sb2FkSGFuZGxlcik7DQogIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHsNCiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgdW5sb2FkSGFuZGxlciwgZmFsc2UpOw0KICB9DQp9DQoNCmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIgKCkgew0KICBmb3IgKHZhciBpIGluIFJlcXVlc3QucmVxdWVzdHMpIHsNCiAgICBpZiAoUmVxdWVzdC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShpKSkgew0KICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpOw0KICAgIH0NCiAgfQ0KfQ0KDQp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkNCg0KfSx7Ii4vcG9sbGluZyI6MTksImNvbXBvbmVudC1lbWl0dGVyIjo4LCJjb21wb25lbnQtaW5oZXJpdCI6OSwiZGVidWciOjEwLCJ4bWxodHRwcmVxdWVzdC1zc2wiOjIxfV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KLyoqDQogKiBNb2R1bGUgZGVwZW5kZW5jaWVzLg0KICovDQoNCnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTsNCnZhciBwYXJzZXFzID0gcmVxdWlyZSgncGFyc2VxcycpOw0KdmFyIHBhcnNlciA9IHJlcXVpcmUoJ2VuZ2luZS5pby1wYXJzZXInKTsNCnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTsNCnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7DQp2YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OnBvbGxpbmcnKTsNCg0KLyoqDQogKiBNb2R1bGUgZXhwb3J0cy4NCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7DQoNCi8qKg0KICogSXMgWEhSMiBzdXBwb3J0ZWQ/DQogKi8NCg0KdmFyIGhhc1hIUjIgPSAoZnVuY3Rpb24gKCkgew0KICB2YXIgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdC1zc2wnKTsNCiAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh7IHhkb21haW46IGZhbHNlIH0pOw0KICByZXR1cm4gbnVsbCAhPSB4aHIucmVzcG9uc2VUeXBlOw0KfSkoKTsNCg0KLyoqDQogKiBQb2xsaW5nIGludGVyZmFjZS4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gb3B0cw0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KZnVuY3Rpb24gUG9sbGluZyAob3B0cykgew0KICB2YXIgZm9yY2VCYXNlNjQgPSAob3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0KTsNCiAgaWYgKCFoYXNYSFIyIHx8IGZvcmNlQmFzZTY0KSB7DQogICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IGZhbHNlOw0KICB9DQogIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpOw0KfQ0KDQovKioNCiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0Lg0KICovDQoNCmluaGVyaXQoUG9sbGluZywgVHJhbnNwb3J0KTsNCg0KLyoqDQogKiBUcmFuc3BvcnQgbmFtZS4NCiAqLw0KDQpQb2xsaW5nLnByb3RvdHlwZS5uYW1lID0gJ3BvbGxpbmcnOw0KDQovKioNCiAqIE9wZW5zIHRoZSBzb2NrZXQgKHRyaWdnZXJzIHBvbGxpbmcpLiBXZSB3cml0ZSBhIFBJTkcgbWVzc2FnZSB0byBkZXRlcm1pbmUNCiAqIHdoZW4gdGhlIHRyYW5zcG9ydCBpcyBvcGVuLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClBvbGxpbmcucHJvdG90eXBlLmRvT3BlbiA9IGZ1bmN0aW9uICgpIHsNCiAgdGhpcy5wb2xsKCk7DQp9Ow0KDQovKioNCiAqIFBhdXNlcyBwb2xsaW5nLg0KICoNCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHVwb24gYnVmZmVycyBhcmUgZmx1c2hlZCBhbmQgdHJhbnNwb3J0IGlzIHBhdXNlZA0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KUG9sbGluZy5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAob25QYXVzZSkgew0KICB2YXIgc2VsZiA9IHRoaXM7DQoNCiAgdGhpcy5yZWFkeVN0YXRlID0gJ3BhdXNpbmcnOw0KDQogIGZ1bmN0aW9uIHBhdXNlICgpIHsNCiAgICBkZWJ1ZygncGF1c2VkJyk7DQogICAgc2VsZi5yZWFkeVN0YXRlID0gJ3BhdXNlZCc7DQogICAgb25QYXVzZSgpOw0KICB9DQoNCiAgaWYgKHRoaXMucG9sbGluZyB8fCAhdGhpcy53cml0YWJsZSkgew0KICAgIHZhciB0b3RhbCA9IDA7DQoNCiAgICBpZiAodGhpcy5wb2xsaW5nKSB7DQogICAgICBkZWJ1Zygnd2UgYXJlIGN1cnJlbnRseSBwb2xsaW5nIC0gd2FpdGluZyB0byBwYXVzZScpOw0KICAgICAgdG90YWwrKzsNCiAgICAgIHRoaXMub25jZSgncG9sbENvbXBsZXRlJywgZnVuY3Rpb24gKCkgew0KICAgICAgICBkZWJ1ZygncHJlLXBhdXNlIHBvbGxpbmcgY29tcGxldGUnKTsNCiAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpOw0KICAgICAgfSk7DQogICAgfQ0KDQogICAgaWYgKCF0aGlzLndyaXRhYmxlKSB7DQogICAgICBkZWJ1Zygnd2UgYXJlIGN1cnJlbnRseSB3cml0aW5nIC0gd2FpdGluZyB0byBwYXVzZScpOw0KICAgICAgdG90YWwrKzsNCiAgICAgIHRoaXMub25jZSgnZHJhaW4nLCBmdW5jdGlvbiAoKSB7DQogICAgICAgIGRlYnVnKCdwcmUtcGF1c2Ugd3JpdGluZyBjb21wbGV0ZScpOw0KICAgICAgICAtLXRvdGFsIHx8IHBhdXNlKCk7DQogICAgICB9KTsNCiAgICB9DQogIH0gZWxzZSB7DQogICAgcGF1c2UoKTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBTdGFydHMgcG9sbGluZyBjeWNsZS4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNClBvbGxpbmcucHJvdG90eXBlLnBvbGwgPSBmdW5jdGlvbiAoKSB7DQogIGRlYnVnKCdwb2xsaW5nJyk7DQogIHRoaXMucG9sbGluZyA9IHRydWU7DQogIHRoaXMuZG9Qb2xsKCk7DQogIHRoaXMuZW1pdCgncG9sbCcpOw0KfTsNCg0KLyoqDQogKiBPdmVybG9hZHMgb25EYXRhIHRvIGRldGVjdCBwYXlsb2Fkcy4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpQb2xsaW5nLnByb3RvdHlwZS5vbkRhdGEgPSBmdW5jdGlvbiAoZGF0YSkgew0KICB2YXIgc2VsZiA9IHRoaXM7DQogIGRlYnVnKCdwb2xsaW5nIGdvdCBkYXRhICVzJywgZGF0YSk7DQogIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIChwYWNrZXQsIGluZGV4LCB0b3RhbCkgew0KICAgIC8vIGlmIGl0cyB0aGUgZmlyc3QgbWVzc2FnZSB3ZSBjb25zaWRlciB0aGUgdHJhbnNwb3J0IG9wZW4NCiAgICBpZiAoJ29wZW5pbmcnID09PSBzZWxmLnJlYWR5U3RhdGUpIHsNCiAgICAgIHNlbGYub25PcGVuKCk7DQogICAgfQ0KDQogICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0cw0KICAgIGlmICgnY2xvc2UnID09PSBwYWNrZXQudHlwZSkgew0KICAgICAgc2VsZi5vbkNsb3NlKCk7DQogICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLy8gb3RoZXJ3aXNlIGJ5cGFzcyBvbkRhdGEgYW5kIGhhbmRsZSB0aGUgbWVzc2FnZQ0KICAgIHNlbGYub25QYWNrZXQocGFja2V0KTsNCiAgfTsNCg0KICAvLyBkZWNvZGUgcGF5bG9hZA0KICBwYXJzZXIuZGVjb2RlUGF5bG9hZChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlLCBjYWxsYmFjayk7DQoNCiAgLy8gaWYgYW4gZXZlbnQgZGlkIG5vdCB0cmlnZ2VyIGNsb3NpbmcNCiAgaWYgKCdjbG9zZWQnICE9PSB0aGlzLnJlYWR5U3RhdGUpIHsNCiAgICAvLyBpZiB3ZSBnb3QgZGF0YSB3ZSdyZSBub3QgcG9sbGluZw0KICAgIHRoaXMucG9sbGluZyA9IGZhbHNlOw0KICAgIHRoaXMuZW1pdCgncG9sbENvbXBsZXRlJyk7DQoNCiAgICBpZiAoJ29wZW4nID09PSB0aGlzLnJlYWR5U3RhdGUpIHsNCiAgICAgIHRoaXMucG9sbCgpOw0KICAgIH0gZWxzZSB7DQogICAgICBkZWJ1ZygnaWdub3JpbmcgcG9sbCAtIHRyYW5zcG9ydCBzdGF0ZSAiJXMiJywgdGhpcy5yZWFkeVN0YXRlKTsNCiAgICB9DQogIH0NCn07DQoNCi8qKg0KICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KUG9sbGluZy5wcm90b3R5cGUuZG9DbG9zZSA9IGZ1bmN0aW9uICgpIHsNCiAgdmFyIHNlbGYgPSB0aGlzOw0KDQogIGZ1bmN0aW9uIGNsb3NlICgpIHsNCiAgICBkZWJ1Zygnd3JpdGluZyBjbG9zZSBwYWNrZXQnKTsNCiAgICBzZWxmLndyaXRlKFt7IHR5cGU6ICdjbG9zZScgfV0pOw0KICB9DQoNCiAgaWYgKCdvcGVuJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7DQogICAgZGVidWcoJ3RyYW5zcG9ydCBvcGVuIC0gY2xvc2luZycpOw0KICAgIGNsb3NlKCk7DQogIH0gZWxzZSB7DQogICAgLy8gaW4gY2FzZSB3ZSdyZSB0cnlpbmcgdG8gY2xvc2Ugd2hpbGUNCiAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KQ0KICAgIGRlYnVnKCd0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2UnKTsNCiAgICB0aGlzLm9uY2UoJ29wZW4nLCBjbG9zZSk7DQogIH0NCn07DQoNCi8qKg0KICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLg0KICoNCiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgcGFja2V0cw0KICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2sNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClBvbGxpbmcucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKHBhY2tldHMpIHsNCiAgdmFyIHNlbGYgPSB0aGlzOw0KICB0aGlzLndyaXRhYmxlID0gZmFsc2U7DQogIHZhciBjYWxsYmFja2ZuID0gZnVuY3Rpb24gKCkgew0KICAgIHNlbGYud3JpdGFibGUgPSB0cnVlOw0KICAgIHNlbGYuZW1pdCgnZHJhaW4nKTsNCiAgfTsNCg0KICBwYXJzZXIuZW5jb2RlUGF5bG9hZChwYWNrZXRzLCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBmdW5jdGlvbiAoZGF0YSkgew0KICAgIHNlbGYuZG9Xcml0ZShkYXRhLCBjYWxsYmFja2ZuKTsNCiAgfSk7DQp9Ow0KDQovKioNCiAqIEdlbmVyYXRlcyB1cmkgZm9yIGNvbm5lY3Rpb24uDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KUG9sbGluZy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkgew0KICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9Ow0KICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnaHR0cHMnIDogJ2h0dHAnOw0KICB2YXIgcG9ydCA9ICcnOw0KDQogIC8vIGNhY2hlIGJ1c3RpbmcgaXMgZm9yY2VkDQogIGlmIChmYWxzZSAhPT0gdGhpcy50aW1lc3RhbXBSZXF1ZXN0cykgew0KICAgIHF1ZXJ5W3RoaXMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTsNCiAgfQ0KDQogIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSAmJiAhcXVlcnkuc2lkKSB7DQogICAgcXVlcnkuYjY0ID0gMTsNCiAgfQ0KDQogIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpOw0KDQogIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hDQogIGlmICh0aGlzLnBvcnQgJiYgKCgnaHR0cHMnID09PSBzY2hlbWEgJiYgdGhpcy5wb3J0ICE9PSA0NDMpIHx8DQogICAgICgnaHR0cCcgPT09IHNjaGVtYSAmJiB0aGlzLnBvcnQgIT09IDgwKSkpIHsNCiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0Ow0KICB9DQoNCiAgLy8gcHJlcGVuZCA/IHRvIHF1ZXJ5DQogIGlmIChxdWVyeS5sZW5ndGgpIHsNCiAgICBxdWVyeSA9ICc/JyArIHF1ZXJ5Ow0KICB9DQoNCiAgdmFyIGlwdjYgPSB0aGlzLmhvc3RuYW1lLmluZGV4T2YoJzonKSAhPT0gLTE7DQogIHJldHVybiBzY2hlbWEgKyAnOi8vJyArIChpcHY2ID8gJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyA6IHRoaXMuaG9zdG5hbWUpICsgcG9ydCArIHRoaXMucGF0aCArIHF1ZXJ5Ow0KfTsNCg0KfSx7Ii4uL3RyYW5zcG9ydCI6MTUsImNvbXBvbmVudC1pbmhlcml0Ijo5LCJkZWJ1ZyI6MTAsImVuZ2luZS5pby1wYXJzZXIiOjIyLCJwYXJzZXFzIjozMSwieG1saHR0cHJlcXVlc3Qtc3NsIjoyMSwieWVhc3QiOjQ1fV0sMjA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KKGZ1bmN0aW9uIChnbG9iYWwpew0KLyoqDQogKiBNb2R1bGUgZGVwZW5kZW5jaWVzLg0KICovDQoNCnZhciBUcmFuc3BvcnQgPSByZXF1aXJlKCcuLi90cmFuc3BvcnQnKTsNCnZhciBwYXJzZXIgPSByZXF1aXJlKCdlbmdpbmUuaW8tcGFyc2VyJyk7DQp2YXIgcGFyc2VxcyA9IHJlcXVpcmUoJ3BhcnNlcXMnKTsNCnZhciBpbmhlcml0ID0gcmVxdWlyZSgnY29tcG9uZW50LWluaGVyaXQnKTsNCnZhciB5ZWFzdCA9IHJlcXVpcmUoJ3llYXN0Jyk7DQp2YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdlbmdpbmUuaW8tY2xpZW50OndlYnNvY2tldCcpOw0KdmFyIEJyb3dzZXJXZWJTb2NrZXQgPSBnbG9iYWwuV2ViU29ja2V0IHx8IGdsb2JhbC5Nb3pXZWJTb2NrZXQ7DQoNCi8qKg0KICogR2V0IGVpdGhlciB0aGUgYFdlYlNvY2tldGAgb3IgYE1veldlYlNvY2tldGAgZ2xvYmFscw0KICogaW4gdGhlIGJyb3dzZXIgb3IgdHJ5IHRvIHJlc29sdmUgV2ViU29ja2V0LWNvbXBhdGlibGUNCiAqIGludGVyZmFjZSBleHBvc2VkIGJ5IGB3c2AgZm9yIE5vZGUtbGlrZSBlbnZpcm9ubWVudC4NCiAqLw0KDQp2YXIgV2ViU29ja2V0ID0gQnJvd3NlcldlYlNvY2tldDsNCmlmICghV2ViU29ja2V0ICYmIHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7DQogIHRyeSB7DQogICAgV2ViU29ja2V0ID0gcmVxdWlyZSgnd3MnKTsNCiAgfSBjYXRjaCAoZSkgeyB9DQp9DQoNCi8qKg0KICogTW9kdWxlIGV4cG9ydHMuDQogKi8NCg0KbW9kdWxlLmV4cG9ydHMgPSBXUzsNCg0KLyoqDQogKiBXZWJTb2NrZXQgdHJhbnNwb3J0IGNvbnN0cnVjdG9yLg0KICoNCiAqIEBhcGkge09iamVjdH0gY29ubmVjdGlvbiBvcHRpb25zDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIFdTIChvcHRzKSB7DQogIHZhciBmb3JjZUJhc2U2NCA9IChvcHRzICYmIG9wdHMuZm9yY2VCYXNlNjQpOw0KICBpZiAoZm9yY2VCYXNlNjQpIHsNCiAgICB0aGlzLnN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7DQogIH0NCiAgdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZSA9IG9wdHMucGVyTWVzc2FnZURlZmxhdGU7DQogIFRyYW5zcG9ydC5jYWxsKHRoaXMsIG9wdHMpOw0KfQ0KDQovKioNCiAqIEluaGVyaXRzIGZyb20gVHJhbnNwb3J0Lg0KICovDQoNCmluaGVyaXQoV1MsIFRyYW5zcG9ydCk7DQoNCi8qKg0KICogVHJhbnNwb3J0IG5hbWUuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpXUy5wcm90b3R5cGUubmFtZSA9ICd3ZWJzb2NrZXQnOw0KDQovKg0KICogV2ViU29ja2V0cyBzdXBwb3J0IGJpbmFyeQ0KICovDQoNCldTLnByb3RvdHlwZS5zdXBwb3J0c0JpbmFyeSA9IHRydWU7DQoNCi8qKg0KICogT3BlbnMgc29ja2V0Lg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCldTLnByb3RvdHlwZS5kb09wZW4gPSBmdW5jdGlvbiAoKSB7DQogIGlmICghdGhpcy5jaGVjaygpKSB7DQogICAgLy8gbGV0IHByb2JlIHRpbWVvdXQNCiAgICByZXR1cm47DQogIH0NCg0KICB2YXIgdXJpID0gdGhpcy51cmkoKTsNCiAgdmFyIHByb3RvY29scyA9IHZvaWQgKDApOw0KICB2YXIgb3B0cyA9IHsNCiAgICBhZ2VudDogdGhpcy5hZ2VudCwNCiAgICBwZXJNZXNzYWdlRGVmbGF0ZTogdGhpcy5wZXJNZXNzYWdlRGVmbGF0ZQ0KICB9Ow0KDQogIC8vIFNTTCBvcHRpb25zIGZvciBOb2RlLmpzIGNsaWVudA0KICBvcHRzLnBmeCA9IHRoaXMucGZ4Ow0KICBvcHRzLmtleSA9IHRoaXMua2V5Ow0KICBvcHRzLnBhc3NwaHJhc2UgPSB0aGlzLnBhc3NwaHJhc2U7DQogIG9wdHMuY2VydCA9IHRoaXMuY2VydDsNCiAgb3B0cy5jYSA9IHRoaXMuY2E7DQogIG9wdHMuY2lwaGVycyA9IHRoaXMuY2lwaGVyczsNCiAgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgPSB0aGlzLnJlamVjdFVuYXV0aG9yaXplZDsNCiAgaWYgKHRoaXMuZXh0cmFIZWFkZXJzKSB7DQogICAgb3B0cy5oZWFkZXJzID0gdGhpcy5leHRyYUhlYWRlcnM7DQogIH0NCg0KICB0cnkgew0KICAgIHRoaXMud3MgPSBCcm93c2VyV2ViU29ja2V0ID8gbmV3IFdlYlNvY2tldCh1cmkpIDogbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scywgb3B0cyk7DQogIH0gY2F0Y2ggKGVycikgew0KICAgIHJldHVybiB0aGlzLmVtaXQoJ2Vycm9yJywgZXJyKTsNCiAgfQ0KDQogIGlmICh0aGlzLndzLmJpbmFyeVR5cGUgPT09IHVuZGVmaW5lZCkgew0KICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBmYWxzZTsNCiAgfQ0KDQogIGlmICh0aGlzLndzLnN1cHBvcnRzICYmIHRoaXMud3Muc3VwcG9ydHMuYmluYXJ5KSB7DQogICAgdGhpcy5zdXBwb3J0c0JpbmFyeSA9IHRydWU7DQogICAgdGhpcy53cy5iaW5hcnlUeXBlID0gJ25vZGVidWZmZXInOw0KICB9IGVsc2Ugew0KICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7DQogIH0NCg0KICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7DQp9Ow0KDQovKioNCiAqIEFkZHMgZXZlbnQgbGlzdGVuZXJzIHRvIHRoZSBzb2NrZXQNCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpXUy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7DQogIHZhciBzZWxmID0gdGhpczsNCg0KICB0aGlzLndzLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHsNCiAgICBzZWxmLm9uT3BlbigpOw0KICB9Ow0KICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7DQogICAgc2VsZi5vbkNsb3NlKCk7DQogIH07DQogIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2KSB7DQogICAgc2VsZi5vbkRhdGEoZXYuZGF0YSk7DQogIH07DQogIHRoaXMud3Mub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7DQogICAgc2VsZi5vbkVycm9yKCd3ZWJzb2NrZXQgZXJyb3InLCBlKTsNCiAgfTsNCn07DQoNCi8qKg0KICogT3ZlcnJpZGUgYG9uRGF0YWAgdG8gdXNlIGEgdGltZXIgb24gaU9TLg0KICogU2VlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9tbG91Z2hyYW4vMjA1MjAwNg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJg0KICAvaVBhZHxpUGhvbmV8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHsNCiAgV1MucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7DQogICAgdmFyIHNlbGYgPSB0aGlzOw0KICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkRhdGEuY2FsbChzZWxmLCBkYXRhKTsNCiAgICB9LCAwKTsNCiAgfTsNCn0NCg0KLyoqDQogKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuDQogKg0KICogQHBhcmFtIHtBcnJheX0gYXJyYXkgb2YgcGFja2V0cy4NCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCldTLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIChwYWNrZXRzKSB7DQogIHZhciBzZWxmID0gdGhpczsNCiAgdGhpcy53cml0YWJsZSA9IGZhbHNlOw0KDQogIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nDQogIC8vIG5vIG5lZWQgZm9yIGVuY29kZVBheWxvYWQNCiAgdmFyIHRvdGFsID0gcGFja2V0cy5sZW5ndGg7DQogIGZvciAodmFyIGkgPSAwLCBsID0gdG90YWw7IGkgPCBsOyBpKyspIHsNCiAgICAoZnVuY3Rpb24gKHBhY2tldCkgew0KICAgICAgcGFyc2VyLmVuY29kZVBhY2tldChwYWNrZXQsIHNlbGYuc3VwcG9ydHNCaW5hcnksIGZ1bmN0aW9uIChkYXRhKSB7DQogICAgICAgIGlmICghQnJvd3NlcldlYlNvY2tldCkgew0KICAgICAgICAgIC8vIGFsd2F5cyBjcmVhdGUgYSBuZXcgb2JqZWN0IChHSC00MzcpDQogICAgICAgICAgdmFyIG9wdHMgPSB7fTsNCiAgICAgICAgICBpZiAocGFja2V0Lm9wdGlvbnMpIHsNCiAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBwYWNrZXQub3B0aW9ucy5jb21wcmVzczsNCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZiAoc2VsZi5wZXJNZXNzYWdlRGVmbGF0ZSkgew0KICAgICAgICAgICAgdmFyIGxlbiA9ICdzdHJpbmcnID09PSB0eXBlb2YgZGF0YSA/IGdsb2JhbC5CdWZmZXIuYnl0ZUxlbmd0aChkYXRhKSA6IGRhdGEubGVuZ3RoOw0KICAgICAgICAgICAgaWYgKGxlbiA8IHNlbGYucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7DQogICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0DQogICAgICAgIC8vIGhhdmUgYSBjaGFuY2Ugb2YgaW5mb3JtaW5nIHVzIGFib3V0IGl0IHlldCwgaW4gdGhhdCBjYXNlIHNlbmQgd2lsbA0KICAgICAgICAvLyB0aHJvdyBhbiBlcnJvcg0KICAgICAgICB0cnkgew0KICAgICAgICAgIGlmIChCcm93c2VyV2ViU29ja2V0KSB7DQogICAgICAgICAgICAvLyBUeXBlRXJyb3IgaXMgdGhyb3duIHdoZW4gcGFzc2luZyB0aGUgc2Vjb25kIGFyZ3VtZW50IG9uIFNhZmFyaQ0KICAgICAgICAgICAgc2VsZi53cy5zZW5kKGRhdGEpOw0KICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBzZWxmLndzLnNlbmQoZGF0YSwgb3B0cyk7DQogICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgICAgZGVidWcoJ3dlYnNvY2tldCBjbG9zZWQgYmVmb3JlIG9uY2xvc2UgZXZlbnQnKTsNCiAgICAgICAgfQ0KDQogICAgICAgIC0tdG90YWwgfHwgZG9uZSgpOw0KICAgICAgfSk7DQogICAgfSkocGFja2V0c1tpXSk7DQogIH0NCg0KICBmdW5jdGlvbiBkb25lICgpIHsNCiAgICBzZWxmLmVtaXQoJ2ZsdXNoJyk7DQoNCiAgICAvLyBmYWtlIGRyYWluDQogICAgLy8gZGVmZXIgdG8gbmV4dCB0aWNrIHRvIGFsbG93IFNvY2tldCB0byBjbGVhciB3cml0ZUJ1ZmZlcg0KICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgew0KICAgICAgc2VsZi53cml0YWJsZSA9IHRydWU7DQogICAgICBzZWxmLmVtaXQoJ2RyYWluJyk7DQogICAgfSwgMCk7DQogIH0NCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gY2xvc2UNCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpXUy5wcm90b3R5cGUub25DbG9zZSA9IGZ1bmN0aW9uICgpIHsNCiAgVHJhbnNwb3J0LnByb3RvdHlwZS5vbkNsb3NlLmNhbGwodGhpcyk7DQp9Ow0KDQovKioNCiAqIENsb3NlcyBzb2NrZXQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KV1MucHJvdG90eXBlLmRvQ2xvc2UgPSBmdW5jdGlvbiAoKSB7DQogIGlmICh0eXBlb2YgdGhpcy53cyAhPT0gJ3VuZGVmaW5lZCcpIHsNCiAgICB0aGlzLndzLmNsb3NlKCk7DQogIH0NCn07DQoNCi8qKg0KICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpXUy5wcm90b3R5cGUudXJpID0gZnVuY3Rpb24gKCkgew0KICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9Ow0KICB2YXIgc2NoZW1hID0gdGhpcy5zZWN1cmUgPyAnd3NzJyA6ICd3cyc7DQogIHZhciBwb3J0ID0gJyc7DQoNCiAgLy8gYXZvaWQgcG9ydCBpZiBkZWZhdWx0IGZvciBzY2hlbWENCiAgaWYgKHRoaXMucG9ydCAmJiAoKCd3c3MnID09PSBzY2hlbWEgJiYgdGhpcy5wb3J0ICE9PSA0NDMpIHx8DQogICAgKCd3cycgPT09IHNjaGVtYSAmJiB0aGlzLnBvcnQgIT09IDgwKSkpIHsNCiAgICBwb3J0ID0gJzonICsgdGhpcy5wb3J0Ow0KICB9DQoNCiAgLy8gYXBwZW5kIHRpbWVzdGFtcCB0byBVUkkNCiAgaWYgKHRoaXMudGltZXN0YW1wUmVxdWVzdHMpIHsNCiAgICBxdWVyeVt0aGlzLnRpbWVzdGFtcFBhcmFtXSA9IHllYXN0KCk7DQogIH0NCg0KICAvLyBjb21tdW5pY2F0ZSBiaW5hcnkgc3VwcG9ydCBjYXBhYmlsaXRpZXMNCiAgaWYgKCF0aGlzLnN1cHBvcnRzQmluYXJ5KSB7DQogICAgcXVlcnkuYjY0ID0gMTsNCiAgfQ0KDQogIHF1ZXJ5ID0gcGFyc2Vxcy5lbmNvZGUocXVlcnkpOw0KDQogIC8vIHByZXBlbmQgPyB0byBxdWVyeQ0KICBpZiAocXVlcnkubGVuZ3RoKSB7DQogICAgcXVlcnkgPSAnPycgKyBxdWVyeTsNCiAgfQ0KDQogIHZhciBpcHY2ID0gdGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgIT09IC0xOw0KICByZXR1cm4gc2NoZW1hICsgJzovLycgKyAoaXB2NiA/ICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScgOiB0aGlzLmhvc3RuYW1lKSArIHBvcnQgKyB0aGlzLnBhdGggKyBxdWVyeTsNCn07DQoNCi8qKg0KICogRmVhdHVyZSBkZXRlY3Rpb24gZm9yIFdlYlNvY2tldC4NCiAqDQogKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS4NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KV1MucHJvdG90eXBlLmNoZWNrID0gZnVuY3Rpb24gKCkgew0KICByZXR1cm4gISFXZWJTb2NrZXQgJiYgISgnX19pbml0aWFsaXplJyBpbiBXZWJTb2NrZXQgJiYgdGhpcy5uYW1lID09PSBXUy5wcm90b3R5cGUubmFtZSk7DQp9Ow0KDQp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkNCg0KfSx7Ii4uL3RyYW5zcG9ydCI6MTUsImNvbXBvbmVudC1pbmhlcml0Ijo5LCJkZWJ1ZyI6MTAsImVuZ2luZS5pby1wYXJzZXIiOjIyLCJwYXJzZXFzIjozMSwid3MiOjYsInllYXN0Ijo0NX1dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCi8vIGJyb3dzZXIgc2hpbSBmb3IgeG1saHR0cHJlcXVlc3QgbW9kdWxlDQoNCi8vIEluZGljYXRlIHRvIGVzbGludCB0aGF0IEFjdGl2ZVhPYmplY3QgaXMgZ2xvYmFsDQovKiBnbG9iYWwgQWN0aXZlWE9iamVjdCAqLw0KDQp2YXIgaGFzQ09SUyA9IHJlcXVpcmUoJ2hhcy1jb3JzJyk7DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdHMpIHsNCiAgdmFyIHhkb21haW4gPSBvcHRzLnhkb21haW47DQoNCiAgLy8gc2NoZW1lIG11c3QgYmUgc2FtZSB3aGVuIHVzaWduIFhEb21haW5SZXF1ZXN0DQogIC8vIGh0dHA6Ly9ibG9ncy5tc2RuLmNvbS9iL2llaW50ZXJuYWxzL2FyY2hpdmUvMjAxMC8wNS8xMy94ZG9tYWlucmVxdWVzdC1yZXN0cmljdGlvbnMtbGltaXRhdGlvbnMtYW5kLXdvcmthcm91bmRzLmFzcHgNCiAgdmFyIHhzY2hlbWUgPSBvcHRzLnhzY2hlbWU7DQoNCiAgLy8gWERvbWFpblJlcXVlc3QgaGFzIGEgZmxvdyBvZiBub3Qgc2VuZGluZyBjb29raWUsIHRoZXJlZm9yZSBpdCBzaG91bGQgYmUgZGlzYWJsZWQgYXMgYSBkZWZhdWx0Lg0KICAvLyBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9lbmdpbmUuaW8tY2xpZW50L3B1bGwvMjE3DQogIHZhciBlbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSOw0KDQogIC8vIFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBvbiBJRQ0KICB0cnkgew0KICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICYmICgheGRvbWFpbiB8fCBoYXNDT1JTKSkgew0KICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpOw0KICAgIH0NCiAgfSBjYXRjaCAoZSkgeyB9DQoNCiAgLy8gVXNlIFhEb21haW5SZXF1ZXN0IGZvciBJRTggaWYgZW5hYmxlc1hEUiBpcyB0cnVlDQogIC8vIGJlY2F1c2UgbG9hZGluZyBiYXIga2VlcHMgZmxhc2hpbmcgd2hlbiB1c2luZyBqc29ucC1wb2xsaW5nDQogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS95dWppb3Nha2Evc29ja2UuaW8taWU4LWxvYWRpbmctZXhhbXBsZQ0KICB0cnkgew0KICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICYmICF4c2NoZW1lICYmIGVuYWJsZXNYRFIpIHsNCiAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKTsNCiAgICB9DQogIH0gY2F0Y2ggKGUpIHsgfQ0KDQogIGlmICgheGRvbWFpbikgew0KICAgIHRyeSB7DQogICAgICByZXR1cm4gbmV3IEFjdGl2ZVhPYmplY3QoJ01pY3Jvc29mdC5YTUxIVFRQJyk7DQogICAgfSBjYXRjaCAoZSkgeyB9DQogIH0NCn07DQoNCn0seyJoYXMtY29ycyI6MjZ9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQooZnVuY3Rpb24gKGdsb2JhbCl7DQovKioNCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuDQogKi8NCg0KdmFyIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTsNCnZhciBoYXNCaW5hcnkgPSByZXF1aXJlKCdoYXMtYmluYXJ5Jyk7DQp2YXIgc2xpY2VCdWZmZXIgPSByZXF1aXJlKCdhcnJheWJ1ZmZlci5zbGljZScpOw0KdmFyIGFmdGVyID0gcmVxdWlyZSgnYWZ0ZXInKTsNCnZhciB1dGY4ID0gcmVxdWlyZSgnd3RmLTgnKTsNCg0KdmFyIGJhc2U2NGVuY29kZXI7DQppZiAoZ2xvYmFsLkFycmF5QnVmZmVyKSB7DQogIGJhc2U2NGVuY29kZXIgPSByZXF1aXJlKCdiYXNlNjQtYXJyYXlidWZmZXInKTsNCn0NCg0KLyoqDQogKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBhbiBhbmRyb2lkIGJyb3dzZXIuIFRoYXQgcmVxdWlyZXMgdXMgdG8gdXNlDQogKiBBcnJheUJ1ZmZlciB3aXRoIHBvbGxpbmcgdHJhbnNwb3J0cy4uLg0KICoNCiAqIGh0dHA6Ly9naGluZGEubmV0L2pwZWctYmxvYi1hamF4LWFuZHJvaWQvDQogKi8NCg0KdmFyIGlzQW5kcm9pZCA9IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIC9BbmRyb2lkL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsNCg0KLyoqDQogKiBDaGVjayBpZiB3ZSBhcmUgcnVubmluZyBpbiBQaGFudG9tSlMuDQogKiBVcGxvYWRpbmcgYSBCbG9iIHdpdGggUGhhbnRvbUpTIGRvZXMgbm90IHdvcmsgY29ycmVjdGx5LCBhcyByZXBvcnRlZCBoZXJlOg0KICogaHR0cHM6Ly9naXRodWIuY29tL2FyaXlhL3BoYW50b21qcy9pc3N1ZXMvMTEzOTUNCiAqIEB0eXBlIGJvb2xlYW4NCiAqLw0KdmFyIGlzUGhhbnRvbUpTID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgL1BoYW50b21KUy9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7DQoNCi8qKg0KICogV2hlbiB0cnVlLCBhdm9pZHMgdXNpbmcgQmxvYnMgdG8gZW5jb2RlIHBheWxvYWRzLg0KICogQHR5cGUgYm9vbGVhbg0KICovDQp2YXIgZG9udFNlbmRCbG9icyA9IGlzQW5kcm9pZCB8fCBpc1BoYW50b21KUzsNCg0KLyoqDQogKiBDdXJyZW50IHByb3RvY29sIHZlcnNpb24uDQogKi8NCg0KZXhwb3J0cy5wcm90b2NvbCA9IDM7DQoNCi8qKg0KICogUGFja2V0IHR5cGVzLg0KICovDQoNCnZhciBwYWNrZXRzID0gZXhwb3J0cy5wYWNrZXRzID0gew0KICAgIG9wZW46ICAgICAwICAgIC8vIG5vbi13cw0KICAsIGNsb3NlOiAgICAxICAgIC8vIG5vbi13cw0KICAsIHBpbmc6ICAgICAyDQogICwgcG9uZzogICAgIDMNCiAgLCBtZXNzYWdlOiAgNA0KICAsIHVwZ3JhZGU6ICA1DQogICwgbm9vcDogICAgIDYNCn07DQoNCnZhciBwYWNrZXRzbGlzdCA9IGtleXMocGFja2V0cyk7DQoNCi8qKg0KICogUHJlbWFkZSBlcnJvciBwYWNrZXQuDQogKi8NCg0KdmFyIGVyciA9IHsgdHlwZTogJ2Vycm9yJywgZGF0YTogJ3BhcnNlciBlcnJvcicgfTsNCg0KLyoqDQogKiBDcmVhdGUgYSBibG9iIGFwaSBldmVuIGZvciBibG9iIGJ1aWxkZXIgd2hlbiB2ZW5kb3IgcHJlZml4ZXMgZXhpc3QNCiAqLw0KDQp2YXIgQmxvYiA9IHJlcXVpcmUoJ2Jsb2InKTsNCg0KLyoqDQogKiBFbmNvZGVzIGEgcGFja2V0Lg0KICoNCiAqICAgICA8cGFja2V0IHR5cGUgaWQ+IFsgPGRhdGE+IF0NCiAqDQogKiBFeGFtcGxlOg0KICoNCiAqICAgICA1aGVsbG8gd29ybGQNCiAqICAgICAzDQogKiAgICAgNA0KICoNCiAqIEJpbmFyeSBpcyBlbmNvZGVkIGluIGFuIGlkZW50aWNhbCBwcmluY2lwbGUNCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpleHBvcnRzLmVuY29kZVBhY2tldCA9IGZ1bmN0aW9uIChwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCB1dGY4ZW5jb2RlLCBjYWxsYmFjaykgew0KICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2Ygc3VwcG9ydHNCaW5hcnkpIHsNCiAgICBjYWxsYmFjayA9IHN1cHBvcnRzQmluYXJ5Ow0KICAgIHN1cHBvcnRzQmluYXJ5ID0gZmFsc2U7DQogIH0NCg0KICBpZiAoJ2Z1bmN0aW9uJyA9PSB0eXBlb2YgdXRmOGVuY29kZSkgew0KICAgIGNhbGxiYWNrID0gdXRmOGVuY29kZTsNCiAgICB1dGY4ZW5jb2RlID0gbnVsbDsNCiAgfQ0KDQogIHZhciBkYXRhID0gKHBhY2tldC5kYXRhID09PSB1bmRlZmluZWQpDQogICAgPyB1bmRlZmluZWQNCiAgICA6IHBhY2tldC5kYXRhLmJ1ZmZlciB8fCBwYWNrZXQuZGF0YTsNCg0KICBpZiAoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgew0KICAgIHJldHVybiBlbmNvZGVBcnJheUJ1ZmZlcihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7DQogIH0gZWxzZSBpZiAoQmxvYiAmJiBkYXRhIGluc3RhbmNlb2YgZ2xvYmFsLkJsb2IpIHsNCiAgICByZXR1cm4gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjayk7DQogIH0NCg0KICAvLyBtaWdodCBiZSBhbiBvYmplY3Qgd2l0aCB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogZGF0YUFzQmFzZTY0U3RyaW5nIH0NCiAgaWYgKGRhdGEgJiYgZGF0YS5iYXNlNjQpIHsNCiAgICByZXR1cm4gZW5jb2RlQmFzZTY0T2JqZWN0KHBhY2tldCwgY2FsbGJhY2spOw0KICB9DQoNCiAgLy8gU2VuZGluZyBkYXRhIGFzIGEgdXRmLTggc3RyaW5nDQogIHZhciBlbmNvZGVkID0gcGFja2V0c1twYWNrZXQudHlwZV07DQoNCiAgLy8gZGF0YSBmcmFnbWVudCBpcyBvcHRpb25hbA0KICBpZiAodW5kZWZpbmVkICE9PSBwYWNrZXQuZGF0YSkgew0KICAgIGVuY29kZWQgKz0gdXRmOGVuY29kZSA/IHV0ZjguZW5jb2RlKFN0cmluZyhwYWNrZXQuZGF0YSkpIDogU3RyaW5nKHBhY2tldC5kYXRhKTsNCiAgfQ0KDQogIHJldHVybiBjYWxsYmFjaygnJyArIGVuY29kZWQpOw0KDQp9Ow0KDQpmdW5jdGlvbiBlbmNvZGVCYXNlNjRPYmplY3QocGFja2V0LCBjYWxsYmFjaykgew0KICAvLyBwYWNrZXQgZGF0YSBpcyBhbiBvYmplY3QgeyBiYXNlNjQ6IHRydWUsIGRhdGE6IGRhdGFBc0Jhc2U2NFN0cmluZyB9DQogIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXSArIHBhY2tldC5kYXRhLmRhdGE7DQogIHJldHVybiBjYWxsYmFjayhtZXNzYWdlKTsNCn0NCg0KLyoqDQogKiBFbmNvZGUgcGFja2V0IGhlbHBlcnMgZm9yIGJpbmFyeSB0eXBlcw0KICovDQoNCmZ1bmN0aW9uIGVuY29kZUFycmF5QnVmZmVyKHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7DQogIGlmICghc3VwcG9ydHNCaW5hcnkpIHsNCiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQocGFja2V0LCBjYWxsYmFjayk7DQogIH0NCg0KICB2YXIgZGF0YSA9IHBhY2tldC5kYXRhOw0KICB2YXIgY29udGVudEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7DQogIHZhciByZXN1bHRCdWZmZXIgPSBuZXcgVWludDhBcnJheSgxICsgZGF0YS5ieXRlTGVuZ3RoKTsNCg0KICByZXN1bHRCdWZmZXJbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTsNCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb250ZW50QXJyYXkubGVuZ3RoOyBpKyspIHsNCiAgICByZXN1bHRCdWZmZXJbaSsxXSA9IGNvbnRlbnRBcnJheVtpXTsNCiAgfQ0KDQogIHJldHVybiBjYWxsYmFjayhyZXN1bHRCdWZmZXIuYnVmZmVyKTsNCn0NCg0KZnVuY3Rpb24gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spIHsNCiAgaWYgKCFzdXBwb3J0c0JpbmFyeSkgew0KICAgIHJldHVybiBleHBvcnRzLmVuY29kZUJhc2U2NFBhY2tldChwYWNrZXQsIGNhbGxiYWNrKTsNCiAgfQ0KDQogIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7DQogIGZyLm9ubG9hZCA9IGZ1bmN0aW9uKCkgew0KICAgIHBhY2tldC5kYXRhID0gZnIucmVzdWx0Ow0KICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgc3VwcG9ydHNCaW5hcnksIHRydWUsIGNhbGxiYWNrKTsNCiAgfTsNCiAgcmV0dXJuIGZyLnJlYWRBc0FycmF5QnVmZmVyKHBhY2tldC5kYXRhKTsNCn0NCg0KZnVuY3Rpb24gZW5jb2RlQmxvYihwYWNrZXQsIHN1cHBvcnRzQmluYXJ5LCBjYWxsYmFjaykgew0KICBpZiAoIXN1cHBvcnRzQmluYXJ5KSB7DQogICAgcmV0dXJuIGV4cG9ydHMuZW5jb2RlQmFzZTY0UGFja2V0KHBhY2tldCwgY2FsbGJhY2spOw0KICB9DQoNCiAgaWYgKGRvbnRTZW5kQmxvYnMpIHsNCiAgICByZXR1cm4gZW5jb2RlQmxvYkFzQXJyYXlCdWZmZXIocGFja2V0LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spOw0KICB9DQoNCiAgdmFyIGxlbmd0aCA9IG5ldyBVaW50OEFycmF5KDEpOw0KICBsZW5ndGhbMF0gPSBwYWNrZXRzW3BhY2tldC50eXBlXTsNCiAgdmFyIGJsb2IgPSBuZXcgQmxvYihbbGVuZ3RoLmJ1ZmZlciwgcGFja2V0LmRhdGFdKTsNCg0KICByZXR1cm4gY2FsbGJhY2soYmxvYik7DQp9DQoNCi8qKg0KICogRW5jb2RlcyBhIHBhY2tldCB3aXRoIGJpbmFyeSBkYXRhIGluIGEgYmFzZTY0IHN0cmluZw0KICoNCiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQsIGhhcyBgdHlwZWAgYW5kIGBkYXRhYA0KICogQHJldHVybiB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlDQogKi8NCg0KZXhwb3J0cy5lbmNvZGVCYXNlNjRQYWNrZXQgPSBmdW5jdGlvbihwYWNrZXQsIGNhbGxiYWNrKSB7DQogIHZhciBtZXNzYWdlID0gJ2InICsgZXhwb3J0cy5wYWNrZXRzW3BhY2tldC50eXBlXTsNCiAgaWYgKEJsb2IgJiYgcGFja2V0LmRhdGEgaW5zdGFuY2VvZiBnbG9iYWwuQmxvYikgew0KICAgIHZhciBmciA9IG5ldyBGaWxlUmVhZGVyKCk7DQogICAgZnIub25sb2FkID0gZnVuY3Rpb24oKSB7DQogICAgICB2YXIgYjY0ID0gZnIucmVzdWx0LnNwbGl0KCcsJylbMV07DQogICAgICBjYWxsYmFjayhtZXNzYWdlICsgYjY0KTsNCiAgICB9Ow0KICAgIHJldHVybiBmci5yZWFkQXNEYXRhVVJMKHBhY2tldC5kYXRhKTsNCiAgfQ0KDQogIHZhciBiNjRkYXRhOw0KICB0cnkgew0KICAgIGI2NGRhdGEgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKSk7DQogIH0gY2F0Y2ggKGUpIHsNCiAgICAvLyBpUGhvbmUgU2FmYXJpIGRvZXNuJ3QgbGV0IHlvdSBhcHBseSB3aXRoIHR5cGVkIGFycmF5cw0KICAgIHZhciB0eXBlZCA9IG5ldyBVaW50OEFycmF5KHBhY2tldC5kYXRhKTsNCiAgICB2YXIgYmFzaWMgPSBuZXcgQXJyYXkodHlwZWQubGVuZ3RoKTsNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVkLmxlbmd0aDsgaSsrKSB7DQogICAgICBiYXNpY1tpXSA9IHR5cGVkW2ldOw0KICAgIH0NCiAgICBiNjRkYXRhID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBiYXNpYyk7DQogIH0NCiAgbWVzc2FnZSArPSBnbG9iYWwuYnRvYShiNjRkYXRhKTsNCiAgcmV0dXJuIGNhbGxiYWNrKG1lc3NhZ2UpOw0KfTsNCg0KLyoqDQogKiBEZWNvZGVzIGEgcGFja2V0LiBDaGFuZ2VzIGZvcm1hdCB0byBCbG9iIGlmIHJlcXVlc3RlZC4NCiAqDQogKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSkNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmV4cG9ydHMuZGVjb2RlUGFja2V0ID0gZnVuY3Rpb24gKGRhdGEsIGJpbmFyeVR5cGUsIHV0ZjhkZWNvZGUpIHsNCiAgLy8gU3RyaW5nIGRhdGENCiAgaWYgKHR5cGVvZiBkYXRhID09ICdzdHJpbmcnIHx8IGRhdGEgPT09IHVuZGVmaW5lZCkgew0KICAgIGlmIChkYXRhLmNoYXJBdCgwKSA9PSAnYicpIHsNCiAgICAgIHJldHVybiBleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldChkYXRhLnN1YnN0cigxKSwgYmluYXJ5VHlwZSk7DQogICAgfQ0KDQogICAgaWYgKHV0ZjhkZWNvZGUpIHsNCiAgICAgIGRhdGEgPSB0cnlEZWNvZGUoZGF0YSk7DQogICAgICBpZiAoZGF0YSA9PT0gZmFsc2UpIHsNCiAgICAgICAgcmV0dXJuIGVycjsNCiAgICAgIH0NCiAgICB9DQogICAgdmFyIHR5cGUgPSBkYXRhLmNoYXJBdCgwKTsNCg0KICAgIGlmIChOdW1iZXIodHlwZSkgIT0gdHlwZSB8fCAhcGFja2V0c2xpc3RbdHlwZV0pIHsNCiAgICAgIHJldHVybiBlcnI7DQogICAgfQ0KDQogICAgaWYgKGRhdGEubGVuZ3RoID4gMSkgew0KICAgICAgcmV0dXJuIHsgdHlwZTogcGFja2V0c2xpc3RbdHlwZV0sIGRhdGE6IGRhdGEuc3Vic3RyaW5nKDEpIH07DQogICAgfSBlbHNlIHsNCiAgICAgIHJldHVybiB7IHR5cGU6IHBhY2tldHNsaXN0W3R5cGVdIH07DQogICAgfQ0KICB9DQoNCiAgdmFyIGFzQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhKTsNCiAgdmFyIHR5cGUgPSBhc0FycmF5WzBdOw0KICB2YXIgcmVzdCA9IHNsaWNlQnVmZmVyKGRhdGEsIDEpOw0KICBpZiAoQmxvYiAmJiBiaW5hcnlUeXBlID09PSAnYmxvYicpIHsNCiAgICByZXN0ID0gbmV3IEJsb2IoW3Jlc3RdKTsNCiAgfQ0KICByZXR1cm4geyB0eXBlOiBwYWNrZXRzbGlzdFt0eXBlXSwgZGF0YTogcmVzdCB9Ow0KfTsNCg0KZnVuY3Rpb24gdHJ5RGVjb2RlKGRhdGEpIHsNCiAgdHJ5IHsNCiAgICBkYXRhID0gdXRmOC5kZWNvZGUoZGF0YSk7DQogIH0gY2F0Y2ggKGUpIHsNCiAgICByZXR1cm4gZmFsc2U7DQogIH0NCiAgcmV0dXJuIGRhdGE7DQp9DQoNCi8qKg0KICogRGVjb2RlcyBhIHBhY2tldCBlbmNvZGVkIGluIGEgYmFzZTY0IHN0cmluZw0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBiYXNlNjQgZW5jb2RlZCBtZXNzYWdlDQogKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggYHR5cGVgIGFuZCBgZGF0YWAgKGlmIGFueSkNCiAqLw0KDQpleHBvcnRzLmRlY29kZUJhc2U2NFBhY2tldCA9IGZ1bmN0aW9uKG1zZywgYmluYXJ5VHlwZSkgew0KICB2YXIgdHlwZSA9IHBhY2tldHNsaXN0W21zZy5jaGFyQXQoMCldOw0KICBpZiAoIWJhc2U2NGVuY29kZXIpIHsNCiAgICByZXR1cm4geyB0eXBlOiB0eXBlLCBkYXRhOiB7IGJhc2U2NDogdHJ1ZSwgZGF0YTogbXNnLnN1YnN0cigxKSB9IH07DQogIH0NCg0KICB2YXIgZGF0YSA9IGJhc2U2NGVuY29kZXIuZGVjb2RlKG1zZy5zdWJzdHIoMSkpOw0KDQogIGlmIChiaW5hcnlUeXBlID09PSAnYmxvYicgJiYgQmxvYikgew0KICAgIGRhdGEgPSBuZXcgQmxvYihbZGF0YV0pOw0KICB9DQoNCiAgcmV0dXJuIHsgdHlwZTogdHlwZSwgZGF0YTogZGF0YSB9Ow0KfTsNCg0KLyoqDQogKiBFbmNvZGVzIG11bHRpcGxlIG1lc3NhZ2VzIChwYXlsb2FkKS4NCiAqDQogKiAgICAgPGxlbmd0aD46ZGF0YQ0KICoNCiAqIEV4YW1wbGU6DQogKg0KICogICAgIDExOmhlbGxvIHdvcmxkMjpoaQ0KICoNCiAqIElmIGFueSBjb250ZW50cyBhcmUgYmluYXJ5LCB0aGV5IHdpbGwgYmUgZW5jb2RlZCBhcyBiYXNlNjQgc3RyaW5ncy4gQmFzZTY0DQogKiBlbmNvZGVkIHN0cmluZ3MgYXJlIG1hcmtlZCB3aXRoIGEgYiBiZWZvcmUgdGhlIGxlbmd0aCBzcGVjaWZpZXINCiAqDQogKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpleHBvcnRzLmVuY29kZVBheWxvYWQgPSBmdW5jdGlvbiAocGFja2V0cywgc3VwcG9ydHNCaW5hcnksIGNhbGxiYWNrKSB7DQogIGlmICh0eXBlb2Ygc3VwcG9ydHNCaW5hcnkgPT0gJ2Z1bmN0aW9uJykgew0KICAgIGNhbGxiYWNrID0gc3VwcG9ydHNCaW5hcnk7DQogICAgc3VwcG9ydHNCaW5hcnkgPSBudWxsOw0KICB9DQoNCiAgdmFyIGlzQmluYXJ5ID0gaGFzQmluYXJ5KHBhY2tldHMpOw0KDQogIGlmIChzdXBwb3J0c0JpbmFyeSAmJiBpc0JpbmFyeSkgew0KICAgIGlmIChCbG9iICYmICFkb250U2VuZEJsb2JzKSB7DQogICAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNCbG9iKHBhY2tldHMsIGNhbGxiYWNrKTsNCiAgICB9DQoNCiAgICByZXR1cm4gZXhwb3J0cy5lbmNvZGVQYXlsb2FkQXNBcnJheUJ1ZmZlcihwYWNrZXRzLCBjYWxsYmFjayk7DQogIH0NCg0KICBpZiAoIXBhY2tldHMubGVuZ3RoKSB7DQogICAgcmV0dXJuIGNhbGxiYWNrKCcwOicpOw0KICB9DQoNCiAgZnVuY3Rpb24gc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpIHsNCiAgICByZXR1cm4gbWVzc2FnZS5sZW5ndGggKyAnOicgKyBtZXNzYWdlOw0KICB9DQoNCiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7DQogICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCAhaXNCaW5hcnkgPyBmYWxzZSA6IHN1cHBvcnRzQmluYXJ5LCB0cnVlLCBmdW5jdGlvbihtZXNzYWdlKSB7DQogICAgICBkb25lQ2FsbGJhY2sobnVsbCwgc2V0TGVuZ3RoSGVhZGVyKG1lc3NhZ2UpKTsNCiAgICB9KTsNCiAgfQ0KDQogIG1hcChwYWNrZXRzLCBlbmNvZGVPbmUsIGZ1bmN0aW9uKGVyciwgcmVzdWx0cykgew0KICAgIHJldHVybiBjYWxsYmFjayhyZXN1bHRzLmpvaW4oJycpKTsNCiAgfSk7DQp9Ow0KDQovKioNCiAqIEFzeW5jIGFycmF5IG1hcCB1c2luZyBhZnRlcg0KICovDQoNCmZ1bmN0aW9uIG1hcChhcnksIGVhY2gsIGRvbmUpIHsNCiAgdmFyIHJlc3VsdCA9IG5ldyBBcnJheShhcnkubGVuZ3RoKTsNCiAgdmFyIG5leHQgPSBhZnRlcihhcnkubGVuZ3RoLCBkb25lKTsNCg0KICB2YXIgZWFjaFdpdGhJbmRleCA9IGZ1bmN0aW9uKGksIGVsLCBjYikgew0KICAgIGVhY2goZWwsIGZ1bmN0aW9uKGVycm9yLCBtc2cpIHsNCiAgICAgIHJlc3VsdFtpXSA9IG1zZzsNCiAgICAgIGNiKGVycm9yLCByZXN1bHQpOw0KICAgIH0pOw0KICB9Ow0KDQogIGZvciAodmFyIGkgPSAwOyBpIDwgYXJ5Lmxlbmd0aDsgaSsrKSB7DQogICAgZWFjaFdpdGhJbmRleChpLCBhcnlbaV0sIG5leHQpOw0KICB9DQp9DQoNCi8qDQogKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFBvc3NpYmxlIGJpbmFyeSBjb250ZW50cyBhcmUNCiAqIGRlY29kZWQgZnJvbSB0aGVpciBiYXNlNjQgcmVwcmVzZW50YXRpb24NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gZGF0YSwgY2FsbGJhY2sgbWV0aG9kDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMuZGVjb2RlUGF5bG9hZCA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykgew0KICBpZiAodHlwZW9mIGRhdGEgIT0gJ3N0cmluZycpIHsNCiAgICByZXR1cm4gZXhwb3J0cy5kZWNvZGVQYXlsb2FkQXNCaW5hcnkoZGF0YSwgYmluYXJ5VHlwZSwgY2FsbGJhY2spOw0KICB9DQoNCiAgaWYgKHR5cGVvZiBiaW5hcnlUeXBlID09PSAnZnVuY3Rpb24nKSB7DQogICAgY2FsbGJhY2sgPSBiaW5hcnlUeXBlOw0KICAgIGJpbmFyeVR5cGUgPSBudWxsOw0KICB9DQoNCiAgdmFyIHBhY2tldDsNCiAgaWYgKGRhdGEgPT0gJycpIHsNCiAgICAvLyBwYXJzZXIgZXJyb3IgLSBpZ25vcmluZyBwYXlsb2FkDQogICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7DQogIH0NCg0KICB2YXIgbGVuZ3RoID0gJycNCiAgICAsIG4sIG1zZzsNCg0KICBmb3IgKHZhciBpID0gMCwgbCA9IGRhdGEubGVuZ3RoOyBpIDwgbDsgaSsrKSB7DQogICAgdmFyIGNociA9IGRhdGEuY2hhckF0KGkpOw0KDQogICAgaWYgKCc6JyAhPSBjaHIpIHsNCiAgICAgIGxlbmd0aCArPSBjaHI7DQogICAgfSBlbHNlIHsNCiAgICAgIGlmICgnJyA9PSBsZW5ndGggfHwgKGxlbmd0aCAhPSAobiA9IE51bWJlcihsZW5ndGgpKSkpIHsNCiAgICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZA0KICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTsNCiAgICAgIH0NCg0KICAgICAgbXNnID0gZGF0YS5zdWJzdHIoaSArIDEsIG4pOw0KDQogICAgICBpZiAobGVuZ3RoICE9IG1zZy5sZW5ndGgpIHsNCiAgICAgICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZA0KICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyLCAwLCAxKTsNCiAgICAgIH0NCg0KICAgICAgaWYgKG1zZy5sZW5ndGgpIHsNCiAgICAgICAgcGFja2V0ID0gZXhwb3J0cy5kZWNvZGVQYWNrZXQobXNnLCBiaW5hcnlUeXBlLCB0cnVlKTsNCg0KICAgICAgICBpZiAoZXJyLnR5cGUgPT0gcGFja2V0LnR5cGUgJiYgZXJyLmRhdGEgPT0gcGFja2V0LmRhdGEpIHsNCiAgICAgICAgICAvLyBwYXJzZXIgZXJyb3IgaW4gaW5kaXZpZHVhbCBwYWNrZXQgLSBpZ25vcmluZyBwYXlsb2FkDQogICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7DQogICAgICAgIH0NCg0KICAgICAgICB2YXIgcmV0ID0gY2FsbGJhY2socGFja2V0LCBpICsgbiwgbCk7DQogICAgICAgIGlmIChmYWxzZSA9PT0gcmV0KSByZXR1cm47DQogICAgICB9DQoNCiAgICAgIC8vIGFkdmFuY2UgY3Vyc29yDQogICAgICBpICs9IG47DQogICAgICBsZW5ndGggPSAnJzsNCiAgICB9DQogIH0NCg0KICBpZiAobGVuZ3RoICE9ICcnKSB7DQogICAgLy8gcGFyc2VyIGVycm9yIC0gaWdub3JpbmcgcGF5bG9hZA0KICAgIHJldHVybiBjYWxsYmFjayhlcnIsIDAsIDEpOw0KICB9DQoNCn07DQoNCi8qKg0KICogRW5jb2RlcyBtdWx0aXBsZSBtZXNzYWdlcyAocGF5bG9hZCkgYXMgYmluYXJ5Lg0KICoNCiAqIDwxID0gYmluYXJ5LCAwID0gc3RyaW5nPjxudW1iZXIgZnJvbSAwLTk+PG51bWJlciBmcm9tIDAtOT5bLi4uXTxudW1iZXINCiAqIDI1NT48ZGF0YT4NCiAqDQogKiBFeGFtcGxlOg0KICogMSAzIDI1NSAxIDIgMywgaWYgdGhlIGJpbmFyeSBjb250ZW50cyBhcmUgaW50ZXJwcmV0ZWQgYXMgOCBiaXQgaW50ZWdlcnMNCiAqDQogKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzDQogKiBAcmV0dXJuIHtBcnJheUJ1ZmZlcn0gZW5jb2RlZCBwYXlsb2FkDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpleHBvcnRzLmVuY29kZVBheWxvYWRBc0FycmF5QnVmZmVyID0gZnVuY3Rpb24ocGFja2V0cywgY2FsbGJhY2spIHsNCiAgaWYgKCFwYWNrZXRzLmxlbmd0aCkgew0KICAgIHJldHVybiBjYWxsYmFjayhuZXcgQXJyYXlCdWZmZXIoMCkpOw0KICB9DQoNCiAgZnVuY3Rpb24gZW5jb2RlT25lKHBhY2tldCwgZG9uZUNhbGxiYWNrKSB7DQogICAgZXhwb3J0cy5lbmNvZGVQYWNrZXQocGFja2V0LCB0cnVlLCB0cnVlLCBmdW5jdGlvbihkYXRhKSB7DQogICAgICByZXR1cm4gZG9uZUNhbGxiYWNrKG51bGwsIGRhdGEpOw0KICAgIH0pOw0KICB9DQoNCiAgbWFwKHBhY2tldHMsIGVuY29kZU9uZSwgZnVuY3Rpb24oZXJyLCBlbmNvZGVkUGFja2V0cykgew0KICAgIHZhciB0b3RhbExlbmd0aCA9IGVuY29kZWRQYWNrZXRzLnJlZHVjZShmdW5jdGlvbihhY2MsIHApIHsNCiAgICAgIHZhciBsZW47DQogICAgICBpZiAodHlwZW9mIHAgPT09ICdzdHJpbmcnKXsNCiAgICAgICAgbGVuID0gcC5sZW5ndGg7DQogICAgICB9IGVsc2Ugew0KICAgICAgICBsZW4gPSBwLmJ5dGVMZW5ndGg7DQogICAgICB9DQogICAgICByZXR1cm4gYWNjICsgbGVuLnRvU3RyaW5nKCkubGVuZ3RoICsgbGVuICsgMjsgLy8gc3RyaW5nL2JpbmFyeSBpZGVudGlmaWVyICsgc2VwYXJhdG9yID0gMg0KICAgIH0sIDApOw0KDQogICAgdmFyIHJlc3VsdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxMZW5ndGgpOw0KDQogICAgdmFyIGJ1ZmZlckluZGV4ID0gMDsNCiAgICBlbmNvZGVkUGFja2V0cy5mb3JFYWNoKGZ1bmN0aW9uKHApIHsNCiAgICAgIHZhciBpc1N0cmluZyA9IHR5cGVvZiBwID09PSAnc3RyaW5nJzsNCiAgICAgIHZhciBhYiA9IHA7DQogICAgICBpZiAoaXNTdHJpbmcpIHsNCiAgICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShwLmxlbmd0aCk7DQogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcC5sZW5ndGg7IGkrKykgew0KICAgICAgICAgIHZpZXdbaV0gPSBwLmNoYXJDb2RlQXQoaSk7DQogICAgICAgIH0NCiAgICAgICAgYWIgPSB2aWV3LmJ1ZmZlcjsNCiAgICAgIH0NCg0KICAgICAgaWYgKGlzU3RyaW5nKSB7IC8vIG5vdCB0cnVlIGJpbmFyeQ0KICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDA7DQogICAgICB9IGVsc2UgeyAvLyB0cnVlIGJpbmFyeQ0KICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDE7DQogICAgICB9DQoNCiAgICAgIHZhciBsZW5TdHIgPSBhYi5ieXRlTGVuZ3RoLnRvU3RyaW5nKCk7DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykgew0KICAgICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IHBhcnNlSW50KGxlblN0cltpXSk7DQogICAgICB9DQogICAgICByZXN1bHRBcnJheVtidWZmZXJJbmRleCsrXSA9IDI1NTsNCg0KICAgICAgdmFyIHZpZXcgPSBuZXcgVWludDhBcnJheShhYik7DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgcmVzdWx0QXJyYXlbYnVmZmVySW5kZXgrK10gPSB2aWV3W2ldOw0KICAgICAgfQ0KICAgIH0pOw0KDQogICAgcmV0dXJuIGNhbGxiYWNrKHJlc3VsdEFycmF5LmJ1ZmZlcik7DQogIH0pOw0KfTsNCg0KLyoqDQogKiBFbmNvZGUgYXMgQmxvYg0KICovDQoNCmV4cG9ydHMuZW5jb2RlUGF5bG9hZEFzQmxvYiA9IGZ1bmN0aW9uKHBhY2tldHMsIGNhbGxiYWNrKSB7DQogIGZ1bmN0aW9uIGVuY29kZU9uZShwYWNrZXQsIGRvbmVDYWxsYmFjaykgew0KICAgIGV4cG9ydHMuZW5jb2RlUGFja2V0KHBhY2tldCwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24oZW5jb2RlZCkgew0KICAgICAgdmFyIGJpbmFyeUlkZW50aWZpZXIgPSBuZXcgVWludDhBcnJheSgxKTsNCiAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAxOw0KICAgICAgaWYgKHR5cGVvZiBlbmNvZGVkID09PSAnc3RyaW5nJykgew0KICAgICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGVuY29kZWQubGVuZ3RoKTsNCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmNvZGVkLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgdmlld1tpXSA9IGVuY29kZWQuY2hhckNvZGVBdChpKTsNCiAgICAgICAgfQ0KICAgICAgICBlbmNvZGVkID0gdmlldy5idWZmZXI7DQogICAgICAgIGJpbmFyeUlkZW50aWZpZXJbMF0gPSAwOw0KICAgICAgfQ0KDQogICAgICB2YXIgbGVuID0gKGVuY29kZWQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikNCiAgICAgICAgPyBlbmNvZGVkLmJ5dGVMZW5ndGgNCiAgICAgICAgOiBlbmNvZGVkLnNpemU7DQoNCiAgICAgIHZhciBsZW5TdHIgPSBsZW4udG9TdHJpbmcoKTsNCiAgICAgIHZhciBsZW5ndGhBcnkgPSBuZXcgVWludDhBcnJheShsZW5TdHIubGVuZ3RoICsgMSk7DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlblN0ci5sZW5ndGg7IGkrKykgew0KICAgICAgICBsZW5ndGhBcnlbaV0gPSBwYXJzZUludChsZW5TdHJbaV0pOw0KICAgICAgfQ0KICAgICAgbGVuZ3RoQXJ5W2xlblN0ci5sZW5ndGhdID0gMjU1Ow0KDQogICAgICBpZiAoQmxvYikgew0KICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFtiaW5hcnlJZGVudGlmaWVyLmJ1ZmZlciwgbGVuZ3RoQXJ5LmJ1ZmZlciwgZW5jb2RlZF0pOw0KICAgICAgICBkb25lQ2FsbGJhY2sobnVsbCwgYmxvYik7DQogICAgICB9DQogICAgfSk7DQogIH0NCg0KICBtYXAocGFja2V0cywgZW5jb2RlT25lLCBmdW5jdGlvbihlcnIsIHJlc3VsdHMpIHsNCiAgICByZXR1cm4gY2FsbGJhY2sobmV3IEJsb2IocmVzdWx0cykpOw0KICB9KTsNCn07DQoNCi8qDQogKiBEZWNvZGVzIGRhdGEgd2hlbiBhIHBheWxvYWQgaXMgbWF5YmUgZXhwZWN0ZWQuIFN0cmluZ3MgYXJlIGRlY29kZWQgYnkNCiAqIGludGVycHJldGluZyBlYWNoIGJ5dGUgYXMgYSBrZXkgY29kZSBmb3IgZW50cmllcyBtYXJrZWQgdG8gc3RhcnQgd2l0aCAwLiBTZWUNCiAqIGRlc2NyaXB0aW9uIG9mIGVuY29kZVBheWxvYWRBc0JpbmFyeQ0KICoNCiAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ9IGRhdGEsIGNhbGxiYWNrIG1ldGhvZA0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpleHBvcnRzLmRlY29kZVBheWxvYWRBc0JpbmFyeSA9IGZ1bmN0aW9uIChkYXRhLCBiaW5hcnlUeXBlLCBjYWxsYmFjaykgew0KICBpZiAodHlwZW9mIGJpbmFyeVR5cGUgPT09ICdmdW5jdGlvbicpIHsNCiAgICBjYWxsYmFjayA9IGJpbmFyeVR5cGU7DQogICAgYmluYXJ5VHlwZSA9IG51bGw7DQogIH0NCg0KICB2YXIgYnVmZmVyVGFpbCA9IGRhdGE7DQogIHZhciBidWZmZXJzID0gW107DQoNCiAgdmFyIG51bWJlclRvb0xvbmcgPSBmYWxzZTsNCiAgd2hpbGUgKGJ1ZmZlclRhaWwuYnl0ZUxlbmd0aCA+IDApIHsNCiAgICB2YXIgdGFpbEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyVGFpbCk7DQogICAgdmFyIGlzU3RyaW5nID0gdGFpbEFycmF5WzBdID09PSAwOw0KICAgIHZhciBtc2dMZW5ndGggPSAnJzsNCg0KICAgIGZvciAodmFyIGkgPSAxOyA7IGkrKykgew0KICAgICAgaWYgKHRhaWxBcnJheVtpXSA9PSAyNTUpIGJyZWFrOw0KDQogICAgICBpZiAobXNnTGVuZ3RoLmxlbmd0aCA+IDMxMCkgew0KICAgICAgICBudW1iZXJUb29Mb25nID0gdHJ1ZTsNCiAgICAgICAgYnJlYWs7DQogICAgICB9DQoNCiAgICAgIG1zZ0xlbmd0aCArPSB0YWlsQXJyYXlbaV07DQogICAgfQ0KDQogICAgaWYobnVtYmVyVG9vTG9uZykgcmV0dXJuIGNhbGxiYWNrKGVyciwgMCwgMSk7DQoNCiAgICBidWZmZXJUYWlsID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMiArIG1zZ0xlbmd0aC5sZW5ndGgpOw0KICAgIG1zZ0xlbmd0aCA9IHBhcnNlSW50KG1zZ0xlbmd0aCk7DQoNCiAgICB2YXIgbXNnID0gc2xpY2VCdWZmZXIoYnVmZmVyVGFpbCwgMCwgbXNnTGVuZ3RoKTsNCiAgICBpZiAoaXNTdHJpbmcpIHsNCiAgICAgIHRyeSB7DQogICAgICAgIG1zZyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkobXNnKSk7DQogICAgICB9IGNhdGNoIChlKSB7DQogICAgICAgIC8vIGlQaG9uZSBTYWZhcmkgZG9lc24ndCBsZXQgeW91IGFwcGx5IHRvIHR5cGVkIGFycmF5cw0KICAgICAgICB2YXIgdHlwZWQgPSBuZXcgVWludDhBcnJheShtc2cpOw0KICAgICAgICBtc2cgPSAnJzsNCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlZC5sZW5ndGg7IGkrKykgew0KICAgICAgICAgIG1zZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHR5cGVkW2ldKTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCg0KICAgIGJ1ZmZlcnMucHVzaChtc2cpOw0KICAgIGJ1ZmZlclRhaWwgPSBzbGljZUJ1ZmZlcihidWZmZXJUYWlsLCBtc2dMZW5ndGgpOw0KICB9DQoNCiAgdmFyIHRvdGFsID0gYnVmZmVycy5sZW5ndGg7DQogIGJ1ZmZlcnMuZm9yRWFjaChmdW5jdGlvbihidWZmZXIsIGkpIHsNCiAgICBjYWxsYmFjayhleHBvcnRzLmRlY29kZVBhY2tldChidWZmZXIsIGJpbmFyeVR5cGUsIHRydWUpLCBpLCB0b3RhbCk7DQogIH0pOw0KfTsNCg0KfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pDQoNCn0seyIuL2tleXMiOjIzLCJhZnRlciI6MSwiYXJyYXlidWZmZXIuc2xpY2UiOjIsImJhc2U2NC1hcnJheWJ1ZmZlciI6NCwiYmxvYiI6NSwiaGFzLWJpbmFyeSI6MjQsInd0Zi04Ijo0NH1dLDIzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCg0KLyoqDQogKiBHZXRzIHRoZSBrZXlzIGZvciBhbiBvYmplY3QuDQogKg0KICogQHJldHVybiB7QXJyYXl9IGtleXMNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyAob2JqKXsNCiAgdmFyIGFyciA9IFtdOw0KICB2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsNCg0KICBmb3IgKHZhciBpIGluIG9iaikgew0KICAgIGlmIChoYXMuY2FsbChvYmosIGkpKSB7DQogICAgICBhcnIucHVzaChpKTsNCiAgICB9DQogIH0NCiAgcmV0dXJuIGFycjsNCn07DQoNCn0se31dLDI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCihmdW5jdGlvbiAoZ2xvYmFsKXsNCg0KLyoNCiAqIE1vZHVsZSByZXF1aXJlbWVudHMuDQogKi8NCg0KdmFyIGlzQXJyYXkgPSByZXF1aXJlKCdpc2FycmF5Jyk7DQoNCi8qKg0KICogTW9kdWxlIGV4cG9ydHMuDQogKi8NCg0KbW9kdWxlLmV4cG9ydHMgPSBoYXNCaW5hcnk7DQoNCi8qKg0KICogQ2hlY2tzIGZvciBiaW5hcnkgZGF0YS4NCiAqDQogKiBSaWdodCBub3cgb25seSBCdWZmZXIgYW5kIEFycmF5QnVmZmVyIGFyZSBzdXBwb3J0ZWQuLg0KICoNCiAqIEBwYXJhbSB7T2JqZWN0fSBhbnl0aGluZw0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpmdW5jdGlvbiBoYXNCaW5hcnkoZGF0YSkgew0KDQogIGZ1bmN0aW9uIF9oYXNCaW5hcnkob2JqKSB7DQogICAgaWYgKCFvYmopIHJldHVybiBmYWxzZTsNCg0KICAgIGlmICggKGdsb2JhbC5CdWZmZXIgJiYgZ2xvYmFsLkJ1ZmZlci5pc0J1ZmZlcihvYmopKSB8fA0KICAgICAgICAgKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwNCiAgICAgICAgIChnbG9iYWwuQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fA0KICAgICAgICAgKGdsb2JhbC5GaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpDQogICAgICAgICkgew0KICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgaWYgKGlzQXJyYXkob2JqKSkgew0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICBpZiAoX2hhc0JpbmFyeShvYmpbaV0pKSB7DQogICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgIH0NCiAgICAgIH0NCiAgICB9IGVsc2UgaWYgKG9iaiAmJiAnb2JqZWN0JyA9PSB0eXBlb2Ygb2JqKSB7DQogICAgICBpZiAob2JqLnRvSlNPTikgew0KICAgICAgICBvYmogPSBvYmoudG9KU09OKCk7DQogICAgICB9DQoNCiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsNCiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgX2hhc0JpbmFyeShvYmpba2V5XSkpIHsNCiAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiBmYWxzZTsNCiAgfQ0KDQogIHJldHVybiBfaGFzQmluYXJ5KGRhdGEpOw0KfQ0KDQp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkNCg0KfSx7ImlzYXJyYXkiOjI4fV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KKGZ1bmN0aW9uIChnbG9iYWwpew0KDQovKg0KICogTW9kdWxlIHJlcXVpcmVtZW50cy4NCiAqLw0KDQp2YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKTsNCg0KLyoqDQogKiBNb2R1bGUgZXhwb3J0cy4NCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IGhhc0JpbmFyeTsNCg0KLyoqDQogKiBDaGVja3MgZm9yIGJpbmFyeSBkYXRhLg0KICoNCiAqIFJpZ2h0IG5vdyBvbmx5IEJ1ZmZlciBhbmQgQXJyYXlCdWZmZXIgYXJlIHN1cHBvcnRlZC4uDQogKg0KICogQHBhcmFtIHtPYmplY3R9IGFueXRoaW5nDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIGhhc0JpbmFyeShkYXRhKSB7DQoNCiAgZnVuY3Rpb24gX2hhc0JpbmFyeShvYmopIHsNCiAgICBpZiAoIW9iaikgcmV0dXJuIGZhbHNlOw0KDQogICAgaWYgKCAoZ2xvYmFsLkJ1ZmZlciAmJiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyICYmIGdsb2JhbC5CdWZmZXIuaXNCdWZmZXIob2JqKSkgfHwNCiAgICAgICAgIChnbG9iYWwuQXJyYXlCdWZmZXIgJiYgb2JqIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHx8DQogICAgICAgICAoZ2xvYmFsLkJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHwNCiAgICAgICAgIChnbG9iYWwuRmlsZSAmJiBvYmogaW5zdGFuY2VvZiBGaWxlKQ0KICAgICAgICApIHsNCiAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIGlmIChpc0FycmF5KG9iaikpIHsNCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7DQogICAgICAgICAgaWYgKF9oYXNCaW5hcnkob2JqW2ldKSkgew0KICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICB9DQogICAgICB9DQogICAgfSBlbHNlIGlmIChvYmogJiYgJ29iamVjdCcgPT0gdHlwZW9mIG9iaikgew0KICAgICAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vQXV0b21hdHRpYy9oYXMtYmluYXJ5L3B1bGwvNA0KICAgICAgaWYgKG9iai50b0pTT04gJiYgJ2Z1bmN0aW9uJyA9PSB0eXBlb2Ygb2JqLnRvSlNPTikgew0KICAgICAgICBvYmogPSBvYmoudG9KU09OKCk7DQogICAgICB9DQoNCiAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHsNCiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgX2hhc0JpbmFyeShvYmpba2V5XSkpIHsNCiAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiBmYWxzZTsNCiAgfQ0KDQogIHJldHVybiBfaGFzQmluYXJ5KGRhdGEpOw0KfQ0KDQp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkNCg0KfSx7ImlzYXJyYXkiOjI4fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KDQovKioNCiAqIE1vZHVsZSBleHBvcnRzLg0KICoNCiAqIExvZ2ljIGJvcnJvd2VkIGZyb20gTW9kZXJuaXpyOg0KICoNCiAqICAgLSBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvY29ycy5qcw0KICovDQoNCnRyeSB7DQogIG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJyAmJg0KICAgICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYTUxIdHRwUmVxdWVzdCgpOw0KfSBjYXRjaCAoZXJyKSB7DQogIC8vIGlmIFhNTEh0dHAgc3VwcG9ydCBpcyBkaXNhYmxlZCBpbiBJRSB0aGVuIGl0IHdpbGwgdGhyb3cNCiAgLy8gd2hlbiB0cnlpbmcgdG8gY3JlYXRlDQogIG1vZHVsZS5leHBvcnRzID0gZmFsc2U7DQp9DQoNCn0se31dLDI3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCg0KdmFyIGluZGV4T2YgPSBbXS5pbmRleE9mOw0KDQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFyciwgb2JqKXsNCiAgaWYgKGluZGV4T2YpIHJldHVybiBhcnIuaW5kZXhPZihvYmopOw0KICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7ICsraSkgew0KICAgIGlmIChhcnJbaV0gPT09IG9iaikgcmV0dXJuIGk7DQogIH0NCiAgcmV0dXJuIC0xOw0KfTsNCn0se31dLDI4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7DQogIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nOw0KfTsNCg0KfSx7fV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KLyoqDQogKiBIZWxwZXJzLg0KICovDQoNCnZhciBzID0gMTAwMDsNCnZhciBtID0gcyAqIDYwOw0KdmFyIGggPSBtICogNjA7DQp2YXIgZCA9IGggKiAyNDsNCnZhciB5ID0gZCAqIDM2NS4yNTsNCg0KLyoqDQogKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLg0KICoNCiAqIE9wdGlvbnM6DQogKg0KICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdDQogKg0KICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWwNCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zDQogKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfQ0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucyl7DQogIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9Ow0KICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIHZhbCkgcmV0dXJuIHBhcnNlKHZhbCk7DQogIHJldHVybiBvcHRpb25zLmxvbmcNCiAgICA/IGxvbmcodmFsKQ0KICAgIDogc2hvcnQodmFsKTsNCn07DQoNCi8qKg0KICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBzdHINCiAqIEByZXR1cm4ge051bWJlcn0NCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmZ1bmN0aW9uIHBhcnNlKHN0cikgew0KICBzdHIgPSAnJyArIHN0cjsNCiAgaWYgKHN0ci5sZW5ndGggPiAxMDAwMCkgcmV0dXJuOw0KICB2YXIgbWF0Y2ggPSAvXigoPzpcZCspP1wuP1xkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKHN0cik7DQogIGlmICghbWF0Y2gpIHJldHVybjsNCiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTsNCiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTsNCiAgc3dpdGNoICh0eXBlKSB7DQogICAgY2FzZSAneWVhcnMnOg0KICAgIGNhc2UgJ3llYXInOg0KICAgIGNhc2UgJ3lycyc6DQogICAgY2FzZSAneXInOg0KICAgIGNhc2UgJ3knOg0KICAgICAgcmV0dXJuIG4gKiB5Ow0KICAgIGNhc2UgJ2RheXMnOg0KICAgIGNhc2UgJ2RheSc6DQogICAgY2FzZSAnZCc6DQogICAgICByZXR1cm4gbiAqIGQ7DQogICAgY2FzZSAnaG91cnMnOg0KICAgIGNhc2UgJ2hvdXInOg0KICAgIGNhc2UgJ2hycyc6DQogICAgY2FzZSAnaHInOg0KICAgIGNhc2UgJ2gnOg0KICAgICAgcmV0dXJuIG4gKiBoOw0KICAgIGNhc2UgJ21pbnV0ZXMnOg0KICAgIGNhc2UgJ21pbnV0ZSc6DQogICAgY2FzZSAnbWlucyc6DQogICAgY2FzZSAnbWluJzoNCiAgICBjYXNlICdtJzoNCiAgICAgIHJldHVybiBuICogbTsNCiAgICBjYXNlICdzZWNvbmRzJzoNCiAgICBjYXNlICdzZWNvbmQnOg0KICAgIGNhc2UgJ3NlY3MnOg0KICAgIGNhc2UgJ3NlYyc6DQogICAgY2FzZSAncyc6DQogICAgICByZXR1cm4gbiAqIHM7DQogICAgY2FzZSAnbWlsbGlzZWNvbmRzJzoNCiAgICBjYXNlICdtaWxsaXNlY29uZCc6DQogICAgY2FzZSAnbXNlY3MnOg0KICAgIGNhc2UgJ21zZWMnOg0KICAgIGNhc2UgJ21zJzoNCiAgICAgIHJldHVybiBuOw0KICB9DQp9DQoNCi8qKg0KICogU2hvcnQgZm9ybWF0IGZvciBgbXNgLg0KICoNCiAqIEBwYXJhbSB7TnVtYmVyfSBtcw0KICogQHJldHVybiB7U3RyaW5nfQ0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KZnVuY3Rpb24gc2hvcnQobXMpIHsNCiAgaWYgKG1zID49IGQpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7DQogIGlmIChtcyA+PSBoKSByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnOw0KICBpZiAobXMgPj0gbSkgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJzsNCiAgaWYgKG1zID49IHMpIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7DQogIHJldHVybiBtcyArICdtcyc7DQp9DQoNCi8qKg0KICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuDQogKg0KICogQHBhcmFtIHtOdW1iZXJ9IG1zDQogKiBAcmV0dXJuIHtTdHJpbmd9DQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBsb25nKG1zKSB7DQogIHJldHVybiBwbHVyYWwobXMsIGQsICdkYXknKQ0KICAgIHx8IHBsdXJhbChtcywgaCwgJ2hvdXInKQ0KICAgIHx8IHBsdXJhbChtcywgbSwgJ21pbnV0ZScpDQogICAgfHwgcGx1cmFsKG1zLCBzLCAnc2Vjb25kJykNCiAgICB8fCBtcyArICcgbXMnOw0KfQ0KDQovKioNCiAqIFBsdXJhbGl6YXRpb24gaGVscGVyLg0KICovDQoNCmZ1bmN0aW9uIHBsdXJhbChtcywgbiwgbmFtZSkgew0KICBpZiAobXMgPCBuKSByZXR1cm47DQogIGlmIChtcyA8IG4gKiAxLjUpIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lOw0KICByZXR1cm4gTWF0aC5jZWlsKG1zIC8gbikgKyAnICcgKyBuYW1lICsgJ3MnOw0KfQ0KDQp9LHt9XSwzMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQooZnVuY3Rpb24gKGdsb2JhbCl7DQovKioNCiAqIEpTT04gcGFyc2UuDQogKg0KICogQHNlZSBCYXNlZCBvbiBqUXVlcnkjcGFyc2VKU09OIChNSVQpIGFuZCBKU09OMg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KdmFyIHJ2YWxpZGNoYXJzID0gL15bXF0sOnt9XHNdKiQvOw0KdmFyIHJ2YWxpZGVzY2FwZSA9IC9cXCg/OlsiXFxcL2JmbnJ0XXx1WzAtOWEtZkEtRl17NH0pL2c7DQp2YXIgcnZhbGlkdG9rZW5zID0gLyJbXiJcXFxuXHJdKiJ8dHJ1ZXxmYWxzZXxudWxsfC0/XGQrKD86XC5cZCopPyg/OltlRV1bK1wtXT9cZCspPy9nOw0KdmFyIHJ2YWxpZGJyYWNlcyA9IC8oPzpefDp8LCkoPzpccypcWykrL2c7DQp2YXIgcnRyaW1MZWZ0ID0gL15ccysvOw0KdmFyIHJ0cmltUmlnaHQgPSAvXHMrJC87DQoNCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2Vqc29uKGRhdGEpIHsNCiAgaWYgKCdzdHJpbmcnICE9IHR5cGVvZiBkYXRhIHx8ICFkYXRhKSB7DQogICAgcmV0dXJuIG51bGw7DQogIH0NCg0KICBkYXRhID0gZGF0YS5yZXBsYWNlKHJ0cmltTGVmdCwgJycpLnJlcGxhY2UocnRyaW1SaWdodCwgJycpOw0KDQogIC8vIEF0dGVtcHQgdG8gcGFyc2UgdXNpbmcgdGhlIG5hdGl2ZSBKU09OIHBhcnNlciBmaXJzdA0KICBpZiAoZ2xvYmFsLkpTT04gJiYgSlNPTi5wYXJzZSkgew0KICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpOw0KICB9DQoNCiAgaWYgKHJ2YWxpZGNoYXJzLnRlc3QoZGF0YS5yZXBsYWNlKHJ2YWxpZGVzY2FwZSwgJ0AnKQ0KICAgICAgLnJlcGxhY2UocnZhbGlkdG9rZW5zLCAnXScpDQogICAgICAucmVwbGFjZShydmFsaWRicmFjZXMsICcnKSkpIHsNCiAgICByZXR1cm4gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBkYXRhKSkoKTsNCiAgfQ0KfTsNCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQ0KDQp9LHt9XSwzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQovKioNCiAqIENvbXBpbGVzIGEgcXVlcnlzdHJpbmcNCiAqIFJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBvYmplY3QNCiAqDQogKiBAcGFyYW0ge09iamVjdH0NCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG9iaikgew0KICB2YXIgc3RyID0gJyc7DQoNCiAgZm9yICh2YXIgaSBpbiBvYmopIHsNCiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGkpKSB7DQogICAgICBpZiAoc3RyLmxlbmd0aCkgc3RyICs9ICcmJzsNCiAgICAgIHN0ciArPSBlbmNvZGVVUklDb21wb25lbnQoaSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2ldKTsNCiAgICB9DQogIH0NCg0KICByZXR1cm4gc3RyOw0KfTsNCg0KLyoqDQogKiBQYXJzZXMgYSBzaW1wbGUgcXVlcnlzdHJpbmcgaW50byBhbiBvYmplY3QNCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gcXMNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24ocXMpew0KICB2YXIgcXJ5ID0ge307DQogIHZhciBwYWlycyA9IHFzLnNwbGl0KCcmJyk7DQogIGZvciAodmFyIGkgPSAwLCBsID0gcGFpcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7DQogICAgdmFyIHBhaXIgPSBwYWlyc1tpXS5zcGxpdCgnPScpOw0KICAgIHFyeVtkZWNvZGVVUklDb21wb25lbnQocGFpclswXSldID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pOw0KICB9DQogIHJldHVybiBxcnk7DQp9Ow0KDQp9LHt9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQovKioNCiAqIFBhcnNlcyBhbiBVUkkNCiAqDQogKiBAYXV0aG9yIFN0ZXZlbiBMZXZpdGhhbiA8c3RldmVubGV2aXRoYW4uY29tPiAoTUlUIGxpY2Vuc2UpDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQp2YXIgcmUgPSAvXig/Oig/IVteOkBdKzpbXjpAXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcL1wvKT8oKD86KChbXjpAXSopKD86OihbXjpAXSopKT8pP0ApPygoPzpbYS1mMC05XXswLDR9Oil7Miw3fVthLWYwLTldezAsNH18W146XC8/I10qKSg/OjooXGQqKSk/KSgoKFwvKD86W14/I10oPyFbXj8jXC9dKlwuW14/I1wvLl0rKD86Wz8jXXwkKSkpKlwvPyk/KFtePyNcL10qKSkoPzpcPyhbXiNdKikpPyg/OiMoLiopKT8pLzsNCg0KdmFyIHBhcnRzID0gWw0KICAgICdzb3VyY2UnLCAncHJvdG9jb2wnLCAnYXV0aG9yaXR5JywgJ3VzZXJJbmZvJywgJ3VzZXInLCAncGFzc3dvcmQnLCAnaG9zdCcsICdwb3J0JywgJ3JlbGF0aXZlJywgJ3BhdGgnLCAnZGlyZWN0b3J5JywgJ2ZpbGUnLCAncXVlcnknLCAnYW5jaG9yJw0KXTsNCg0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZXVyaShzdHIpIHsNCiAgICB2YXIgc3JjID0gc3RyLA0KICAgICAgICBiID0gc3RyLmluZGV4T2YoJ1snKSwNCiAgICAgICAgZSA9IHN0ci5pbmRleE9mKCddJyk7DQoNCiAgICBpZiAoYiAhPSAtMSAmJiBlICE9IC0xKSB7DQogICAgICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcoMCwgYikgKyBzdHIuc3Vic3RyaW5nKGIsIGUpLnJlcGxhY2UoLzovZywgJzsnKSArIHN0ci5zdWJzdHJpbmcoZSwgc3RyLmxlbmd0aCk7DQogICAgfQ0KDQogICAgdmFyIG0gPSByZS5leGVjKHN0ciB8fCAnJyksDQogICAgICAgIHVyaSA9IHt9LA0KICAgICAgICBpID0gMTQ7DQoNCiAgICB3aGlsZSAoaS0tKSB7DQogICAgICAgIHVyaVtwYXJ0c1tpXV0gPSBtW2ldIHx8ICcnOw0KICAgIH0NCg0KICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHsNCiAgICAgICAgdXJpLnNvdXJjZSA9IHNyYzsNCiAgICAgICAgdXJpLmhvc3QgPSB1cmkuaG9zdC5zdWJzdHJpbmcoMSwgdXJpLmhvc3QubGVuZ3RoIC0gMSkucmVwbGFjZSgvOy9nLCAnOicpOw0KICAgICAgICB1cmkuYXV0aG9yaXR5ID0gdXJpLmF1dGhvcml0eS5yZXBsYWNlKCdbJywgJycpLnJlcGxhY2UoJ10nLCAnJykucmVwbGFjZSgvOy9nLCAnOicpOw0KICAgICAgICB1cmkuaXB2NnVyaSA9IHRydWU7DQogICAgfQ0KDQogICAgcmV0dXJuIHVyaTsNCn07DQoNCn0se31dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCg0KLyoqDQogKiBNb2R1bGUgZGVwZW5kZW5jaWVzLg0KICovDQoNCnZhciB1cmwgPSByZXF1aXJlKCcuL3VybCcpOw0KdmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTsNCnZhciBNYW5hZ2VyID0gcmVxdWlyZSgnLi9tYW5hZ2VyJyk7DQp2YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50Jyk7DQoNCi8qKg0KICogTW9kdWxlIGV4cG9ydHMuDQogKi8NCg0KbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gbG9va3VwOw0KDQovKioNCiAqIE1hbmFnZXJzIGNhY2hlLg0KICovDQoNCnZhciBjYWNoZSA9IGV4cG9ydHMubWFuYWdlcnMgPSB7fTsNCg0KLyoqDQogKiBMb29rcyB1cCBhbiBleGlzdGluZyBgTWFuYWdlcmAgZm9yIG11bHRpcGxleGluZy4NCiAqIElmIHRoZSB1c2VyIHN1bW1vbnM6DQogKg0KICogICBgaW8oJ2h0dHA6Ly9sb2NhbGhvc3QvYScpO2ANCiAqICAgYGlvKCdodHRwOi8vbG9jYWxob3N0L2InKTtgDQogKg0KICogV2UgcmV1c2UgdGhlIGV4aXN0aW5nIGluc3RhbmNlIGJhc2VkIG9uIHNhbWUgc2NoZW1lL3BvcnQvaG9zdCwNCiAqIGFuZCB3ZSBpbml0aWFsaXplIHNvY2tldHMgZm9yIGVhY2ggbmFtZXNwYWNlLg0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZnVuY3Rpb24gbG9va3VwICh1cmksIG9wdHMpIHsNCiAgaWYgKHR5cGVvZiB1cmkgPT09ICdvYmplY3QnKSB7DQogICAgb3B0cyA9IHVyaTsNCiAgICB1cmkgPSB1bmRlZmluZWQ7DQogIH0NCg0KICBvcHRzID0gb3B0cyB8fCB7fTsNCg0KICB2YXIgcGFyc2VkID0gdXJsKHVyaSk7DQogIHZhciBzb3VyY2UgPSBwYXJzZWQuc291cmNlOw0KICB2YXIgaWQgPSBwYXJzZWQuaWQ7DQogIHZhciBwYXRoID0gcGFyc2VkLnBhdGg7DQogIHZhciBzYW1lTmFtZXNwYWNlID0gY2FjaGVbaWRdICYmIHBhdGggaW4gY2FjaGVbaWRdLm5zcHM7DQogIHZhciBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fCBvcHRzWydmb3JjZSBuZXcgY29ubmVjdGlvbiddIHx8DQogICAgICAgICAgICAgICAgICAgICAgZmFsc2UgPT09IG9wdHMubXVsdGlwbGV4IHx8IHNhbWVOYW1lc3BhY2U7DQoNCiAgdmFyIGlvOw0KDQogIGlmIChuZXdDb25uZWN0aW9uKSB7DQogICAgZGVidWcoJ2lnbm9yaW5nIHNvY2tldCBjYWNoZSBmb3IgJXMnLCBzb3VyY2UpOw0KICAgIGlvID0gTWFuYWdlcihzb3VyY2UsIG9wdHMpOw0KICB9IGVsc2Ugew0KICAgIGlmICghY2FjaGVbaWRdKSB7DQogICAgICBkZWJ1ZygnbmV3IGlvIGluc3RhbmNlIGZvciAlcycsIHNvdXJjZSk7DQogICAgICBjYWNoZVtpZF0gPSBNYW5hZ2VyKHNvdXJjZSwgb3B0cyk7DQogICAgfQ0KICAgIGlvID0gY2FjaGVbaWRdOw0KICB9DQogIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHsNCiAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5Ow0KICB9IGVsc2UgaWYgKG9wdHMgJiYgJ29iamVjdCcgPT09IHR5cGVvZiBvcHRzLnF1ZXJ5KSB7DQogICAgb3B0cy5xdWVyeSA9IGVuY29kZVF1ZXJ5U3RyaW5nKG9wdHMucXVlcnkpOw0KICB9DQogIHJldHVybiBpby5zb2NrZXQocGFyc2VkLnBhdGgsIG9wdHMpOw0KfQ0KLyoqDQogKiAgSGVscGVyIG1ldGhvZCB0byBwYXJzZSBxdWVyeSBvYmplY3RzIHRvIHN0cmluZy4NCiAqIEBwYXJhbSB7b2JqZWN0fSBxdWVyeQ0KICogQHJldHVybnMge3N0cmluZ30NCiAqLw0KZnVuY3Rpb24gZW5jb2RlUXVlcnlTdHJpbmcgKG9iaikgew0KICB2YXIgc3RyID0gW107DQogIGZvciAodmFyIHAgaW4gb2JqKSB7DQogICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwKSkgew0KICAgICAgc3RyLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KHApICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtwXSkpOw0KICAgIH0NCiAgfQ0KICByZXR1cm4gc3RyLmpvaW4oJyYnKTsNCn0NCi8qKg0KICogUHJvdG9jb2wgdmVyc2lvbi4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7DQoNCi8qKg0KICogYGNvbm5lY3RgLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSB1cmkNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZXhwb3J0cy5jb25uZWN0ID0gbG9va3VwOw0KDQovKioNCiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMgZm9yIHN0YW5kYWxvbmUgYnVpbGQuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpleHBvcnRzLk1hbmFnZXIgPSByZXF1aXJlKCcuL21hbmFnZXInKTsNCmV4cG9ydHMuU29ja2V0ID0gcmVxdWlyZSgnLi9zb2NrZXQnKTsNCg0KfSx7Ii4vbWFuYWdlciI6MzQsIi4vc29ja2V0IjozNiwiLi91cmwiOjM3LCJkZWJ1ZyI6MTAsInNvY2tldC5pby1wYXJzZXIiOjQwfV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KDQovKioNCiAqIE1vZHVsZSBkZXBlbmRlbmNpZXMuDQogKi8NCg0KdmFyIGVpbyA9IHJlcXVpcmUoJ2VuZ2luZS5pby1jbGllbnQnKTsNCnZhciBTb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpOw0KdmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpOw0KdmFyIHBhcnNlciA9IHJlcXVpcmUoJ3NvY2tldC5pby1wYXJzZXInKTsNCnZhciBvbiA9IHJlcXVpcmUoJy4vb24nKTsNCnZhciBiaW5kID0gcmVxdWlyZSgnY29tcG9uZW50LWJpbmQnKTsNCnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1jbGllbnQ6bWFuYWdlcicpOw0KdmFyIGluZGV4T2YgPSByZXF1aXJlKCdpbmRleG9mJyk7DQp2YXIgQmFja29mZiA9IHJlcXVpcmUoJ2JhY2tvMicpOw0KDQovKioNCiAqIElFNisgaGFzT3duUHJvcGVydHkNCiAqLw0KDQp2YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTsNCg0KLyoqDQogKiBNb2R1bGUgZXhwb3J0cw0KICovDQoNCm1vZHVsZS5leHBvcnRzID0gTWFuYWdlcjsNCg0KLyoqDQogKiBgTWFuYWdlcmAgY29uc3RydWN0b3IuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IGVuZ2luZSBpbnN0YW5jZSBvciBlbmdpbmUgdXJpL29wdHMNCiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIE1hbmFnZXIgKHVyaSwgb3B0cykgew0KICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTWFuYWdlcikpIHJldHVybiBuZXcgTWFuYWdlcih1cmksIG9wdHMpOw0KICBpZiAodXJpICYmICgnb2JqZWN0JyA9PT0gdHlwZW9mIHVyaSkpIHsNCiAgICBvcHRzID0gdXJpOw0KICAgIHVyaSA9IHVuZGVmaW5lZDsNCiAgfQ0KICBvcHRzID0gb3B0cyB8fCB7fTsNCg0KICBvcHRzLnBhdGggPSBvcHRzLnBhdGggfHwgJy9zb2NrZXQuaW8nOw0KICB0aGlzLm5zcHMgPSB7fTsNCiAgdGhpcy5zdWJzID0gW107DQogIHRoaXMub3B0cyA9IG9wdHM7DQogIHRoaXMucmVjb25uZWN0aW9uKG9wdHMucmVjb25uZWN0aW9uICE9PSBmYWxzZSk7DQogIHRoaXMucmVjb25uZWN0aW9uQXR0ZW1wdHMob3B0cy5yZWNvbm5lY3Rpb25BdHRlbXB0cyB8fCBJbmZpbml0eSk7DQogIHRoaXMucmVjb25uZWN0aW9uRGVsYXkob3B0cy5yZWNvbm5lY3Rpb25EZWxheSB8fCAxMDAwKTsNCiAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heChvcHRzLnJlY29ubmVjdGlvbkRlbGF5TWF4IHx8IDUwMDApOw0KICB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3Iob3B0cy5yYW5kb21pemF0aW9uRmFjdG9yIHx8IDAuNSk7DQogIHRoaXMuYmFja29mZiA9IG5ldyBCYWNrb2ZmKHsNCiAgICBtaW46IHRoaXMucmVjb25uZWN0aW9uRGVsYXkoKSwNCiAgICBtYXg6IHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgoKSwNCiAgICBqaXR0ZXI6IHRoaXMucmFuZG9taXphdGlvbkZhY3RvcigpDQogIH0pOw0KICB0aGlzLnRpbWVvdXQobnVsbCA9PSBvcHRzLnRpbWVvdXQgPyAyMDAwMCA6IG9wdHMudGltZW91dCk7DQogIHRoaXMucmVhZHlTdGF0ZSA9ICdjbG9zZWQnOw0KICB0aGlzLnVyaSA9IHVyaTsNCiAgdGhpcy5jb25uZWN0aW5nID0gW107DQogIHRoaXMubGFzdFBpbmcgPSBudWxsOw0KICB0aGlzLmVuY29kaW5nID0gZmFsc2U7DQogIHRoaXMucGFja2V0QnVmZmVyID0gW107DQogIHRoaXMuZW5jb2RlciA9IG5ldyBwYXJzZXIuRW5jb2RlcigpOw0KICB0aGlzLmRlY29kZXIgPSBuZXcgcGFyc2VyLkRlY29kZXIoKTsNCiAgdGhpcy5hdXRvQ29ubmVjdCA9IG9wdHMuYXV0b0Nvbm5lY3QgIT09IGZhbHNlOw0KICBpZiAodGhpcy5hdXRvQ29ubmVjdCkgdGhpcy5vcGVuKCk7DQp9DQoNCi8qKg0KICogUHJvcGFnYXRlIGdpdmVuIGV2ZW50IHRvIHNvY2tldHMgYW5kIGVtaXQgb24gYHRoaXNgDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUuZW1pdEFsbCA9IGZ1bmN0aW9uICgpIHsNCiAgdGhpcy5lbWl0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7DQogIGZvciAodmFyIG5zcCBpbiB0aGlzLm5zcHMpIHsNCiAgICBpZiAoaGFzLmNhbGwodGhpcy5uc3BzLCBuc3ApKSB7DQogICAgICB0aGlzLm5zcHNbbnNwXS5lbWl0LmFwcGx5KHRoaXMubnNwc1tuc3BdLCBhcmd1bWVudHMpOw0KICAgIH0NCiAgfQ0KfTsNCg0KLyoqDQogKiBVcGRhdGUgYHNvY2tldC5pZGAgb2YgYWxsIHNvY2tldHMNCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGVTb2NrZXRJZHMgPSBmdW5jdGlvbiAoKSB7DQogIGZvciAodmFyIG5zcCBpbiB0aGlzLm5zcHMpIHsNCiAgICBpZiAoaGFzLmNhbGwodGhpcy5uc3BzLCBuc3ApKSB7DQogICAgICB0aGlzLm5zcHNbbnNwXS5pZCA9IHRoaXMuZW5naW5lLmlkOw0KICAgIH0NCiAgfQ0KfTsNCg0KLyoqDQogKiBNaXggaW4gYEVtaXR0ZXJgLg0KICovDQoNCkVtaXR0ZXIoTWFuYWdlci5wcm90b3R5cGUpOw0KDQovKioNCiAqIFNldHMgdGhlIGByZWNvbm5lY3Rpb25gIGNvbmZpZy4NCiAqDQogKiBAcGFyYW0ge0Jvb2xlYW59IHRydWUvZmFsc2UgaWYgaXQgc2hvdWxkIGF1dG9tYXRpY2FsbHkgcmVjb25uZWN0DQogKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbiA9IGZ1bmN0aW9uICh2KSB7DQogIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbjsNCiAgdGhpcy5fcmVjb25uZWN0aW9uID0gISF2Ow0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogU2V0cyB0aGUgcmVjb25uZWN0aW9uIGF0dGVtcHRzIGNvbmZpZy4NCiAqDQogKiBAcGFyYW0ge051bWJlcn0gbWF4IHJlY29ubmVjdGlvbiBhdHRlbXB0cyBiZWZvcmUgZ2l2aW5nIHVwDQogKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkF0dGVtcHRzID0gZnVuY3Rpb24gKHYpIHsNCiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHM7DQogIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjsNCiAgcmV0dXJuIHRoaXM7DQp9Ow0KDQovKioNCiAqIFNldHMgdGhlIGRlbGF5IGJldHdlZW4gcmVjb25uZWN0aW9ucy4NCiAqDQogKiBAcGFyYW0ge051bWJlcn0gZGVsYXkNCiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWUNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUucmVjb25uZWN0aW9uRGVsYXkgPSBmdW5jdGlvbiAodikgew0KICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25EZWxheTsNCiAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXkgPSB2Ow0KICB0aGlzLmJhY2tvZmYgJiYgdGhpcy5iYWNrb2ZmLnNldE1pbih2KTsNCiAgcmV0dXJuIHRoaXM7DQp9Ow0KDQpNYW5hZ2VyLnByb3RvdHlwZS5yYW5kb21pemF0aW9uRmFjdG9yID0gZnVuY3Rpb24gKHYpIHsNCiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvcjsNCiAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7DQogIHRoaXMuYmFja29mZiAmJiB0aGlzLmJhY2tvZmYuc2V0Sml0dGVyKHYpOw0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogU2V0cyB0aGUgbWF4aW11bSBkZWxheSBiZXR3ZWVuIHJlY29ubmVjdGlvbnMuDQogKg0KICogQHBhcmFtIHtOdW1iZXJ9IGRlbGF5DQogKiBAcmV0dXJuIHtNYW5hZ2VyfSBzZWxmIG9yIHZhbHVlDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdGlvbkRlbGF5TWF4ID0gZnVuY3Rpb24gKHYpIHsNCiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7DQogIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjsNCiAgdGhpcy5iYWNrb2ZmICYmIHRoaXMuYmFja29mZi5zZXRNYXgodik7DQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBTZXRzIHRoZSBjb25uZWN0aW9uIHRpbWVvdXQuIGBmYWxzZWAgdG8gZGlzYWJsZQ0KICoNCiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYgb3IgdmFsdWUNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uICh2KSB7DQogIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7DQogIHRoaXMuX3RpbWVvdXQgPSB2Ow0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogU3RhcnRzIHRyeWluZyB0byByZWNvbm5lY3QgaWYgcmVjb25uZWN0aW9uIGlzIGVuYWJsZWQgYW5kIHdlIGhhdmUgbm90DQogKiBzdGFydGVkIHJlY29ubmVjdGluZyB5ZXQNCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpNYW5hZ2VyLnByb3RvdHlwZS5tYXliZVJlY29ubmVjdE9uT3BlbiA9IGZ1bmN0aW9uICgpIHsNCiAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZw0KICBpZiAoIXRoaXMucmVjb25uZWN0aW5nICYmIHRoaXMuX3JlY29ubmVjdGlvbiAmJiB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHsNCiAgICAvLyBrZWVwcyByZWNvbm5lY3Rpb24gZnJvbSBmaXJpbmcgdHdpY2UgZm9yIHRoZSBzYW1lIHJlY29ubmVjdGlvbiBsb29wDQogICAgdGhpcy5yZWNvbm5lY3QoKTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBTZXRzIHRoZSBjdXJyZW50IHRyYW5zcG9ydCBgc29ja2V0YC4NCiAqDQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25hbCwgY2FsbGJhY2sNCiAqIEByZXR1cm4ge01hbmFnZXJ9IHNlbGYNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUub3BlbiA9DQpNYW5hZ2VyLnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKGZuLCBvcHRzKSB7DQogIGRlYnVnKCdyZWFkeVN0YXRlICVzJywgdGhpcy5yZWFkeVN0YXRlKTsNCiAgaWYgKH50aGlzLnJlYWR5U3RhdGUuaW5kZXhPZignb3BlbicpKSByZXR1cm4gdGhpczsNCg0KICBkZWJ1Zygnb3BlbmluZyAlcycsIHRoaXMudXJpKTsNCiAgdGhpcy5lbmdpbmUgPSBlaW8odGhpcy51cmksIHRoaXMub3B0cyk7DQogIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTsNCiAgdmFyIHNlbGYgPSB0aGlzOw0KICB0aGlzLnJlYWR5U3RhdGUgPSAnb3BlbmluZyc7DQogIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlOw0KDQogIC8vIGVtaXQgYG9wZW5gDQogIHZhciBvcGVuU3ViID0gb24oc29ja2V0LCAnb3BlbicsIGZ1bmN0aW9uICgpIHsNCiAgICBzZWxmLm9ub3BlbigpOw0KICAgIGZuICYmIGZuKCk7DQogIH0pOw0KDQogIC8vIGVtaXQgYGNvbm5lY3RfZXJyb3JgDQogIHZhciBlcnJvclN1YiA9IG9uKHNvY2tldCwgJ2Vycm9yJywgZnVuY3Rpb24gKGRhdGEpIHsNCiAgICBkZWJ1ZygnY29ubmVjdF9lcnJvcicpOw0KICAgIHNlbGYuY2xlYW51cCgpOw0KICAgIHNlbGYucmVhZHlTdGF0ZSA9ICdjbG9zZWQnOw0KICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF9lcnJvcicsIGRhdGEpOw0KICAgIGlmIChmbikgew0KICAgICAgdmFyIGVyciA9IG5ldyBFcnJvcignQ29ubmVjdGlvbiBlcnJvcicpOw0KICAgICAgZXJyLmRhdGEgPSBkYXRhOw0KICAgICAgZm4oZXJyKTsNCiAgICB9IGVsc2Ugew0KICAgICAgLy8gT25seSBkbyB0aGlzIGlmIHRoZXJlIGlzIG5vIGZuIHRvIGhhbmRsZSB0aGUgZXJyb3INCiAgICAgIHNlbGYubWF5YmVSZWNvbm5lY3RPbk9wZW4oKTsNCiAgICB9DQogIH0pOw0KDQogIC8vIGVtaXQgYGNvbm5lY3RfdGltZW91dGANCiAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7DQogICAgdmFyIHRpbWVvdXQgPSB0aGlzLl90aW1lb3V0Ow0KICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgd2lsbCB0aW1lb3V0IGFmdGVyICVkJywgdGltZW91dCk7DQoNCiAgICAvLyBzZXQgdGltZXINCiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgIGRlYnVnKCdjb25uZWN0IGF0dGVtcHQgdGltZWQgb3V0IGFmdGVyICVkJywgdGltZW91dCk7DQogICAgICBvcGVuU3ViLmRlc3Ryb3koKTsNCiAgICAgIHNvY2tldC5jbG9zZSgpOw0KICAgICAgc29ja2V0LmVtaXQoJ2Vycm9yJywgJ3RpbWVvdXQnKTsNCiAgICAgIHNlbGYuZW1pdEFsbCgnY29ubmVjdF90aW1lb3V0JywgdGltZW91dCk7DQogICAgfSwgdGltZW91dCk7DQoNCiAgICB0aGlzLnN1YnMucHVzaCh7DQogICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7DQogICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7DQogICAgICB9DQogICAgfSk7DQogIH0NCg0KICB0aGlzLnN1YnMucHVzaChvcGVuU3ViKTsNCiAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpOw0KDQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpNYW5hZ2VyLnByb3RvdHlwZS5vbm9wZW4gPSBmdW5jdGlvbiAoKSB7DQogIGRlYnVnKCdvcGVuJyk7DQoNCiAgLy8gY2xlYXIgb2xkIHN1YnMNCiAgdGhpcy5jbGVhbnVwKCk7DQoNCiAgLy8gbWFyayBhcyBvcGVuDQogIHRoaXMucmVhZHlTdGF0ZSA9ICdvcGVuJzsNCiAgdGhpcy5lbWl0KCdvcGVuJyk7DQoNCiAgLy8gYWRkIG5ldyBzdWJzDQogIHZhciBzb2NrZXQgPSB0aGlzLmVuZ2luZTsNCiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZGF0YScsIGJpbmQodGhpcywgJ29uZGF0YScpKSk7DQogIHRoaXMuc3Vicy5wdXNoKG9uKHNvY2tldCwgJ3BpbmcnLCBiaW5kKHRoaXMsICdvbnBpbmcnKSkpOw0KICB0aGlzLnN1YnMucHVzaChvbihzb2NrZXQsICdwb25nJywgYmluZCh0aGlzLCAnb25wb25nJykpKTsNCiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnZXJyb3InLCBiaW5kKHRoaXMsICdvbmVycm9yJykpKTsNCiAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCAnY2xvc2UnLCBiaW5kKHRoaXMsICdvbmNsb3NlJykpKTsNCiAgdGhpcy5zdWJzLnB1c2gob24odGhpcy5kZWNvZGVyLCAnZGVjb2RlZCcsIGJpbmQodGhpcywgJ29uZGVjb2RlZCcpKSk7DQp9Ow0KDQovKioNCiAqIENhbGxlZCB1cG9uIGEgcGluZy4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpNYW5hZ2VyLnByb3RvdHlwZS5vbnBpbmcgPSBmdW5jdGlvbiAoKSB7DQogIHRoaXMubGFzdFBpbmcgPSBuZXcgRGF0ZSgpOw0KICB0aGlzLmVtaXRBbGwoJ3BpbmcnKTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gYSBwYWNrZXQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUub25wb25nID0gZnVuY3Rpb24gKCkgew0KICB0aGlzLmVtaXRBbGwoJ3BvbmcnLCBuZXcgRGF0ZSgpIC0gdGhpcy5sYXN0UGluZyk7DQp9Ow0KDQovKioNCiAqIENhbGxlZCB3aXRoIGRhdGEuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUub25kYXRhID0gZnVuY3Rpb24gKGRhdGEpIHsNCiAgdGhpcy5kZWNvZGVyLmFkZChkYXRhKTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHdoZW4gcGFyc2VyIGZ1bGx5IGRlY29kZXMgYSBwYWNrZXQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUub25kZWNvZGVkID0gZnVuY3Rpb24gKHBhY2tldCkgew0KICB0aGlzLmVtaXQoJ3BhY2tldCcsIHBhY2tldCk7DQp9Ow0KDQovKioNCiAqIENhbGxlZCB1cG9uIHNvY2tldCBlcnJvci4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpNYW5hZ2VyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24gKGVycikgew0KICBkZWJ1ZygnZXJyb3InLCBlcnIpOw0KICB0aGlzLmVtaXRBbGwoJ2Vycm9yJywgZXJyKTsNCn07DQoNCi8qKg0KICogQ3JlYXRlcyBhIG5ldyBzb2NrZXQgZm9yIHRoZSBnaXZlbiBgbnNwYC4NCiAqDQogKiBAcmV0dXJuIHtTb2NrZXR9DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCk1hbmFnZXIucHJvdG90eXBlLnNvY2tldCA9IGZ1bmN0aW9uIChuc3AsIG9wdHMpIHsNCiAgdmFyIHNvY2tldCA9IHRoaXMubnNwc1tuc3BdOw0KICBpZiAoIXNvY2tldCkgew0KICAgIHNvY2tldCA9IG5ldyBTb2NrZXQodGhpcywgbnNwLCBvcHRzKTsNCiAgICB0aGlzLm5zcHNbbnNwXSA9IHNvY2tldDsNCiAgICB2YXIgc2VsZiA9IHRoaXM7DQogICAgc29ja2V0Lm9uKCdjb25uZWN0aW5nJywgb25Db25uZWN0aW5nKTsNCiAgICBzb2NrZXQub24oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoKSB7DQogICAgICBzb2NrZXQuaWQgPSBzZWxmLmVuZ2luZS5pZDsNCiAgICB9KTsNCg0KICAgIGlmICh0aGlzLmF1dG9Db25uZWN0KSB7DQogICAgICAvLyBtYW51YWxseSBjYWxsIGhlcmUgc2luY2UgY29ubmVjdGluZyBldm5ldCBpcyBmaXJlZCBiZWZvcmUgbGlzdGVuaW5nDQogICAgICBvbkNvbm5lY3RpbmcoKTsNCiAgICB9DQogIH0NCg0KICBmdW5jdGlvbiBvbkNvbm5lY3RpbmcgKCkgew0KICAgIGlmICghfmluZGV4T2Yoc2VsZi5jb25uZWN0aW5nLCBzb2NrZXQpKSB7DQogICAgICBzZWxmLmNvbm5lY3RpbmcucHVzaChzb2NrZXQpOw0KICAgIH0NCiAgfQ0KDQogIHJldHVybiBzb2NrZXQ7DQp9Ow0KDQovKioNCiAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLg0KICoNCiAqIEBwYXJhbSB7U29ja2V0fSBzb2NrZXQNCiAqLw0KDQpNYW5hZ2VyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKHNvY2tldCkgew0KICB2YXIgaW5kZXggPSBpbmRleE9mKHRoaXMuY29ubmVjdGluZywgc29ja2V0KTsNCiAgaWYgKH5pbmRleCkgdGhpcy5jb25uZWN0aW5nLnNwbGljZShpbmRleCwgMSk7DQogIGlmICh0aGlzLmNvbm5lY3RpbmcubGVuZ3RoKSByZXR1cm47DQoNCiAgdGhpcy5jbG9zZSgpOw0KfTsNCg0KLyoqDQogKiBXcml0ZXMgYSBwYWNrZXQuDQogKg0KICogQHBhcmFtIHtPYmplY3R9IHBhY2tldA0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkgew0KICBkZWJ1Zygnd3JpdGluZyBwYWNrZXQgJWonLCBwYWNrZXQpOw0KICB2YXIgc2VsZiA9IHRoaXM7DQogIGlmIChwYWNrZXQucXVlcnkgJiYgcGFja2V0LnR5cGUgPT09IDApIHBhY2tldC5uc3AgKz0gJz8nICsgcGFja2V0LnF1ZXJ5Ow0KDQogIGlmICghc2VsZi5lbmNvZGluZykgew0KICAgIC8vIGVuY29kZSwgdGhlbiB3cml0ZSB0byBlbmdpbmUgd2l0aCByZXN1bHQNCiAgICBzZWxmLmVuY29kaW5nID0gdHJ1ZTsNCiAgICB0aGlzLmVuY29kZXIuZW5jb2RlKHBhY2tldCwgZnVuY3Rpb24gKGVuY29kZWRQYWNrZXRzKSB7DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIHNlbGYuZW5naW5lLndyaXRlKGVuY29kZWRQYWNrZXRzW2ldLCBwYWNrZXQub3B0aW9ucyk7DQogICAgICB9DQogICAgICBzZWxmLmVuY29kaW5nID0gZmFsc2U7DQogICAgICBzZWxmLnByb2Nlc3NQYWNrZXRRdWV1ZSgpOw0KICAgIH0pOw0KICB9IGVsc2UgeyAvLyBhZGQgcGFja2V0IHRvIHRoZSBxdWV1ZQ0KICAgIHNlbGYucGFja2V0QnVmZmVyLnB1c2gocGFja2V0KTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBJZiBwYWNrZXQgYnVmZmVyIGlzIG5vbi1lbXB0eSwgYmVnaW5zIGVuY29kaW5nIHRoZQ0KICogbmV4dCBwYWNrZXQgaW4gbGluZS4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpNYW5hZ2VyLnByb3RvdHlwZS5wcm9jZXNzUGFja2V0UXVldWUgPSBmdW5jdGlvbiAoKSB7DQogIGlmICh0aGlzLnBhY2tldEJ1ZmZlci5sZW5ndGggPiAwICYmICF0aGlzLmVuY29kaW5nKSB7DQogICAgdmFyIHBhY2sgPSB0aGlzLnBhY2tldEJ1ZmZlci5zaGlmdCgpOw0KICAgIHRoaXMucGFja2V0KHBhY2spOw0KICB9DQp9Ow0KDQovKioNCiAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCk1hbmFnZXIucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7DQogIGRlYnVnKCdjbGVhbnVwJyk7DQoNCiAgdmFyIHN1YnNMZW5ndGggPSB0aGlzLnN1YnMubGVuZ3RoOw0KICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnNMZW5ndGg7IGkrKykgew0KICAgIHZhciBzdWIgPSB0aGlzLnN1YnMuc2hpZnQoKTsNCiAgICBzdWIuZGVzdHJveSgpOw0KICB9DQoNCiAgdGhpcy5wYWNrZXRCdWZmZXIgPSBbXTsNCiAgdGhpcy5lbmNvZGluZyA9IGZhbHNlOw0KICB0aGlzLmxhc3RQaW5nID0gbnVsbDsNCg0KICB0aGlzLmRlY29kZXIuZGVzdHJveSgpOw0KfTsNCg0KLyoqDQogKiBDbG9zZSB0aGUgY3VycmVudCBzb2NrZXQuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUuY2xvc2UgPQ0KTWFuYWdlci5wcm90b3R5cGUuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsNCiAgZGVidWcoJ2Rpc2Nvbm5lY3QnKTsNCiAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTsNCiAgdGhpcy5yZWNvbm5lY3RpbmcgPSBmYWxzZTsNCiAgaWYgKCdvcGVuaW5nJyA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7DQogICAgLy8gYG9uY2xvc2VgIHdpbGwgbm90IGZpcmUgYmVjYXVzZQ0KICAgIC8vIGFuIG9wZW4gZXZlbnQgbmV2ZXIgaGFwcGVuZWQNCiAgICB0aGlzLmNsZWFudXAoKTsNCiAgfQ0KICB0aGlzLmJhY2tvZmYucmVzZXQoKTsNCiAgdGhpcy5yZWFkeVN0YXRlID0gJ2Nsb3NlZCc7DQogIGlmICh0aGlzLmVuZ2luZSkgdGhpcy5lbmdpbmUuY2xvc2UoKTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCk1hbmFnZXIucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7DQogIGRlYnVnKCdvbmNsb3NlJyk7DQoNCiAgdGhpcy5jbGVhbnVwKCk7DQogIHRoaXMuYmFja29mZi5yZXNldCgpOw0KICB0aGlzLnJlYWR5U3RhdGUgPSAnY2xvc2VkJzsNCiAgdGhpcy5lbWl0KCdjbG9zZScsIHJlYXNvbik7DQoNCiAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7DQogICAgdGhpcy5yZWNvbm5lY3QoKTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBBdHRlbXB0IGEgcmVjb25uZWN0aW9uLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCk1hbmFnZXIucHJvdG90eXBlLnJlY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsNCiAgaWYgKHRoaXMucmVjb25uZWN0aW5nIHx8IHRoaXMuc2tpcFJlY29ubmVjdCkgcmV0dXJuIHRoaXM7DQoNCiAgdmFyIHNlbGYgPSB0aGlzOw0KDQogIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHsNCiAgICBkZWJ1ZygncmVjb25uZWN0IGZhaWxlZCcpOw0KICAgIHRoaXMuYmFja29mZi5yZXNldCgpOw0KICAgIHRoaXMuZW1pdEFsbCgncmVjb25uZWN0X2ZhaWxlZCcpOw0KICAgIHRoaXMucmVjb25uZWN0aW5nID0gZmFsc2U7DQogIH0gZWxzZSB7DQogICAgdmFyIGRlbGF5ID0gdGhpcy5iYWNrb2ZmLmR1cmF0aW9uKCk7DQogICAgZGVidWcoJ3dpbGwgd2FpdCAlZG1zIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdCcsIGRlbGF5KTsNCg0KICAgIHRoaXMucmVjb25uZWN0aW5nID0gdHJ1ZTsNCiAgICB2YXIgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsNCiAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpIHJldHVybjsNCg0KICAgICAgZGVidWcoJ2F0dGVtcHRpbmcgcmVjb25uZWN0Jyk7DQogICAgICBzZWxmLmVtaXRBbGwoJ3JlY29ubmVjdF9hdHRlbXB0Jywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTsNCiAgICAgIHNlbGYuZW1pdEFsbCgncmVjb25uZWN0aW5nJywgc2VsZi5iYWNrb2ZmLmF0dGVtcHRzKTsNCg0KICAgICAgLy8gY2hlY2sgYWdhaW4gZm9yIHRoZSBjYXNlIHNvY2tldCBjbG9zZWQgaW4gYWJvdmUgZXZlbnRzDQogICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KSByZXR1cm47DQoNCiAgICAgIHNlbGYub3BlbihmdW5jdGlvbiAoZXJyKSB7DQogICAgICAgIGlmIChlcnIpIHsNCiAgICAgICAgICBkZWJ1ZygncmVjb25uZWN0IGF0dGVtcHQgZXJyb3InKTsNCiAgICAgICAgICBzZWxmLnJlY29ubmVjdGluZyA9IGZhbHNlOw0KICAgICAgICAgIHNlbGYucmVjb25uZWN0KCk7DQogICAgICAgICAgc2VsZi5lbWl0QWxsKCdyZWNvbm5lY3RfZXJyb3InLCBlcnIuZGF0YSk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgZGVidWcoJ3JlY29ubmVjdCBzdWNjZXNzJyk7DQogICAgICAgICAgc2VsZi5vbnJlY29ubmVjdCgpOw0KICAgICAgICB9DQogICAgICB9KTsNCiAgICB9LCBkZWxheSk7DQoNCiAgICB0aGlzLnN1YnMucHVzaCh7DQogICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7DQogICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7DQogICAgICB9DQogICAgfSk7DQogIH0NCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gc3VjY2Vzc2Z1bCByZWNvbm5lY3QuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KTWFuYWdlci5wcm90b3R5cGUub25yZWNvbm5lY3QgPSBmdW5jdGlvbiAoKSB7DQogIHZhciBhdHRlbXB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzOw0KICB0aGlzLnJlY29ubmVjdGluZyA9IGZhbHNlOw0KICB0aGlzLmJhY2tvZmYucmVzZXQoKTsNCiAgdGhpcy51cGRhdGVTb2NrZXRJZHMoKTsNCiAgdGhpcy5lbWl0QWxsKCdyZWNvbm5lY3QnLCBhdHRlbXB0KTsNCn07DQoNCn0seyIuL29uIjozNSwiLi9zb2NrZXQiOjM2LCJiYWNrbzIiOjMsImNvbXBvbmVudC1iaW5kIjo3LCJjb21wb25lbnQtZW1pdHRlciI6MzgsImRlYnVnIjoxMCwiZW5naW5lLmlvLWNsaWVudCI6MTIsImluZGV4b2YiOjI3LCJzb2NrZXQuaW8tcGFyc2VyIjo0MH1dLDM1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCg0KLyoqDQogKiBNb2R1bGUgZXhwb3J0cy4NCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IG9uOw0KDQovKioNCiAqIEhlbHBlciBmb3Igc3Vic2NyaXB0aW9ucy4NCiAqDQogKiBAcGFyYW0ge09iamVjdHxFdmVudEVtaXR0ZXJ9IG9iaiB3aXRoIGBFbWl0dGVyYCBtaXhpbiBvciBgRXZlbnRFbWl0dGVyYA0KICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50IG5hbWUNCiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmZ1bmN0aW9uIG9uIChvYmosIGV2LCBmbikgew0KICBvYmoub24oZXYsIGZuKTsNCiAgcmV0dXJuIHsNCiAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7DQogICAgICBvYmoucmVtb3ZlTGlzdGVuZXIoZXYsIGZuKTsNCiAgICB9DQogIH07DQp9DQoNCn0se31dLDM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCg0KLyoqDQogKiBNb2R1bGUgZGVwZW5kZW5jaWVzLg0KICovDQoNCnZhciBwYXJzZXIgPSByZXF1aXJlKCdzb2NrZXQuaW8tcGFyc2VyJyk7DQp2YXIgRW1pdHRlciA9IHJlcXVpcmUoJ2NvbXBvbmVudC1lbWl0dGVyJyk7DQp2YXIgdG9BcnJheSA9IHJlcXVpcmUoJ3RvLWFycmF5Jyk7DQp2YXIgb24gPSByZXF1aXJlKCcuL29uJyk7DQp2YXIgYmluZCA9IHJlcXVpcmUoJ2NvbXBvbmVudC1iaW5kJyk7DQp2YXIgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NrZXQuaW8tY2xpZW50OnNvY2tldCcpOw0KdmFyIGhhc0JpbiA9IHJlcXVpcmUoJ2hhcy1iaW5hcnknKTsNCg0KLyoqDQogKiBNb2R1bGUgZXhwb3J0cy4NCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBTb2NrZXQ7DQoNCi8qKg0KICogSW50ZXJuYWwgZXZlbnRzIChibGFja2xpc3RlZCkuDQogKiBUaGVzZSBldmVudHMgY2FuJ3QgYmUgZW1pdHRlZCBieSB0aGUgdXNlci4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQp2YXIgZXZlbnRzID0gew0KICBjb25uZWN0OiAxLA0KICBjb25uZWN0X2Vycm9yOiAxLA0KICBjb25uZWN0X3RpbWVvdXQ6IDEsDQogIGNvbm5lY3Rpbmc6IDEsDQogIGRpc2Nvbm5lY3Q6IDEsDQogIGVycm9yOiAxLA0KICByZWNvbm5lY3Q6IDEsDQogIHJlY29ubmVjdF9hdHRlbXB0OiAxLA0KICByZWNvbm5lY3RfZmFpbGVkOiAxLA0KICByZWNvbm5lY3RfZXJyb3I6IDEsDQogIHJlY29ubmVjdGluZzogMSwNCiAgcGluZzogMSwNCiAgcG9uZzogMQ0KfTsNCg0KLyoqDQogKiBTaG9ydGN1dCB0byBgRW1pdHRlciNlbWl0YC4NCiAqLw0KDQp2YXIgZW1pdCA9IEVtaXR0ZXIucHJvdG90eXBlLmVtaXQ7DQoNCi8qKg0KICogYFNvY2tldGAgY29uc3RydWN0b3IuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpmdW5jdGlvbiBTb2NrZXQgKGlvLCBuc3AsIG9wdHMpIHsNCiAgdGhpcy5pbyA9IGlvOw0KICB0aGlzLm5zcCA9IG5zcDsNCiAgdGhpcy5qc29uID0gdGhpczsgLy8gY29tcGF0DQogIHRoaXMuaWRzID0gMDsNCiAgdGhpcy5hY2tzID0ge307DQogIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdOw0KICB0aGlzLnNlbmRCdWZmZXIgPSBbXTsNCiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTsNCiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlOw0KICBpZiAob3B0cyAmJiBvcHRzLnF1ZXJ5KSB7DQogICAgdGhpcy5xdWVyeSA9IG9wdHMucXVlcnk7DQogIH0NCiAgaWYgKHRoaXMuaW8uYXV0b0Nvbm5lY3QpIHRoaXMub3BlbigpOw0KfQ0KDQovKioNCiAqIE1peCBpbiBgRW1pdHRlcmAuDQogKi8NCg0KRW1pdHRlcihTb2NrZXQucHJvdG90eXBlKTsNCg0KLyoqDQogKiBTdWJzY3JpYmUgdG8gb3BlbiwgY2xvc2UgYW5kIHBhY2tldCBldmVudHMNCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLnN1YkV2ZW50cyA9IGZ1bmN0aW9uICgpIHsNCiAgaWYgKHRoaXMuc3VicykgcmV0dXJuOw0KDQogIHZhciBpbyA9IHRoaXMuaW87DQogIHRoaXMuc3VicyA9IFsNCiAgICBvbihpbywgJ29wZW4nLCBiaW5kKHRoaXMsICdvbm9wZW4nKSksDQogICAgb24oaW8sICdwYWNrZXQnLCBiaW5kKHRoaXMsICdvbnBhY2tldCcpKSwNCiAgICBvbihpbywgJ2Nsb3NlJywgYmluZCh0aGlzLCAnb25jbG9zZScpKQ0KICBdOw0KfTsNCg0KLyoqDQogKiAiT3BlbnMiIHRoZSBzb2NrZXQuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLm9wZW4gPQ0KU29ja2V0LnByb3RvdHlwZS5jb25uZWN0ID0gZnVuY3Rpb24gKCkgew0KICBpZiAodGhpcy5jb25uZWN0ZWQpIHJldHVybiB0aGlzOw0KDQogIHRoaXMuc3ViRXZlbnRzKCk7DQogIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3Blbg0KICBpZiAoJ29wZW4nID09PSB0aGlzLmlvLnJlYWR5U3RhdGUpIHRoaXMub25vcGVuKCk7DQogIHRoaXMuZW1pdCgnY29ubmVjdGluZycpOw0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuDQogKg0KICogQHJldHVybiB7U29ja2V0fSBzZWxmDQogKiBAYXBpIHB1YmxpYw0KICovDQoNClNvY2tldC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uICgpIHsNCiAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cyk7DQogIGFyZ3MudW5zaGlmdCgnbWVzc2FnZScpOw0KICB0aGlzLmVtaXQuYXBwbHkodGhpcywgYXJncyk7DQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBPdmVycmlkZSBgZW1pdGAuDQogKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQgbmFtZQ0KICogQHJldHVybiB7U29ja2V0fSBzZWxmDQogKiBAYXBpIHB1YmxpYw0KICovDQoNClNvY2tldC5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIChldikgew0KICBpZiAoZXZlbnRzLmhhc093blByb3BlcnR5KGV2KSkgew0KICAgIGVtaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsNCiAgICByZXR1cm4gdGhpczsNCiAgfQ0KDQogIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpOw0KICB2YXIgcGFyc2VyVHlwZSA9IHBhcnNlci5FVkVOVDsgLy8gZGVmYXVsdA0KICBpZiAoaGFzQmluKGFyZ3MpKSB7IHBhcnNlclR5cGUgPSBwYXJzZXIuQklOQVJZX0VWRU5UOyB9IC8vIGJpbmFyeQ0KICB2YXIgcGFja2V0ID0geyB0eXBlOiBwYXJzZXJUeXBlLCBkYXRhOiBhcmdzIH07DQoNCiAgcGFja2V0Lm9wdGlvbnMgPSB7fTsNCiAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSAhdGhpcy5mbGFncyB8fCBmYWxzZSAhPT0gdGhpcy5mbGFncy5jb21wcmVzczsNCg0KICAvLyBldmVudCBhY2sgY2FsbGJhY2sNCiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHsNCiAgICBkZWJ1ZygnZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkJywgdGhpcy5pZHMpOw0KICAgIHRoaXMuYWNrc1t0aGlzLmlkc10gPSBhcmdzLnBvcCgpOw0KICAgIHBhY2tldC5pZCA9IHRoaXMuaWRzKys7DQogIH0NCg0KICBpZiAodGhpcy5jb25uZWN0ZWQpIHsNCiAgICB0aGlzLnBhY2tldChwYWNrZXQpOw0KICB9IGVsc2Ugew0KICAgIHRoaXMuc2VuZEJ1ZmZlci5wdXNoKHBhY2tldCk7DQogIH0NCg0KICBkZWxldGUgdGhpcy5mbGFnczsNCg0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogU2VuZHMgYSBwYWNrZXQuDQogKg0KICogQHBhcmFtIHtPYmplY3R9IHBhY2tldA0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5wYWNrZXQgPSBmdW5jdGlvbiAocGFja2V0KSB7DQogIHBhY2tldC5uc3AgPSB0aGlzLm5zcDsNCiAgdGhpcy5pby5wYWNrZXQocGFja2V0KTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC4NCiAqDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLm9ub3BlbiA9IGZ1bmN0aW9uICgpIHsNCiAgZGVidWcoJ3RyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZycpOw0KDQogIC8vIHdyaXRlIGNvbm5lY3QgcGFja2V0IGlmIG5lY2Vzc2FyeQ0KICBpZiAoJy8nICE9PSB0aGlzLm5zcCkgew0KICAgIGlmICh0aGlzLnF1ZXJ5KSB7DQogICAgICB0aGlzLnBhY2tldCh7dHlwZTogcGFyc2VyLkNPTk5FQ1QsIHF1ZXJ5OiB0aGlzLnF1ZXJ5fSk7DQogICAgfSBlbHNlIHsNCiAgICAgIHRoaXMucGFja2V0KHt0eXBlOiBwYXJzZXIuQ09OTkVDVH0pOw0KICAgIH0NCiAgfQ0KfTsNCg0KLyoqDQogKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gcmVhc29uDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLm9uY2xvc2UgPSBmdW5jdGlvbiAocmVhc29uKSB7DQogIGRlYnVnKCdjbG9zZSAoJXMpJywgcmVhc29uKTsNCiAgdGhpcy5jb25uZWN0ZWQgPSBmYWxzZTsNCiAgdGhpcy5kaXNjb25uZWN0ZWQgPSB0cnVlOw0KICBkZWxldGUgdGhpcy5pZDsNCiAgdGhpcy5lbWl0KCdkaXNjb25uZWN0JywgcmVhc29uKTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gcGFja2V0DQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLm9ucGFja2V0ID0gZnVuY3Rpb24gKHBhY2tldCkgew0KICBpZiAocGFja2V0Lm5zcCAhPT0gdGhpcy5uc3ApIHJldHVybjsNCg0KICBzd2l0Y2ggKHBhY2tldC50eXBlKSB7DQogICAgY2FzZSBwYXJzZXIuQ09OTkVDVDoNCiAgICAgIHRoaXMub25jb25uZWN0KCk7DQogICAgICBicmVhazsNCg0KICAgIGNhc2UgcGFyc2VyLkVWRU5UOg0KICAgICAgdGhpcy5vbmV2ZW50KHBhY2tldCk7DQogICAgICBicmVhazsNCg0KICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9FVkVOVDoNCiAgICAgIHRoaXMub25ldmVudChwYWNrZXQpOw0KICAgICAgYnJlYWs7DQoNCiAgICBjYXNlIHBhcnNlci5BQ0s6DQogICAgICB0aGlzLm9uYWNrKHBhY2tldCk7DQogICAgICBicmVhazsNCg0KICAgIGNhc2UgcGFyc2VyLkJJTkFSWV9BQ0s6DQogICAgICB0aGlzLm9uYWNrKHBhY2tldCk7DQogICAgICBicmVhazsNCg0KICAgIGNhc2UgcGFyc2VyLkRJU0NPTk5FQ1Q6DQogICAgICB0aGlzLm9uZGlzY29ubmVjdCgpOw0KICAgICAgYnJlYWs7DQoNCiAgICBjYXNlIHBhcnNlci5FUlJPUjoNCiAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBwYWNrZXQuZGF0YSk7DQogICAgICBicmVhazsNCiAgfQ0KfTsNCg0KLyoqDQogKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBldmVudC4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gcGFja2V0DQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLm9uZXZlbnQgPSBmdW5jdGlvbiAocGFja2V0KSB7DQogIHZhciBhcmdzID0gcGFja2V0LmRhdGEgfHwgW107DQogIGRlYnVnKCdlbWl0dGluZyBldmVudCAlaicsIGFyZ3MpOw0KDQogIGlmIChudWxsICE9IHBhY2tldC5pZCkgew0KICAgIGRlYnVnKCdhdHRhY2hpbmcgYWNrIGNhbGxiYWNrIHRvIGV2ZW50Jyk7DQogICAgYXJncy5wdXNoKHRoaXMuYWNrKHBhY2tldC5pZCkpOw0KICB9DQoNCiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7DQogICAgZW1pdC5hcHBseSh0aGlzLCBhcmdzKTsNCiAgfSBlbHNlIHsNCiAgICB0aGlzLnJlY2VpdmVCdWZmZXIucHVzaChhcmdzKTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBQcm9kdWNlcyBhbiBhY2sgY2FsbGJhY2sgdG8gZW1pdCB3aXRoIGFuIGV2ZW50Lg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClNvY2tldC5wcm90b3R5cGUuYWNrID0gZnVuY3Rpb24gKGlkKSB7DQogIHZhciBzZWxmID0gdGhpczsNCiAgdmFyIHNlbnQgPSBmYWxzZTsNCiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsNCiAgICAvLyBwcmV2ZW50IGRvdWJsZSBjYWxsYmFja3MNCiAgICBpZiAoc2VudCkgcmV0dXJuOw0KICAgIHNlbnQgPSB0cnVlOw0KICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMpOw0KICAgIGRlYnVnKCdzZW5kaW5nIGFjayAlaicsIGFyZ3MpOw0KDQogICAgdmFyIHR5cGUgPSBoYXNCaW4oYXJncykgPyBwYXJzZXIuQklOQVJZX0FDSyA6IHBhcnNlci5BQ0s7DQogICAgc2VsZi5wYWNrZXQoew0KICAgICAgdHlwZTogdHlwZSwNCiAgICAgIGlkOiBpZCwNCiAgICAgIGRhdGE6IGFyZ3MNCiAgICB9KTsNCiAgfTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gYSBzZXJ2ZXIgYWNrbm93bGVnZW1lbnQuDQogKg0KICogQHBhcmFtIHtPYmplY3R9IHBhY2tldA0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5vbmFjayA9IGZ1bmN0aW9uIChwYWNrZXQpIHsNCiAgdmFyIGFjayA9IHRoaXMuYWNrc1twYWNrZXQuaWRdOw0KICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGFjaykgew0KICAgIGRlYnVnKCdjYWxsaW5nIGFjayAlcyB3aXRoICVqJywgcGFja2V0LmlkLCBwYWNrZXQuZGF0YSk7DQogICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTsNCiAgICBkZWxldGUgdGhpcy5hY2tzW3BhY2tldC5pZF07DQogIH0gZWxzZSB7DQogICAgZGVidWcoJ2JhZCBhY2sgJXMnLCBwYWNrZXQuaWQpOw0KICB9DQp9Ow0KDQovKioNCiAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0Lg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClNvY2tldC5wcm90b3R5cGUub25jb25uZWN0ID0gZnVuY3Rpb24gKCkgew0KICB0aGlzLmNvbm5lY3RlZCA9IHRydWU7DQogIHRoaXMuZGlzY29ubmVjdGVkID0gZmFsc2U7DQogIHRoaXMuZW1pdCgnY29ubmVjdCcpOw0KICB0aGlzLmVtaXRCdWZmZXJlZCgpOw0KfTsNCg0KLyoqDQogKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNClNvY2tldC5wcm90b3R5cGUuZW1pdEJ1ZmZlcmVkID0gZnVuY3Rpb24gKCkgew0KICB2YXIgaTsNCiAgZm9yIChpID0gMDsgaSA8IHRoaXMucmVjZWl2ZUJ1ZmZlci5sZW5ndGg7IGkrKykgew0KICAgIGVtaXQuYXBwbHkodGhpcywgdGhpcy5yZWNlaXZlQnVmZmVyW2ldKTsNCiAgfQ0KICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTsNCg0KICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aDsgaSsrKSB7DQogICAgdGhpcy5wYWNrZXQodGhpcy5zZW5kQnVmZmVyW2ldKTsNCiAgfQ0KICB0aGlzLnNlbmRCdWZmZXIgPSBbXTsNCn07DQoNCi8qKg0KICogQ2FsbGVkIHVwb24gc2VydmVyIGRpc2Nvbm5lY3QuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5vbmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7DQogIGRlYnVnKCdzZXJ2ZXIgZGlzY29ubmVjdCAoJXMpJywgdGhpcy5uc3ApOw0KICB0aGlzLmRlc3Ryb3koKTsNCiAgdGhpcy5vbmNsb3NlKCdpbyBzZXJ2ZXIgZGlzY29ubmVjdCcpOw0KfTsNCg0KLyoqDQogKiBDYWxsZWQgdXBvbiBmb3JjZWQgY2xpZW50L3NlcnZlciBzaWRlIGRpc2Nvbm5lY3Rpb25zLA0KICogdGhpcyBtZXRob2QgZW5zdXJlcyB0aGUgbWFuYWdlciBzdG9wcyB0cmFja2luZyB1cyBhbmQNCiAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLg0KICoNCiAqIEBhcGkgcHJpdmF0ZS4NCiAqLw0KDQpTb2NrZXQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7DQogIGlmICh0aGlzLnN1YnMpIHsNCiAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnMNCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3Vicy5sZW5ndGg7IGkrKykgew0KICAgICAgdGhpcy5zdWJzW2ldLmRlc3Ryb3koKTsNCiAgICB9DQogICAgdGhpcy5zdWJzID0gbnVsbDsNCiAgfQ0KDQogIHRoaXMuaW8uZGVzdHJveSh0aGlzKTsNCn07DQoNCi8qKg0KICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS4NCiAqDQogKiBAcmV0dXJuIHtTb2NrZXR9IHNlbGYNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KU29ja2V0LnByb3RvdHlwZS5jbG9zZSA9DQpTb2NrZXQucHJvdG90eXBlLmRpc2Nvbm5lY3QgPSBmdW5jdGlvbiAoKSB7DQogIGlmICh0aGlzLmNvbm5lY3RlZCkgew0KICAgIGRlYnVnKCdwZXJmb3JtaW5nIGRpc2Nvbm5lY3QgKCVzKScsIHRoaXMubnNwKTsNCiAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHBhcnNlci5ESVNDT05ORUNUIH0pOw0KICB9DQoNCiAgLy8gcmVtb3ZlIHNvY2tldCBmcm9tIHBvb2wNCiAgdGhpcy5kZXN0cm95KCk7DQoNCiAgaWYgKHRoaXMuY29ubmVjdGVkKSB7DQogICAgLy8gZmlyZSBldmVudHMNCiAgICB0aGlzLm9uY2xvc2UoJ2lvIGNsaWVudCBkaXNjb25uZWN0Jyk7DQogIH0NCiAgcmV0dXJuIHRoaXM7DQp9Ow0KDQovKioNCiAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuDQogKg0KICogQHBhcmFtIHtCb29sZWFufSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YQ0KICogQHJldHVybiB7U29ja2V0fSBzZWxmDQogKiBAYXBpIHB1YmxpYw0KICovDQoNClNvY2tldC5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbiAoY29tcHJlc3MpIHsNCiAgdGhpcy5mbGFncyA9IHRoaXMuZmxhZ3MgfHwge307DQogIHRoaXMuZmxhZ3MuY29tcHJlc3MgPSBjb21wcmVzczsNCiAgcmV0dXJuIHRoaXM7DQp9Ow0KDQp9LHsiLi9vbiI6MzUsImNvbXBvbmVudC1iaW5kIjo3LCJjb21wb25lbnQtZW1pdHRlciI6MzgsImRlYnVnIjoxMCwiaGFzLWJpbmFyeSI6MjUsInNvY2tldC5pby1wYXJzZXIiOjQwLCJ0by1hcnJheSI6NDN9XSwzNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQooZnVuY3Rpb24gKGdsb2JhbCl7DQoNCi8qKg0KICogTW9kdWxlIGRlcGVuZGVuY2llcy4NCiAqLw0KDQp2YXIgcGFyc2V1cmkgPSByZXF1aXJlKCdwYXJzZXVyaScpOw0KdmFyIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2V0LmlvLWNsaWVudDp1cmwnKTsNCg0KLyoqDQogKiBNb2R1bGUgZXhwb3J0cy4NCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IHVybDsNCg0KLyoqDQogKiBVUkwgcGFyc2VyLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwNCiAqIEBwYXJhbSB7T2JqZWN0fSBBbiBvYmplY3QgbWVhbnQgdG8gbWltaWMgd2luZG93LmxvY2F0aW9uLg0KICogICAgICAgICAgICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi4NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZnVuY3Rpb24gdXJsICh1cmksIGxvYykgew0KICB2YXIgb2JqID0gdXJpOw0KDQogIC8vIGRlZmF1bHQgdG8gd2luZG93LmxvY2F0aW9uDQogIGxvYyA9IGxvYyB8fCBnbG9iYWwubG9jYXRpb247DQogIGlmIChudWxsID09IHVyaSkgdXJpID0gbG9jLnByb3RvY29sICsgJy8vJyArIGxvYy5ob3N0Ow0KDQogIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydA0KICBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiB1cmkpIHsNCiAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDApKSB7DQogICAgICBpZiAoJy8nID09PSB1cmkuY2hhckF0KDEpKSB7DQogICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHVyaSA9IGxvYy5ob3N0ICsgdXJpOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlwvXC8vLnRlc3QodXJpKSkgew0KICAgICAgZGVidWcoJ3Byb3RvY29sLWxlc3MgdXJsICVzJywgdXJpKTsNCiAgICAgIGlmICgndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGxvYykgew0KICAgICAgICB1cmkgPSBsb2MucHJvdG9jb2wgKyAnLy8nICsgdXJpOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgdXJpID0gJ2h0dHBzOi8vJyArIHVyaTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvLyBwYXJzZQ0KICAgIGRlYnVnKCdwYXJzZSAlcycsIHVyaSk7DQogICAgb2JqID0gcGFyc2V1cmkodXJpKTsNCiAgfQ0KDQogIC8vIG1ha2Ugc3VyZSB3ZSB0cmVhdCBgbG9jYWxob3N0OjgwYCBhbmQgYGxvY2FsaG9zdGAgZXF1YWxseQ0KICBpZiAoIW9iai5wb3J0KSB7DQogICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7DQogICAgICBvYmoucG9ydCA9ICc4MCc7DQogICAgfSBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHsNCiAgICAgIG9iai5wb3J0ID0gJzQ0Myc7DQogICAgfQ0KICB9DQoNCiAgb2JqLnBhdGggPSBvYmoucGF0aCB8fCAnLyc7DQoNCiAgdmFyIGlwdjYgPSBvYmouaG9zdC5pbmRleE9mKCc6JykgIT09IC0xOw0KICB2YXIgaG9zdCA9IGlwdjYgPyAnWycgKyBvYmouaG9zdCArICddJyA6IG9iai5ob3N0Ow0KDQogIC8vIGRlZmluZSB1bmlxdWUgaWQNCiAgb2JqLmlkID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgJzonICsgb2JqLnBvcnQ7DQogIC8vIGRlZmluZSBocmVmDQogIG9iai5ocmVmID0gb2JqLnByb3RvY29sICsgJzovLycgKyBob3N0ICsgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyAnJyA6ICgnOicgKyBvYmoucG9ydCkpOw0KDQogIHJldHVybiBvYmo7DQp9DQoNCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQ0KDQp9LHsiZGVidWciOjEwLCJwYXJzZXVyaSI6MzJ9XSwzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7DQoNCi8qKg0KICogRXhwb3NlIGBFbWl0dGVyYC4NCiAqLw0KDQptb2R1bGUuZXhwb3J0cyA9IEVtaXR0ZXI7DQoNCi8qKg0KICogSW5pdGlhbGl6ZSBhIG5ldyBgRW1pdHRlcmAuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpmdW5jdGlvbiBFbWl0dGVyKG9iaikgew0KICBpZiAob2JqKSByZXR1cm4gbWl4aW4ob2JqKTsNCn07DQoNCi8qKg0KICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gb2JqDQogKiBAcmV0dXJuIHtPYmplY3R9DQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBtaXhpbihvYmopIHsNCiAgZm9yICh2YXIga2V5IGluIEVtaXR0ZXIucHJvdG90eXBlKSB7DQogICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldOw0KICB9DQogIHJldHVybiBvYmo7DQp9DQoNCi8qKg0KICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQNCiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuDQogKiBAcmV0dXJuIHtFbWl0dGVyfQ0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpFbWl0dGVyLnByb3RvdHlwZS5vbiA9DQpFbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXsNCiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9Ow0KICAodGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSA9IHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gfHwgW10pDQogICAgLnB1c2goZm4pOw0KICByZXR1cm4gdGhpczsNCn07DQoNCi8qKg0KICogQWRkcyBhbiBgZXZlbnRgIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBpbnZva2VkIGEgc2luZ2xlDQogKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudA0KICogQHBhcmFtIHtGdW5jdGlvbn0gZm4NCiAqIEByZXR1cm4ge0VtaXR0ZXJ9DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCkVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbihldmVudCwgZm4pew0KICBmdW5jdGlvbiBvbigpIHsNCiAgICB0aGlzLm9mZihldmVudCwgb24pOw0KICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7DQogIH0NCg0KICBvbi5mbiA9IGZuOw0KICB0aGlzLm9uKGV2ZW50LCBvbik7DQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBSZW1vdmUgdGhlIGdpdmVuIGNhbGxiYWNrIGZvciBgZXZlbnRgIG9yIGFsbA0KICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50DQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbg0KICogQHJldHVybiB7RW1pdHRlcn0NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KRW1pdHRlci5wcm90b3R5cGUub2ZmID0NCkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0NCkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycyA9DQpFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXsNCiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9Ow0KDQogIC8vIGFsbA0KICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7DQogICAgdGhpcy5fY2FsbGJhY2tzID0ge307DQogICAgcmV0dXJuIHRoaXM7DQogIH0NCg0KICAvLyBzcGVjaWZpYyBldmVudA0KICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTsNCiAgaWYgKCFjYWxsYmFja3MpIHJldHVybiB0aGlzOw0KDQogIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnMNCiAgaWYgKDEgPT0gYXJndW1lbnRzLmxlbmd0aCkgew0KICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdOw0KICAgIHJldHVybiB0aGlzOw0KICB9DQoNCiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXINCiAgdmFyIGNiOw0KICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykgew0KICAgIGNiID0gY2FsbGJhY2tzW2ldOw0KICAgIGlmIChjYiA9PT0gZm4gfHwgY2IuZm4gPT09IGZuKSB7DQogICAgICBjYWxsYmFja3Muc3BsaWNlKGksIDEpOw0KICAgICAgYnJlYWs7DQogICAgfQ0KICB9DQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBFbWl0IGBldmVudGAgd2l0aCB0aGUgZ2l2ZW4gYXJncy4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gZXZlbnQNCiAqIEBwYXJhbSB7TWl4ZWR9IC4uLg0KICogQHJldHVybiB7RW1pdHRlcn0NCiAqLw0KDQpFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24oZXZlbnQpew0KICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307DQogIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpDQogICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdOw0KDQogIGlmIChjYWxsYmFja3MpIHsNCiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7DQogICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNhbGxiYWNrcy5sZW5ndGg7IGkgPCBsZW47ICsraSkgew0KICAgICAgY2FsbGJhY2tzW2ldLmFwcGx5KHRoaXMsIGFyZ3MpOw0KICAgIH0NCiAgfQ0KDQogIHJldHVybiB0aGlzOw0KfTsNCg0KLyoqDQogKiBSZXR1cm4gYXJyYXkgb2YgY2FsbGJhY2tzIGZvciBgZXZlbnRgLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudA0KICogQHJldHVybiB7QXJyYXl9DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCkVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uKGV2ZW50KXsNCiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9Ow0KICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XSB8fCBbXTsNCn07DQoNCi8qKg0KICogQ2hlY2sgaWYgdGhpcyBlbWl0dGVyIGhhcyBgZXZlbnRgIGhhbmRsZXJzLg0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudA0KICogQHJldHVybiB7Qm9vbGVhbn0NCiAqIEBhcGkgcHVibGljDQogKi8NCg0KRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpew0KICByZXR1cm4gISEgdGhpcy5saXN0ZW5lcnMoZXZlbnQpLmxlbmd0aDsNCn07DQoNCn0se31dLDM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCihmdW5jdGlvbiAoZ2xvYmFsKXsNCi8qZ2xvYmFsIEJsb2IsRmlsZSovDQoNCi8qKg0KICogTW9kdWxlIHJlcXVpcmVtZW50cw0KICovDQoNCnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpOw0KdmFyIGlzQnVmID0gcmVxdWlyZSgnLi9pcy1idWZmZXInKTsNCg0KLyoqDQogKiBSZXBsYWNlcyBldmVyeSBCdWZmZXIgfCBBcnJheUJ1ZmZlciBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLg0KICogQW55dGhpbmcgd2l0aCBibG9icyBvciBmaWxlcyBzaG91bGQgYmUgZmVkIHRocm91Z2ggcmVtb3ZlQmxvYnMgYmVmb3JlIGNvbWluZw0KICogaGVyZS4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gcGFja2V0IC0gc29ja2V0LmlvIGV2ZW50IHBhY2tldA0KICogQHJldHVybiB7T2JqZWN0fSB3aXRoIGRlY29uc3RydWN0ZWQgcGFja2V0IGFuZCBsaXN0IG9mIGJ1ZmZlcnMNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZXhwb3J0cy5kZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCl7DQogIHZhciBidWZmZXJzID0gW107DQogIHZhciBwYWNrZXREYXRhID0gcGFja2V0LmRhdGE7DQoNCiAgZnVuY3Rpb24gX2RlY29uc3RydWN0UGFja2V0KGRhdGEpIHsNCiAgICBpZiAoIWRhdGEpIHJldHVybiBkYXRhOw0KDQogICAgaWYgKGlzQnVmKGRhdGEpKSB7DQogICAgICB2YXIgcGxhY2Vob2xkZXIgPSB7IF9wbGFjZWhvbGRlcjogdHJ1ZSwgbnVtOiBidWZmZXJzLmxlbmd0aCB9Ow0KICAgICAgYnVmZmVycy5wdXNoKGRhdGEpOw0KICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyOw0KICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkgew0KICAgICAgdmFyIG5ld0RhdGEgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpOw0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIG5ld0RhdGFbaV0gPSBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSk7DQogICAgICB9DQogICAgICByZXR1cm4gbmV3RGF0YTsNCiAgICB9IGVsc2UgaWYgKCdvYmplY3QnID09IHR5cGVvZiBkYXRhICYmICEoZGF0YSBpbnN0YW5jZW9mIERhdGUpKSB7DQogICAgICB2YXIgbmV3RGF0YSA9IHt9Ow0KICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHsNCiAgICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSk7DQogICAgICB9DQogICAgICByZXR1cm4gbmV3RGF0YTsNCiAgICB9DQogICAgcmV0dXJuIGRhdGE7DQogIH0NCg0KICB2YXIgcGFjayA9IHBhY2tldDsNCiAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEpOw0KICBwYWNrLmF0dGFjaG1lbnRzID0gYnVmZmVycy5sZW5ndGg7IC8vIG51bWJlciBvZiBiaW5hcnkgJ2F0dGFjaG1lbnRzJw0KICByZXR1cm4ge3BhY2tldDogcGFjaywgYnVmZmVyczogYnVmZmVyc307DQp9Ow0KDQovKioNCiAqIFJlY29uc3RydWN0cyBhIGJpbmFyeSBwYWNrZXQgZnJvbSBpdHMgcGxhY2Vob2xkZXIgcGFja2V0IGFuZCBidWZmZXJzDQogKg0KICogQHBhcmFtIHtPYmplY3R9IHBhY2tldCAtIGV2ZW50IHBhY2tldCB3aXRoIHBsYWNlaG9sZGVycw0KICogQHBhcmFtIHtBcnJheX0gYnVmZmVycyAtIGJpbmFyeSBidWZmZXJzIHRvIHB1dCBpbiBwbGFjZWhvbGRlciBwb3NpdGlvbnMNCiAqIEByZXR1cm4ge09iamVjdH0gcmVjb25zdHJ1Y3RlZCBwYWNrZXQNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGZ1bmN0aW9uKHBhY2tldCwgYnVmZmVycykgew0KICB2YXIgY3VyUGxhY2VIb2xkZXIgPSAwOw0KDQogIGZ1bmN0aW9uIF9yZWNvbnN0cnVjdFBhY2tldChkYXRhKSB7DQogICAgaWYgKGRhdGEgJiYgZGF0YS5fcGxhY2Vob2xkZXIpIHsNCiAgICAgIHZhciBidWYgPSBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpDQogICAgICByZXR1cm4gYnVmOw0KICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkgew0KICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7DQogICAgICAgIGRhdGFbaV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtpXSk7DQogICAgICB9DQogICAgICByZXR1cm4gZGF0YTsNCiAgICB9IGVsc2UgaWYgKGRhdGEgJiYgJ29iamVjdCcgPT0gdHlwZW9mIGRhdGEpIHsNCiAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7DQogICAgICAgIGRhdGFba2V5XSA9IF9yZWNvbnN0cnVjdFBhY2tldChkYXRhW2tleV0pOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIGRhdGE7DQogICAgfQ0KICAgIHJldHVybiBkYXRhOw0KICB9DQoNCiAgcGFja2V0LmRhdGEgPSBfcmVjb25zdHJ1Y3RQYWNrZXQocGFja2V0LmRhdGEpOw0KICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWwNCiAgcmV0dXJuIHBhY2tldDsNCn07DQoNCi8qKg0KICogQXN5bmNocm9ub3VzbHkgcmVtb3ZlcyBCbG9icyBvciBGaWxlcyBmcm9tIGRhdGEgdmlhDQogKiBGaWxlUmVhZGVyJ3MgcmVhZEFzQXJyYXlCdWZmZXIgbWV0aG9kLiBVc2VkIGJlZm9yZSBlbmNvZGluZw0KICogZGF0YSBhcyBtc2dwYWNrLiBDYWxscyBjYWxsYmFjayB3aXRoIHRoZSBibG9ibGVzcyBkYXRhLg0KICoNCiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhDQogKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjaw0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KZXhwb3J0cy5yZW1vdmVCbG9icyA9IGZ1bmN0aW9uKGRhdGEsIGNhbGxiYWNrKSB7DQogIGZ1bmN0aW9uIF9yZW1vdmVCbG9icyhvYmosIGN1cktleSwgY29udGFpbmluZ09iamVjdCkgew0KICAgIGlmICghb2JqKSByZXR1cm4gb2JqOw0KDQogICAgLy8gY29udmVydCBhbnkgYmxvYg0KICAgIGlmICgoZ2xvYmFsLkJsb2IgJiYgb2JqIGluc3RhbmNlb2YgQmxvYikgfHwNCiAgICAgICAgKGdsb2JhbC5GaWxlICYmIG9iaiBpbnN0YW5jZW9mIEZpbGUpKSB7DQogICAgICBwZW5kaW5nQmxvYnMrKzsNCg0KICAgICAgLy8gYXN5bmMgZmlsZXJlYWRlcg0KICAgICAgdmFyIGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOw0KICAgICAgZmlsZVJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbigpIHsgLy8gdGhpcy5yZXN1bHQgPT0gYXJyYXlidWZmZXINCiAgICAgICAgaWYgKGNvbnRhaW5pbmdPYmplY3QpIHsNCiAgICAgICAgICBjb250YWluaW5nT2JqZWN0W2N1cktleV0gPSB0aGlzLnJlc3VsdDsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlIHsNCiAgICAgICAgICBibG9ibGVzc0RhdGEgPSB0aGlzLnJlc3VsdDsNCiAgICAgICAgfQ0KDQogICAgICAgIC8vIGlmIG5vdGhpbmcgcGVuZGluZyBpdHMgY2FsbGJhY2sgdGltZQ0KICAgICAgICBpZighIC0tcGVuZGluZ0Jsb2JzKSB7DQogICAgICAgICAgY2FsbGJhY2soYmxvYmxlc3NEYXRhKTsNCiAgICAgICAgfQ0KICAgICAgfTsNCg0KICAgICAgZmlsZVJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihvYmopOyAvLyBibG9iIC0+IGFycmF5YnVmZmVyDQogICAgfSBlbHNlIGlmIChpc0FycmF5KG9iaikpIHsgLy8gaGFuZGxlIGFycmF5DQogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykgew0KICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2ldLCBpLCBvYmopOw0KICAgICAgfQ0KICAgIH0gZWxzZSBpZiAob2JqICYmICdvYmplY3QnID09IHR5cGVvZiBvYmogJiYgIWlzQnVmKG9iaikpIHsgLy8gYW5kIG9iamVjdA0KICAgICAgZm9yICh2YXIga2V5IGluIG9iaikgew0KICAgICAgICBfcmVtb3ZlQmxvYnMob2JqW2tleV0sIGtleSwgb2JqKTsNCiAgICAgIH0NCiAgICB9DQogIH0NCg0KICB2YXIgcGVuZGluZ0Jsb2JzID0gMDsNCiAgdmFyIGJsb2JsZXNzRGF0YSA9IGRhdGE7DQogIF9yZW1vdmVCbG9icyhibG9ibGVzc0RhdGEpOw0KICBpZiAoIXBlbmRpbmdCbG9icykgew0KICAgIGNhbGxiYWNrKGJsb2JsZXNzRGF0YSk7DQogIH0NCn07DQoNCn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQ0KDQp9LHsiLi9pcy1idWZmZXIiOjQxLCJpc2FycmF5IjoyOH1dLDQwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCg0KLyoqDQogKiBNb2R1bGUgZGVwZW5kZW5jaWVzLg0KICovDQoNCnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tldC5pby1wYXJzZXInKTsNCnZhciBqc29uID0gcmVxdWlyZSgnanNvbjMnKTsNCnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpOw0KdmFyIEVtaXR0ZXIgPSByZXF1aXJlKCdjb21wb25lbnQtZW1pdHRlcicpOw0KdmFyIGJpbmFyeSA9IHJlcXVpcmUoJy4vYmluYXJ5Jyk7DQp2YXIgaXNCdWYgPSByZXF1aXJlKCcuL2lzLWJ1ZmZlcicpOw0KDQovKioNCiAqIFByb3RvY29sIHZlcnNpb24uDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpleHBvcnRzLnByb3RvY29sID0gNDsNCg0KLyoqDQogKiBQYWNrZXQgdHlwZXMuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpleHBvcnRzLnR5cGVzID0gWw0KICAnQ09OTkVDVCcsDQogICdESVNDT05ORUNUJywNCiAgJ0VWRU5UJywNCiAgJ0FDSycsDQogICdFUlJPUicsDQogICdCSU5BUllfRVZFTlQnLA0KICAnQklOQVJZX0FDSycNCl07DQoNCi8qKg0KICogUGFja2V0IHR5cGUgYGNvbm5lY3RgLg0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZXhwb3J0cy5DT05ORUNUID0gMDsNCg0KLyoqDQogKiBQYWNrZXQgdHlwZSBgZGlzY29ubmVjdGAuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpleHBvcnRzLkRJU0NPTk5FQ1QgPSAxOw0KDQovKioNCiAqIFBhY2tldCB0eXBlIGBldmVudGAuDQogKg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpleHBvcnRzLkVWRU5UID0gMjsNCg0KLyoqDQogKiBQYWNrZXQgdHlwZSBgYWNrYC4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMuQUNLID0gMzsNCg0KLyoqDQogKiBQYWNrZXQgdHlwZSBgZXJyb3JgLg0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZXhwb3J0cy5FUlJPUiA9IDQ7DQoNCi8qKg0KICogUGFja2V0IHR5cGUgJ2JpbmFyeSBldmVudCcNCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMuQklOQVJZX0VWRU5UID0gNTsNCg0KLyoqDQogKiBQYWNrZXQgdHlwZSBgYmluYXJ5IGFja2AuIEZvciBhY2tzIHdpdGggYmluYXJ5IGFyZ3VtZW50cy4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMuQklOQVJZX0FDSyA9IDY7DQoNCi8qKg0KICogRW5jb2RlciBjb25zdHJ1Y3Rvci4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMuRW5jb2RlciA9IEVuY29kZXI7DQoNCi8qKg0KICogRGVjb2RlciBjb25zdHJ1Y3Rvci4NCiAqDQogKiBAYXBpIHB1YmxpYw0KICovDQoNCmV4cG9ydHMuRGVjb2RlciA9IERlY29kZXI7DQoNCi8qKg0KICogQSBzb2NrZXQuaW8gRW5jb2RlciBpbnN0YW5jZQ0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KZnVuY3Rpb24gRW5jb2RlcigpIHt9DQoNCi8qKg0KICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhDQogKiBidWZmZXIgc2VxdWVuY2UsIGRlcGVuZGluZyBvbiBwYWNrZXQgdHlwZS4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdA0KICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBoYW5kbGUgZW5jb2RpbmdzIChsaWtlbHkgZW5naW5lLndyaXRlKQ0KICogQHJldHVybiBDYWxscyBjYWxsYmFjayB3aXRoIEFycmF5IG9mIGVuY29kaW5ncw0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrKXsNCiAgZGVidWcoJ2VuY29kaW5nIHBhY2tldCAlaicsIG9iaik7DQoNCiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09IG9iai50eXBlIHx8IGV4cG9ydHMuQklOQVJZX0FDSyA9PSBvYmoudHlwZSkgew0KICAgIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spOw0KICB9DQogIGVsc2Ugew0KICAgIHZhciBlbmNvZGluZyA9IGVuY29kZUFzU3RyaW5nKG9iaik7DQogICAgY2FsbGJhY2soW2VuY29kaW5nXSk7DQogIH0NCn07DQoNCi8qKg0KICogRW5jb2RlIHBhY2tldCBhcyBzdHJpbmcuDQogKg0KICogQHBhcmFtIHtPYmplY3R9IHBhY2tldA0KICogQHJldHVybiB7U3RyaW5nfSBlbmNvZGVkDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBlbmNvZGVBc1N0cmluZyhvYmopIHsNCiAgdmFyIHN0ciA9ICcnOw0KICB2YXIgbnNwID0gZmFsc2U7DQoNCiAgLy8gZmlyc3QgaXMgdHlwZQ0KICBzdHIgKz0gb2JqLnR5cGU7DQoNCiAgLy8gYXR0YWNobWVudHMgaWYgd2UgaGF2ZSB0aGVtDQogIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PSBvYmoudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT0gb2JqLnR5cGUpIHsNCiAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzOw0KICAgIHN0ciArPSAnLSc7DQogIH0NCg0KICAvLyBpZiB3ZSBoYXZlIGEgbmFtZXNwYWNlIG90aGVyIHRoYW4gYC9gDQogIC8vIHdlIGFwcGVuZCBpdCBmb2xsb3dlZCBieSBhIGNvbW1hIGAsYA0KICBpZiAob2JqLm5zcCAmJiAnLycgIT0gb2JqLm5zcCkgew0KICAgIG5zcCA9IHRydWU7DQogICAgc3RyICs9IG9iai5uc3A7DQogIH0NCg0KICAvLyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSB0aGUgaWQNCiAgaWYgKG51bGwgIT0gb2JqLmlkKSB7DQogICAgaWYgKG5zcCkgew0KICAgICAgc3RyICs9ICcsJzsNCiAgICAgIG5zcCA9IGZhbHNlOw0KICAgIH0NCiAgICBzdHIgKz0gb2JqLmlkOw0KICB9DQoNCiAgLy8ganNvbiBkYXRhDQogIGlmIChudWxsICE9IG9iai5kYXRhKSB7DQogICAgaWYgKG5zcCkgc3RyICs9ICcsJzsNCiAgICBzdHIgKz0ganNvbi5zdHJpbmdpZnkob2JqLmRhdGEpOw0KICB9DQoNCiAgZGVidWcoJ2VuY29kZWQgJWogYXMgJXMnLCBvYmosIHN0cik7DQogIHJldHVybiBzdHI7DQp9DQoNCi8qKg0KICogRW5jb2RlIHBhY2tldCBhcyAnYnVmZmVyIHNlcXVlbmNlJyBieSByZW1vdmluZyBibG9icywgYW5kDQogKiBkZWNvbnN0cnVjdGluZyBwYWNrZXQgaW50byBvYmplY3Qgd2l0aCBwbGFjZWhvbGRlcnMgYW5kDQogKiBhIGxpc3Qgb2YgYnVmZmVycy4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gcGFja2V0DQogKiBAcmV0dXJuIHtCdWZmZXJ9IGVuY29kZWQNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCmZ1bmN0aW9uIGVuY29kZUFzQmluYXJ5KG9iaiwgY2FsbGJhY2spIHsNCg0KICBmdW5jdGlvbiB3cml0ZUVuY29kaW5nKGJsb2JsZXNzRGF0YSkgew0KICAgIHZhciBkZWNvbnN0cnVjdGlvbiA9IGJpbmFyeS5kZWNvbnN0cnVjdFBhY2tldChibG9ibGVzc0RhdGEpOw0KICAgIHZhciBwYWNrID0gZW5jb2RlQXNTdHJpbmcoZGVjb25zdHJ1Y3Rpb24ucGFja2V0KTsNCiAgICB2YXIgYnVmZmVycyA9IGRlY29uc3RydWN0aW9uLmJ1ZmZlcnM7DQoNCiAgICBidWZmZXJzLnVuc2hpZnQocGFjayk7IC8vIGFkZCBwYWNrZXQgaW5mbyB0byBiZWdpbm5pbmcgb2YgZGF0YSBsaXN0DQogICAgY2FsbGJhY2soYnVmZmVycyk7IC8vIHdyaXRlIGFsbCB0aGUgYnVmZmVycw0KICB9DQoNCiAgYmluYXJ5LnJlbW92ZUJsb2JzKG9iaiwgd3JpdGVFbmNvZGluZyk7DQp9DQoNCi8qKg0KICogQSBzb2NrZXQuaW8gRGVjb2RlciBpbnN0YW5jZQ0KICoNCiAqIEByZXR1cm4ge09iamVjdH0gZGVjb2Rlcg0KICogQGFwaSBwdWJsaWMNCiAqLw0KDQpmdW5jdGlvbiBEZWNvZGVyKCkgew0KICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsOw0KfQ0KDQovKioNCiAqIE1peCBpbiBgRW1pdHRlcmAgd2l0aCBEZWNvZGVyLg0KICovDQoNCkVtaXR0ZXIoRGVjb2Rlci5wcm90b3R5cGUpOw0KDQovKioNCiAqIERlY29kZXMgYW4gZWNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi4NCiAqDQogKiBAcGFyYW0ge1N0cmluZ30gb2JqIC0gZW5jb2RlZCBwYWNrZXQNCiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0DQogKiBAYXBpIHB1YmxpYw0KICovDQoNCkRlY29kZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG9iaikgew0KICB2YXIgcGFja2V0Ow0KICBpZiAoJ3N0cmluZycgPT0gdHlwZW9mIG9iaikgew0KICAgIHBhY2tldCA9IGRlY29kZVN0cmluZyhvYmopOw0KICAgIGlmIChleHBvcnRzLkJJTkFSWV9FVkVOVCA9PSBwYWNrZXQudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT0gcGFja2V0LnR5cGUpIHsgLy8gYmluYXJ5IHBhY2tldCdzIGpzb24NCiAgICAgIHRoaXMucmVjb25zdHJ1Y3RvciA9IG5ldyBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCk7DQoNCiAgICAgIC8vIG5vIGF0dGFjaG1lbnRzLCBsYWJlbGVkIGJpbmFyeSBidXQgbm8gYmluYXJ5IGRhdGEgdG8gZm9sbG93DQogICAgICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yLnJlY29uUGFjay5hdHRhY2htZW50cyA9PT0gMCkgew0KICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpOw0KICAgICAgfQ0KICAgIH0gZWxzZSB7IC8vIG5vbi1iaW5hcnkgZnVsbCBwYWNrZXQNCiAgICAgIHRoaXMuZW1pdCgnZGVjb2RlZCcsIHBhY2tldCk7DQogICAgfQ0KICB9DQogIGVsc2UgaWYgKGlzQnVmKG9iaikgfHwgb2JqLmJhc2U2NCkgeyAvLyByYXcgYmluYXJ5IGRhdGENCiAgICBpZiAoIXRoaXMucmVjb25zdHJ1Y3Rvcikgew0KICAgICAgdGhyb3cgbmV3IEVycm9yKCdnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXQnKTsNCiAgICB9IGVsc2Ugew0KICAgICAgcGFja2V0ID0gdGhpcy5yZWNvbnN0cnVjdG9yLnRha2VCaW5hcnlEYXRhKG9iaik7DQogICAgICBpZiAocGFja2V0KSB7IC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlcg0KICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsOw0KICAgICAgICB0aGlzLmVtaXQoJ2RlY29kZWQnLCBwYWNrZXQpOw0KICAgICAgfQ0KICAgIH0NCiAgfQ0KICBlbHNlIHsNCiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdHlwZTogJyArIG9iaik7DQogIH0NCn07DQoNCi8qKg0KICogRGVjb2RlIGEgcGFja2V0IFN0cmluZyAoSlNPTiBkYXRhKQ0KICoNCiAqIEBwYXJhbSB7U3RyaW5nfSBzdHINCiAqIEByZXR1cm4ge09iamVjdH0gcGFja2V0DQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBkZWNvZGVTdHJpbmcoc3RyKSB7DQogIHZhciBwID0ge307DQogIHZhciBpID0gMDsNCg0KICAvLyBsb29rIHVwIHR5cGUNCiAgcC50eXBlID0gTnVtYmVyKHN0ci5jaGFyQXQoMCkpOw0KICBpZiAobnVsbCA9PSBleHBvcnRzLnR5cGVzW3AudHlwZV0pIHJldHVybiBlcnJvcigpOw0KDQogIC8vIGxvb2sgdXAgYXR0YWNobWVudHMgaWYgdHlwZSBiaW5hcnkNCiAgaWYgKGV4cG9ydHMuQklOQVJZX0VWRU5UID09IHAudHlwZSB8fCBleHBvcnRzLkJJTkFSWV9BQ0sgPT0gcC50eXBlKSB7DQogICAgdmFyIGJ1ZiA9ICcnOw0KICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT0gJy0nKSB7DQogICAgICBidWYgKz0gc3RyLmNoYXJBdChpKTsNCiAgICAgIGlmIChpID09IHN0ci5sZW5ndGgpIGJyZWFrOw0KICAgIH0NCiAgICBpZiAoYnVmICE9IE51bWJlcihidWYpIHx8IHN0ci5jaGFyQXQoaSkgIT0gJy0nKSB7DQogICAgICB0aHJvdyBuZXcgRXJyb3IoJ0lsbGVnYWwgYXR0YWNobWVudHMnKTsNCiAgICB9DQogICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpOw0KICB9DQoNCiAgLy8gbG9vayB1cCBuYW1lc3BhY2UgKGlmIGFueSkNCiAgaWYgKCcvJyA9PSBzdHIuY2hhckF0KGkgKyAxKSkgew0KICAgIHAubnNwID0gJyc7DQogICAgd2hpbGUgKCsraSkgew0KICAgICAgdmFyIGMgPSBzdHIuY2hhckF0KGkpOw0KICAgICAgaWYgKCcsJyA9PSBjKSBicmVhazsNCiAgICAgIHAubnNwICs9IGM7DQogICAgICBpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhazsNCiAgICB9DQogIH0gZWxzZSB7DQogICAgcC5uc3AgPSAnLyc7DQogIH0NCg0KICAvLyBsb29rIHVwIGlkDQogIHZhciBuZXh0ID0gc3RyLmNoYXJBdChpICsgMSk7DQogIGlmICgnJyAhPT0gbmV4dCAmJiBOdW1iZXIobmV4dCkgPT0gbmV4dCkgew0KICAgIHAuaWQgPSAnJzsNCiAgICB3aGlsZSAoKytpKSB7DQogICAgICB2YXIgYyA9IHN0ci5jaGFyQXQoaSk7DQogICAgICBpZiAobnVsbCA9PSBjIHx8IE51bWJlcihjKSAhPSBjKSB7DQogICAgICAgIC0taTsNCiAgICAgICAgYnJlYWs7DQogICAgICB9DQogICAgICBwLmlkICs9IHN0ci5jaGFyQXQoaSk7DQogICAgICBpZiAoaSA9PSBzdHIubGVuZ3RoKSBicmVhazsNCiAgICB9DQogICAgcC5pZCA9IE51bWJlcihwLmlkKTsNCiAgfQ0KDQogIC8vIGxvb2sgdXAganNvbiBkYXRhDQogIGlmIChzdHIuY2hhckF0KCsraSkpIHsNCiAgICB0cnkgew0KICAgICAgcC5kYXRhID0ganNvbi5wYXJzZShzdHIuc3Vic3RyKGkpKTsNCiAgICB9IGNhdGNoKGUpew0KICAgICAgcmV0dXJuIGVycm9yKCk7DQogICAgfQ0KICB9DQoNCiAgZGVidWcoJ2RlY29kZWQgJXMgYXMgJWonLCBzdHIsIHApOw0KICByZXR1cm4gcDsNCn0NCg0KLyoqDQogKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlcw0KICoNCiAqIEBhcGkgcHVibGljDQogKi8NCg0KRGVjb2Rlci5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uKCkgew0KICBpZiAodGhpcy5yZWNvbnN0cnVjdG9yKSB7DQogICAgdGhpcy5yZWNvbnN0cnVjdG9yLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTsNCiAgfQ0KfTsNCg0KLyoqDQogKiBBIG1hbmFnZXIgb2YgYSBiaW5hcnkgZXZlbnQncyAnYnVmZmVyIHNlcXVlbmNlJy4gU2hvdWxkDQogKiBiZSBjb25zdHJ1Y3RlZCB3aGVuZXZlciBhIHBhY2tldCBvZiB0eXBlIEJJTkFSWV9FVkVOVCBpcw0KICogZGVjb2RlZC4NCiAqDQogKiBAcGFyYW0ge09iamVjdH0gcGFja2V0DQogKiBAcmV0dXJuIHtCaW5hcnlSZWNvbnN0cnVjdG9yfSBpbml0aWFsaXplZCByZWNvbnN0cnVjdG9yDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpmdW5jdGlvbiBCaW5hcnlSZWNvbnN0cnVjdG9yKHBhY2tldCkgew0KICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDsNCiAgdGhpcy5idWZmZXJzID0gW107DQp9DQoNCi8qKg0KICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvbg0KICogYWZ0ZXIgYSBCSU5BUllfRVZFTlQgcGFja2V0Lg0KICoNCiAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkDQogKiBAcmV0dXJuIHtudWxsIHwgT2JqZWN0fSByZXR1cm5zIG51bGwgaWYgbW9yZSBiaW5hcnkgZGF0YSBpcyBleHBlY3RlZCBvcg0KICogICBhIHJlY29uc3RydWN0ZWQgcGFja2V0IG9iamVjdCBpZiBhbGwgYnVmZmVycyBoYXZlIGJlZW4gcmVjZWl2ZWQuDQogKiBAYXBpIHByaXZhdGUNCiAqLw0KDQpCaW5hcnlSZWNvbnN0cnVjdG9yLnByb3RvdHlwZS50YWtlQmluYXJ5RGF0YSA9IGZ1bmN0aW9uKGJpbkRhdGEpIHsNCiAgdGhpcy5idWZmZXJzLnB1c2goYmluRGF0YSk7DQogIGlmICh0aGlzLmJ1ZmZlcnMubGVuZ3RoID09IHRoaXMucmVjb25QYWNrLmF0dGFjaG1lbnRzKSB7IC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdA0KICAgIHZhciBwYWNrZXQgPSBiaW5hcnkucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7DQogICAgdGhpcy5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7DQogICAgcmV0dXJuIHBhY2tldDsNCiAgfQ0KICByZXR1cm4gbnVsbDsNCn07DQoNCi8qKg0KICogQ2xlYW5zIHVwIGJpbmFyeSBwYWNrZXQgcmVjb25zdHJ1Y3Rpb24gdmFyaWFibGVzLg0KICoNCiAqIEBhcGkgcHJpdmF0ZQ0KICovDQoNCkJpbmFyeVJlY29uc3RydWN0b3IucHJvdG90eXBlLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24gPSBmdW5jdGlvbigpIHsNCiAgdGhpcy5yZWNvblBhY2sgPSBudWxsOw0KICB0aGlzLmJ1ZmZlcnMgPSBbXTsNCn07DQoNCmZ1bmN0aW9uIGVycm9yKGRhdGEpew0KICByZXR1cm4gew0KICAgIHR5cGU6IGV4cG9ydHMuRVJST1IsDQogICAgZGF0YTogJ3BhcnNlciBlcnJvcicNCiAgfTsNCn0NCg0KfSx7Ii4vYmluYXJ5IjozOSwiLi9pcy1idWZmZXIiOjQxLCJjb21wb25lbnQtZW1pdHRlciI6OCwiZGVidWciOjEwLCJpc2FycmF5IjoyOCwianNvbjMiOjQyfV0sNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KKGZ1bmN0aW9uIChnbG9iYWwpew0KDQptb2R1bGUuZXhwb3J0cyA9IGlzQnVmOw0KDQovKioNCiAqIFJldHVybnMgdHJ1ZSBpZiBvYmogaXMgYSBidWZmZXIgb3IgYW4gYXJyYXlidWZmZXIuDQogKg0KICogQGFwaSBwcml2YXRlDQogKi8NCg0KZnVuY3Rpb24gaXNCdWYob2JqKSB7DQogIHJldHVybiAoZ2xvYmFsLkJ1ZmZlciAmJiBnbG9iYWwuQnVmZmVyLmlzQnVmZmVyKG9iaikpIHx8DQogICAgICAgICAoZ2xvYmFsLkFycmF5QnVmZmVyICYmIG9iaiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTsNCn0NCg0KfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pDQoNCn0se31dLDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCihmdW5jdGlvbiAoZ2xvYmFsKXsNCi8qISBKU09OIHYzLjMuMiB8IGh0dHA6Ly9iZXN0aWVqcy5naXRodWIuaW8vanNvbjMgfCBDb3B5cmlnaHQgMjAxMi0yMDE0LCBLaXQgQ2FtYnJpZGdlIHwgaHR0cDovL2tpdC5taXQtbGljZW5zZS5vcmcgKi8NCjsoZnVuY3Rpb24gKCkgew0KICAvLyBEZXRlY3QgdGhlIGBkZWZpbmVgIGZ1bmN0aW9uIGV4cG9zZWQgYnkgYXN5bmNocm9ub3VzIG1vZHVsZSBsb2FkZXJzLiBUaGUNCiAgLy8gc3RyaWN0IGBkZWZpbmVgIGNoZWNrIGlzIG5lY2Vzc2FyeSBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIGByLmpzYC4NCiAgdmFyIGlzTG9hZGVyID0gdHlwZW9mIGRlZmluZSA9PT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kOw0KDQogIC8vIEEgc2V0IG9mIHR5cGVzIHVzZWQgdG8gZGlzdGluZ3Vpc2ggb2JqZWN0cyBmcm9tIHByaW1pdGl2ZXMuDQogIHZhciBvYmplY3RUeXBlcyA9IHsNCiAgICAiZnVuY3Rpb24iOiB0cnVlLA0KICAgICJvYmplY3QiOiB0cnVlDQogIH07DQoNCiAgLy8gRGV0ZWN0IHRoZSBgZXhwb3J0c2Agb2JqZWN0IGV4cG9zZWQgYnkgQ29tbW9uSlMgaW1wbGVtZW50YXRpb25zLg0KICB2YXIgZnJlZUV4cG9ydHMgPSBvYmplY3RUeXBlc1t0eXBlb2YgZXhwb3J0c10gJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzOw0KDQogIC8vIFVzZSB0aGUgYGdsb2JhbGAgb2JqZWN0IGV4cG9zZWQgYnkgTm9kZSAoaW5jbHVkaW5nIEJyb3dzZXJpZnkgdmlhDQogIC8vIGBpbnNlcnQtbW9kdWxlLWdsb2JhbHNgKSwgTmFyd2hhbCwgYW5kIFJpbmdvIGFzIHRoZSBkZWZhdWx0IGNvbnRleHQsDQogIC8vIGFuZCB0aGUgYHdpbmRvd2Agb2JqZWN0IGluIGJyb3dzZXJzLiBSaGlubyBleHBvcnRzIGEgYGdsb2JhbGAgZnVuY3Rpb24NCiAgLy8gaW5zdGVhZC4NCiAgdmFyIHJvb3QgPSBvYmplY3RUeXBlc1t0eXBlb2Ygd2luZG93XSAmJiB3aW5kb3cgfHwgdGhpcywNCiAgICAgIGZyZWVHbG9iYWwgPSBmcmVlRXhwb3J0cyAmJiBvYmplY3RUeXBlc1t0eXBlb2YgbW9kdWxlXSAmJiBtb2R1bGUgJiYgIW1vZHVsZS5ub2RlVHlwZSAmJiB0eXBlb2YgZ2xvYmFsID09ICJvYmplY3QiICYmIGdsb2JhbDsNCg0KICBpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbFsiZ2xvYmFsIl0gPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbFsid2luZG93Il0gPT09IGZyZWVHbG9iYWwgfHwgZnJlZUdsb2JhbFsic2VsZiJdID09PSBmcmVlR2xvYmFsKSkgew0KICAgIHJvb3QgPSBmcmVlR2xvYmFsOw0KICB9DQoNCiAgLy8gUHVibGljOiBJbml0aWFsaXplcyBKU09OIDMgdXNpbmcgdGhlIGdpdmVuIGBjb250ZXh0YCBvYmplY3QsIGF0dGFjaGluZyB0aGUNCiAgLy8gYHN0cmluZ2lmeWAgYW5kIGBwYXJzZWAgZnVuY3Rpb25zIHRvIHRoZSBzcGVjaWZpZWQgYGV4cG9ydHNgIG9iamVjdC4NCiAgZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQsIGV4cG9ydHMpIHsNCiAgICBjb250ZXh0IHx8IChjb250ZXh0ID0gcm9vdFsiT2JqZWN0Il0oKSk7DQogICAgZXhwb3J0cyB8fCAoZXhwb3J0cyA9IHJvb3RbIk9iamVjdCJdKCkpOw0KDQogICAgLy8gTmF0aXZlIGNvbnN0cnVjdG9yIGFsaWFzZXMuDQogICAgdmFyIE51bWJlciA9IGNvbnRleHRbIk51bWJlciJdIHx8IHJvb3RbIk51bWJlciJdLA0KICAgICAgICBTdHJpbmcgPSBjb250ZXh0WyJTdHJpbmciXSB8fCByb290WyJTdHJpbmciXSwNCiAgICAgICAgT2JqZWN0ID0gY29udGV4dFsiT2JqZWN0Il0gfHwgcm9vdFsiT2JqZWN0Il0sDQogICAgICAgIERhdGUgPSBjb250ZXh0WyJEYXRlIl0gfHwgcm9vdFsiRGF0ZSJdLA0KICAgICAgICBTeW50YXhFcnJvciA9IGNvbnRleHRbIlN5bnRheEVycm9yIl0gfHwgcm9vdFsiU3ludGF4RXJyb3IiXSwNCiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dFsiVHlwZUVycm9yIl0gfHwgcm9vdFsiVHlwZUVycm9yIl0sDQogICAgICAgIE1hdGggPSBjb250ZXh0WyJNYXRoIl0gfHwgcm9vdFsiTWF0aCJdLA0KICAgICAgICBuYXRpdmVKU09OID0gY29udGV4dFsiSlNPTiJdIHx8IHJvb3RbIkpTT04iXTsNCg0KICAgIC8vIERlbGVnYXRlIHRvIHRoZSBuYXRpdmUgYHN0cmluZ2lmeWAgYW5kIGBwYXJzZWAgaW1wbGVtZW50YXRpb25zLg0KICAgIGlmICh0eXBlb2YgbmF0aXZlSlNPTiA9PSAib2JqZWN0IiAmJiBuYXRpdmVKU09OKSB7DQogICAgICBleHBvcnRzLnN0cmluZ2lmeSA9IG5hdGl2ZUpTT04uc3RyaW5naWZ5Ow0KICAgICAgZXhwb3J0cy5wYXJzZSA9IG5hdGl2ZUpTT04ucGFyc2U7DQogICAgfQ0KDQogICAgLy8gQ29udmVuaWVuY2UgYWxpYXNlcy4NCiAgICB2YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLA0KICAgICAgICBnZXRDbGFzcyA9IG9iamVjdFByb3RvLnRvU3RyaW5nLA0KICAgICAgICBpc1Byb3BlcnR5LCBmb3JFYWNoLCB1bmRlZjsNCg0KICAgIC8vIFRlc3QgdGhlIGBEYXRlI2dldFVUQypgIG1ldGhvZHMuIEJhc2VkIG9uIHdvcmsgYnkgQFlhZmZsZS4NCiAgICB2YXIgaXNFeHRlbmRlZCA9IG5ldyBEYXRlKC0zNTA5ODI3MzM0NTczMjkyKTsNCiAgICB0cnkgew0KICAgICAgLy8gVGhlIGBnZXRVVENGdWxsWWVhcmAsIGBNb250aGAsIGFuZCBgRGF0ZWAgbWV0aG9kcyByZXR1cm4gbm9uc2Vuc2ljYWwNCiAgICAgIC8vIHJlc3VsdHMgZm9yIGNlcnRhaW4gZGF0ZXMgaW4gT3BlcmEgPj0gMTAuNTMuDQogICAgICBpc0V4dGVuZGVkID0gaXNFeHRlbmRlZC5nZXRVVENGdWxsWWVhcigpID09IC0xMDkyNTIgJiYgaXNFeHRlbmRlZC5nZXRVVENNb250aCgpID09PSAwICYmIGlzRXh0ZW5kZWQuZ2V0VVRDRGF0ZSgpID09PSAxICYmDQogICAgICAgIC8vIFNhZmFyaSA8IDIuMC4yIHN0b3JlcyB0aGUgaW50ZXJuYWwgbWlsbGlzZWNvbmQgdGltZSB2YWx1ZSBjb3JyZWN0bHksDQogICAgICAgIC8vIGJ1dCBjbGlwcyB0aGUgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBkYXRlIG1ldGhvZHMgdG8gdGhlIHJhbmdlIG9mDQogICAgICAgIC8vIHNpZ25lZCAzMi1iaXQgaW50ZWdlcnMgKFstMiAqKiAzMSwgMiAqKiAzMSAtIDFdKS4NCiAgICAgICAgaXNFeHRlbmRlZC5nZXRVVENIb3VycygpID09IDEwICYmIGlzRXh0ZW5kZWQuZ2V0VVRDTWludXRlcygpID09IDM3ICYmIGlzRXh0ZW5kZWQuZ2V0VVRDU2Vjb25kcygpID09IDYgJiYgaXNFeHRlbmRlZC5nZXRVVENNaWxsaXNlY29uZHMoKSA9PSA3MDg7DQogICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fQ0KDQogICAgLy8gSW50ZXJuYWw6IERldGVybWluZXMgd2hldGhlciB0aGUgbmF0aXZlIGBKU09OLnN0cmluZ2lmeWAgYW5kIGBwYXJzZWANCiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgYXJlIHNwZWMtY29tcGxpYW50LiBCYXNlZCBvbiB3b3JrIGJ5IEtlbiBTbnlkZXIuDQogICAgZnVuY3Rpb24gaGFzKG5hbWUpIHsNCiAgICAgIGlmIChoYXNbbmFtZV0gIT09IHVuZGVmKSB7DQogICAgICAgIC8vIFJldHVybiBjYWNoZWQgZmVhdHVyZSB0ZXN0IHJlc3VsdC4NCiAgICAgICAgcmV0dXJuIGhhc1tuYW1lXTsNCiAgICAgIH0NCiAgICAgIHZhciBpc1N1cHBvcnRlZDsNCiAgICAgIGlmIChuYW1lID09ICJidWctc3RyaW5nLWNoYXItaW5kZXgiKSB7DQogICAgICAgIC8vIElFIDw9IDcgZG9lc24ndCBzdXBwb3J0IGFjY2Vzc2luZyBzdHJpbmcgY2hhcmFjdGVycyB1c2luZyBzcXVhcmUNCiAgICAgICAgLy8gYnJhY2tldCBub3RhdGlvbi4gSUUgOCBvbmx5IHN1cHBvcnRzIHRoaXMgZm9yIHByaW1pdGl2ZXMuDQogICAgICAgIGlzU3VwcG9ydGVkID0gImEiWzBdICE9ICJhIjsNCiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSAianNvbiIpIHsNCiAgICAgICAgLy8gSW5kaWNhdGVzIHdoZXRoZXIgYm90aCBgSlNPTi5zdHJpbmdpZnlgIGFuZCBgSlNPTi5wYXJzZWAgYXJlDQogICAgICAgIC8vIHN1cHBvcnRlZC4NCiAgICAgICAgaXNTdXBwb3J0ZWQgPSBoYXMoImpzb24tc3RyaW5naWZ5IikgJiYgaGFzKCJqc29uLXBhcnNlIik7DQogICAgICB9IGVsc2Ugew0KICAgICAgICB2YXIgdmFsdWUsIHNlcmlhbGl6ZWQgPSAneyJhIjpbMSx0cnVlLGZhbHNlLG51bGwsIlxcdTAwMDBcXGJcXG5cXGZcXHJcXHQiXX0nOw0KICAgICAgICAvLyBUZXN0IGBKU09OLnN0cmluZ2lmeWAuDQogICAgICAgIGlmIChuYW1lID09ICJqc29uLXN0cmluZ2lmeSIpIHsNCiAgICAgICAgICB2YXIgc3RyaW5naWZ5ID0gZXhwb3J0cy5zdHJpbmdpZnksIHN0cmluZ2lmeVN1cHBvcnRlZCA9IHR5cGVvZiBzdHJpbmdpZnkgPT0gImZ1bmN0aW9uIiAmJiBpc0V4dGVuZGVkOw0KICAgICAgICAgIGlmIChzdHJpbmdpZnlTdXBwb3J0ZWQpIHsNCiAgICAgICAgICAgIC8vIEEgdGVzdCBmdW5jdGlvbiBvYmplY3Qgd2l0aCBhIGN1c3RvbSBgdG9KU09OYCBtZXRob2QuDQogICAgICAgICAgICAodmFsdWUgPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgICAgIHJldHVybiAxOw0KICAgICAgICAgICAgfSkudG9KU09OID0gdmFsdWU7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICBzdHJpbmdpZnlTdXBwb3J0ZWQgPQ0KICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggMy4xYjEgYW5kIGIyIHNlcmlhbGl6ZSBzdHJpbmcsIG51bWJlciwgYW5kIGJvb2xlYW4NCiAgICAgICAgICAgICAgICAvLyBwcmltaXRpdmVzIGFzIG9iamVjdCBsaXRlcmFscy4NCiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoMCkgPT09ICIwIiAmJg0KICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCBiMiwgYW5kIEpTT04gMiBzZXJpYWxpemUgd3JhcHBlZCBwcmltaXRpdmVzIGFzIG9iamVjdA0KICAgICAgICAgICAgICAgIC8vIGxpdGVyYWxzLg0KICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgTnVtYmVyKCkpID09PSAiMCIgJiYNCiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IFN0cmluZygpKSA9PSAnIiInICYmDQogICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIDIgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIHZhbHVlIGlzIGBudWxsYCwgYHVuZGVmaW5lZGAsIG9yDQogICAgICAgICAgICAgICAgLy8gZG9lcyBub3QgZGVmaW5lIGEgY2Fub25pY2FsIEpTT04gcmVwcmVzZW50YXRpb24gKHRoaXMgYXBwbGllcyB0bw0KICAgICAgICAgICAgICAgIC8vIG9iamVjdHMgd2l0aCBgdG9KU09OYCBwcm9wZXJ0aWVzIGFzIHdlbGwsICp1bmxlc3MqIHRoZXkgYXJlIG5lc3RlZA0KICAgICAgICAgICAgICAgIC8vIHdpdGhpbiBhbiBvYmplY3Qgb3IgYXJyYXkpLg0KICAgICAgICAgICAgICAgIHN0cmluZ2lmeShnZXRDbGFzcykgPT09IHVuZGVmICYmDQogICAgICAgICAgICAgICAgLy8gSUUgOCBzZXJpYWxpemVzIGB1bmRlZmluZWRgIGFzIGAidW5kZWZpbmVkImAuIFNhZmFyaSA8PSA1LjEuNyBhbmQNCiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMyBwYXNzIHRoaXMgdGVzdC4NCiAgICAgICAgICAgICAgICBzdHJpbmdpZnkodW5kZWYpID09PSB1bmRlZiAmJg0KICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuNyBhbmQgRkYgMy4xYjMgdGhyb3cgYEVycm9yYHMgYW5kIGBUeXBlRXJyb3JgcywNCiAgICAgICAgICAgICAgICAvLyByZXNwZWN0aXZlbHksIGlmIHRoZSB2YWx1ZSBpcyBvbWl0dGVkIGVudGlyZWx5Lg0KICAgICAgICAgICAgICAgIHN0cmluZ2lmeSgpID09PSB1bmRlZiAmJg0KICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCAyIHRocm93IGFuIGVycm9yIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBub3QgYSBudW1iZXIsDQogICAgICAgICAgICAgICAgLy8gc3RyaW5nLCBhcnJheSwgb2JqZWN0LCBCb29sZWFuLCBvciBgbnVsbGAgbGl0ZXJhbC4gVGhpcyBhcHBsaWVzIHRvDQogICAgICAgICAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGN1c3RvbSBgdG9KU09OYCBtZXRob2RzIGFzIHdlbGwsIHVubGVzcyB0aGV5IGFyZSBuZXN0ZWQNCiAgICAgICAgICAgICAgICAvLyBpbnNpZGUgb2JqZWN0IG9yIGFycmF5IGxpdGVyYWxzLiBZVUkgMy4wLjBiMSBpZ25vcmVzIGN1c3RvbSBgdG9KU09OYA0KICAgICAgICAgICAgICAgIC8vIG1ldGhvZHMgZW50aXJlbHkuDQogICAgICAgICAgICAgICAgc3RyaW5naWZ5KHZhbHVlKSA9PT0gIjEiICYmDQogICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt2YWx1ZV0pID09ICJbMV0iICYmDQogICAgICAgICAgICAgICAgLy8gUHJvdG90eXBlIDw9IDEuNi4xIHNlcmlhbGl6ZXMgYFt1bmRlZmluZWRdYCBhcyBgIltdImAgaW5zdGVhZCBvZg0KICAgICAgICAgICAgICAgIC8vIGAiW251bGxdImAuDQogICAgICAgICAgICAgICAgc3RyaW5naWZ5KFt1bmRlZl0pID09ICJbbnVsbF0iICYmDQogICAgICAgICAgICAgICAgLy8gWVVJIDMuMC4wYjEgZmFpbHMgdG8gc2VyaWFsaXplIGBudWxsYCBsaXRlcmFscy4NCiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobnVsbCkgPT0gIm51bGwiICYmDQogICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIDIgaGFsdHMgc2VyaWFsaXphdGlvbiBpZiBhbiBhcnJheSBjb250YWlucyBhIGZ1bmN0aW9uOg0KICAgICAgICAgICAgICAgIC8vIGBbMSwgdHJ1ZSwgZ2V0Q2xhc3MsIDFdYCBzZXJpYWxpemVzIGFzICJbMSx0cnVlLF0sIi4gRkYgMy4xYjMNCiAgICAgICAgICAgICAgICAvLyBlbGlkZXMgbm9uLUpTT04gdmFsdWVzIGZyb20gb2JqZWN0cyBhbmQgYXJyYXlzLCB1bmxlc3MgdGhleQ0KICAgICAgICAgICAgICAgIC8vIGRlZmluZSBjdXN0b20gYHRvSlNPTmAgbWV0aG9kcy4NCiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoW3VuZGVmLCBnZXRDbGFzcywgbnVsbF0pID09ICJbbnVsbCxudWxsLG51bGxdIiAmJg0KICAgICAgICAgICAgICAgIC8vIFNpbXBsZSBzZXJpYWxpemF0aW9uIHRlc3QuIEZGIDMuMWIxIHVzZXMgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2VzDQogICAgICAgICAgICAgICAgLy8gd2hlcmUgY2hhcmFjdGVyIGVzY2FwZSBjb2RlcyBhcmUgZXhwZWN0ZWQgKGUuZy4sIGBcYmAgPT4gYFx1MDAwOGApLg0KICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh7ICJhIjogW3ZhbHVlLCB0cnVlLCBmYWxzZSwgbnVsbCwgIlx4MDBcYlxuXGZcclx0Il0gfSkgPT0gc2VyaWFsaXplZCAmJg0KICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxIGFuZCBiMiBpZ25vcmUgdGhlIGBmaWx0ZXJgIGFuZCBgd2lkdGhgIGFyZ3VtZW50cy4NCiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobnVsbCwgdmFsdWUpID09PSAiMSIgJiYNCiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoWzEsIDJdLCBudWxsLCAxKSA9PSAiW1xuIDEsXG4gMlxuXSIgJiYNCiAgICAgICAgICAgICAgICAvLyBKU09OIDIsIFByb3RvdHlwZSA8PSAxLjcsIGFuZCBvbGRlciBXZWJLaXQgYnVpbGRzIGluY29ycmVjdGx5DQogICAgICAgICAgICAgICAgLy8gc2VyaWFsaXplIGV4dGVuZGVkIHllYXJzLg0KICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSgtOC42NGUxNSkpID09ICciLTI3MTgyMS0wNC0yMFQwMDowMDowMC4wMDBaIicgJiYNCiAgICAgICAgICAgICAgICAvLyBUaGUgbWlsbGlzZWNvbmRzIGFyZSBvcHRpb25hbCBpbiBFUyA1LCBidXQgcmVxdWlyZWQgaW4gNS4xLg0KICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSg4LjY0ZTE1KSkgPT0gJyIrMjc1NzYwLTA5LTEzVDAwOjAwOjAwLjAwMFoiJyAmJg0KICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggPD0gMTEuMCBpbmNvcnJlY3RseSBzZXJpYWxpemVzIHllYXJzIHByaW9yIHRvIDAgYXMgbmVnYXRpdmUNCiAgICAgICAgICAgICAgICAvLyBmb3VyLWRpZ2l0IHllYXJzIGluc3RlYWQgb2Ygc2l4LWRpZ2l0IHllYXJzLiBDcmVkaXRzOiBAWWFmZmxlLg0KICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSgtNjIxOTg3NTUyZTUpKSA9PSAnIi0wMDAwMDEtMDEtMDFUMDA6MDA6MDAuMDAwWiInICYmDQogICAgICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDUuMS41IGFuZCBPcGVyYSA+PSAxMC41MyBpbmNvcnJlY3RseSBzZXJpYWxpemUgbWlsbGlzZWNvbmQNCiAgICAgICAgICAgICAgICAvLyB2YWx1ZXMgbGVzcyB0aGFuIDEwMDAuIENyZWRpdHM6IEBZYWZmbGUuDQogICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC0xKSkgPT0gJyIxOTY5LTEyLTMxVDIzOjU5OjU5Ljk5OVoiJzsNCiAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikgew0KICAgICAgICAgICAgICBzdHJpbmdpZnlTdXBwb3J0ZWQgPSBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgaXNTdXBwb3J0ZWQgPSBzdHJpbmdpZnlTdXBwb3J0ZWQ7DQogICAgICAgIH0NCiAgICAgICAgLy8gVGVzdCBgSlNPTi5wYXJzZWAuDQogICAgICAgIGlmIChuYW1lID09ICJqc29uLXBhcnNlIikgew0KICAgICAgICAgIHZhciBwYXJzZSA9IGV4cG9ydHMucGFyc2U7DQogICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZSA9PSAiZnVuY3Rpb24iKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAvLyBGRiAzLjFiMSwgYjIgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYSBiYXJlIGxpdGVyYWwgaXMgcHJvdmlkZWQuDQogICAgICAgICAgICAgIC8vIENvbmZvcm1pbmcgaW1wbGVtZW50YXRpb25zIHNob3VsZCBhbHNvIGNvZXJjZSB0aGUgaW5pdGlhbCBhcmd1bWVudCB0bw0KICAgICAgICAgICAgICAvLyBhIHN0cmluZyBwcmlvciB0byBwYXJzaW5nLg0KICAgICAgICAgICAgICBpZiAocGFyc2UoIjAiKSA9PT0gMCAmJiAhcGFyc2UoZmFsc2UpKSB7DQogICAgICAgICAgICAgICAgLy8gU2ltcGxlIHBhcnNpbmcgdGVzdC4NCiAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcnNlKHNlcmlhbGl6ZWQpOw0KICAgICAgICAgICAgICAgIHZhciBwYXJzZVN1cHBvcnRlZCA9IHZhbHVlWyJhIl0ubGVuZ3RoID09IDUgJiYgdmFsdWVbImEiXVswXSA9PT0gMTsNCiAgICAgICAgICAgICAgICBpZiAocGFyc2VTdXBwb3J0ZWQpIHsNCiAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuMiBhbmQgRkYgMy4xYjEgYWxsb3cgdW5lc2NhcGVkIHRhYnMgaW4gc3RyaW5ncy4NCiAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSAhcGFyc2UoJyJcdCInKTsNCiAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge30NCiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkgew0KICAgICAgICAgICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICAgIC8vIEZGIDQuMCBhbmQgNC4wLjEgYWxsb3cgbGVhZGluZyBgK2Agc2lnbnMgYW5kIGxlYWRpbmcNCiAgICAgICAgICAgICAgICAgICAgICAvLyBkZWNpbWFsIHBvaW50cy4gRkYgNC4wLCA0LjAuMSwgYW5kIElFIDktMTAgYWxzbyBhbGxvdw0KICAgICAgICAgICAgICAgICAgICAgIC8vIGNlcnRhaW4gb2N0YWwgbGl0ZXJhbHMuDQogICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBwYXJzZSgiMDEiKSAhPT0gMTsNCiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fQ0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlU3VwcG9ydGVkKSB7DQogICAgICAgICAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgICAgICAgLy8gRkYgNC4wLCA0LjAuMSwgYW5kIFJoaW5vIDEuN1IzLVI0IGFsbG93IHRyYWlsaW5nIGRlY2ltYWwNCiAgICAgICAgICAgICAgICAgICAgICAvLyBwb2ludHMuIFRoZXNlIGVudmlyb25tZW50cywgYWxvbmcgd2l0aCBGRiAzLjFiMSBhbmQgMiwNCiAgICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIGFsbG93IHRyYWlsaW5nIGNvbW1hcyBpbiBKU09OIG9iamVjdHMgYW5kIGFycmF5cy4NCiAgICAgICAgICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9IHBhcnNlKCIxLiIpICE9PSAxOw0KICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHsNCiAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBmYWxzZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgaXNTdXBwb3J0ZWQgPSBwYXJzZVN1cHBvcnRlZDsNCiAgICAgICAgfQ0KICAgICAgfQ0KICAgICAgcmV0dXJuIGhhc1tuYW1lXSA9ICEhaXNTdXBwb3J0ZWQ7DQogICAgfQ0KDQogICAgaWYgKCFoYXMoImpzb24iKSkgew0KICAgICAgLy8gQ29tbW9uIGBbW0NsYXNzXV1gIG5hbWUgYWxpYXNlcy4NCiAgICAgIHZhciBmdW5jdGlvbkNsYXNzID0gIltvYmplY3QgRnVuY3Rpb25dIiwNCiAgICAgICAgICBkYXRlQ2xhc3MgPSAiW29iamVjdCBEYXRlXSIsDQogICAgICAgICAgbnVtYmVyQ2xhc3MgPSAiW29iamVjdCBOdW1iZXJdIiwNCiAgICAgICAgICBzdHJpbmdDbGFzcyA9ICJbb2JqZWN0IFN0cmluZ10iLA0KICAgICAgICAgIGFycmF5Q2xhc3MgPSAiW29iamVjdCBBcnJheV0iLA0KICAgICAgICAgIGJvb2xlYW5DbGFzcyA9ICJbb2JqZWN0IEJvb2xlYW5dIjsNCg0KICAgICAgLy8gRGV0ZWN0IGluY29tcGxldGUgc3VwcG9ydCBmb3IgYWNjZXNzaW5nIHN0cmluZyBjaGFyYWN0ZXJzIGJ5IGluZGV4Lg0KICAgICAgdmFyIGNoYXJJbmRleEJ1Z2d5ID0gaGFzKCJidWctc3RyaW5nLWNoYXItaW5kZXgiKTsNCg0KICAgICAgLy8gRGVmaW5lIGFkZGl0aW9uYWwgdXRpbGl0eSBtZXRob2RzIGlmIHRoZSBgRGF0ZWAgbWV0aG9kcyBhcmUgYnVnZ3kuDQogICAgICBpZiAoIWlzRXh0ZW5kZWQpIHsNCiAgICAgICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjsNCiAgICAgICAgLy8gQSBtYXBwaW5nIGJldHdlZW4gdGhlIG1vbnRocyBvZiB0aGUgeWVhciBhbmQgdGhlIG51bWJlciBvZiBkYXlzIGJldHdlZW4NCiAgICAgICAgLy8gSmFudWFyeSAxc3QgYW5kIHRoZSBmaXJzdCBvZiB0aGUgcmVzcGVjdGl2ZSBtb250aC4NCiAgICAgICAgdmFyIE1vbnRocyA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF07DQogICAgICAgIC8vIEludGVybmFsOiBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgZGF5cyBiZXR3ZWVuIHRoZSBVbml4IGVwb2NoIGFuZCB0aGUNCiAgICAgICAgLy8gZmlyc3QgZGF5IG9mIHRoZSBnaXZlbiBtb250aC4NCiAgICAgICAgdmFyIGdldERheSA9IGZ1bmN0aW9uICh5ZWFyLCBtb250aCkgew0KICAgICAgICAgIHJldHVybiBNb250aHNbbW9udGhdICsgMzY1ICogKHllYXIgLSAxOTcwKSArIGZsb29yKCh5ZWFyIC0gMTk2OSArIChtb250aCA9ICsobW9udGggPiAxKSkpIC8gNCkgLSBmbG9vcigoeWVhciAtIDE5MDEgKyBtb250aCkgLyAxMDApICsgZmxvb3IoKHllYXIgLSAxNjAxICsgbW9udGgpIC8gNDAwKTsNCiAgICAgICAgfTsNCiAgICAgIH0NCg0KICAgICAgLy8gSW50ZXJuYWw6IERldGVybWluZXMgaWYgYSBwcm9wZXJ0eSBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiB0aGUgZ2l2ZW4NCiAgICAgIC8vIG9iamVjdC4gRGVsZWdhdGVzIHRvIHRoZSBuYXRpdmUgYE9iamVjdCNoYXNPd25Qcm9wZXJ0eWAgbWV0aG9kLg0KICAgICAgaWYgKCEoaXNQcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5KSkgew0KICAgICAgICBpc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7DQogICAgICAgICAgdmFyIG1lbWJlcnMgPSB7fSwgY29uc3RydWN0b3I7DQogICAgICAgICAgaWYgKChtZW1iZXJzLl9fcHJvdG9fXyA9IG51bGwsIG1lbWJlcnMuX19wcm90b19fID0gew0KICAgICAgICAgICAgLy8gVGhlICpwcm90byogcHJvcGVydHkgY2Fubm90IGJlIHNldCBtdWx0aXBsZSB0aW1lcyBpbiByZWNlbnQNCiAgICAgICAgICAgIC8vIHZlcnNpb25zIG9mIEZpcmVmb3ggYW5kIFNlYU1vbmtleS4NCiAgICAgICAgICAgICJ0b1N0cmluZyI6IDENCiAgICAgICAgICB9LCBtZW1iZXJzKS50b1N0cmluZyAhPSBnZXRDbGFzcykgew0KICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDIuMC4zIGRvZXNuJ3QgaW1wbGVtZW50IGBPYmplY3QjaGFzT3duUHJvcGVydHlgLCBidXQNCiAgICAgICAgICAgIC8vIHN1cHBvcnRzIHRoZSBtdXRhYmxlICpwcm90byogcHJvcGVydHkuDQogICAgICAgICAgICBpc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7DQogICAgICAgICAgICAgIC8vIENhcHR1cmUgYW5kIGJyZWFrIHRoZSBvYmplY3QncyBwcm90b3R5cGUgY2hhaW4gKHNlZSBzZWN0aW9uIDguNi4yDQogICAgICAgICAgICAgIC8vIG9mIHRoZSBFUyA1LjEgc3BlYykuIFRoZSBwYXJlbnRoZXNpemVkIGV4cHJlc3Npb24gcHJldmVudHMgYW4NCiAgICAgICAgICAgICAgLy8gdW5zYWZlIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBDbG9zdXJlIENvbXBpbGVyLg0KICAgICAgICAgICAgICB2YXIgb3JpZ2luYWwgPSB0aGlzLl9fcHJvdG9fXywgcmVzdWx0ID0gcHJvcGVydHkgaW4gKHRoaXMuX19wcm90b19fID0gbnVsbCwgdGhpcyk7DQogICAgICAgICAgICAgIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHByb3RvdHlwZSBjaGFpbi4NCiAgICAgICAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBvcmlnaW5hbDsNCiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgICAgIH07DQogICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIC8vIENhcHR1cmUgYSByZWZlcmVuY2UgdG8gdGhlIHRvcC1sZXZlbCBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4NCiAgICAgICAgICAgIGNvbnN0cnVjdG9yID0gbWVtYmVycy5jb25zdHJ1Y3RvcjsNCiAgICAgICAgICAgIC8vIFVzZSB0aGUgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSB0byBzaW11bGF0ZSBgT2JqZWN0I2hhc093blByb3BlcnR5YCBpbg0KICAgICAgICAgICAgLy8gb3RoZXIgZW52aXJvbm1lbnRzLg0KICAgICAgICAgICAgaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkgew0KICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gKHRoaXMuY29uc3RydWN0b3IgfHwgY29uc3RydWN0b3IpLnByb3RvdHlwZTsNCiAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgIShwcm9wZXJ0eSBpbiBwYXJlbnQgJiYgdGhpc1twcm9wZXJ0eV0gPT09IHBhcmVudFtwcm9wZXJ0eV0pOw0KICAgICAgICAgICAgfTsNCiAgICAgICAgICB9DQogICAgICAgICAgbWVtYmVycyA9IG51bGw7DQogICAgICAgICAgcmV0dXJuIGlzUHJvcGVydHkuY2FsbCh0aGlzLCBwcm9wZXJ0eSk7DQogICAgICAgIH07DQogICAgICB9DQoNCiAgICAgIC8vIEludGVybmFsOiBOb3JtYWxpemVzIHRoZSBgZm9yLi4uaW5gIGl0ZXJhdGlvbiBhbGdvcml0aG0gYWNyb3NzDQogICAgICAvLyBlbnZpcm9ubWVudHMuIEVhY2ggZW51bWVyYXRlZCBrZXkgaXMgeWllbGRlZCB0byBhIGBjYWxsYmFja2AgZnVuY3Rpb24uDQogICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHsNCiAgICAgICAgdmFyIHNpemUgPSAwLCBQcm9wZXJ0aWVzLCBtZW1iZXJzLCBwcm9wZXJ0eTsNCg0KICAgICAgICAvLyBUZXN0cyBmb3IgYnVncyBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCdzIGBmb3IuLi5pbmAgYWxnb3JpdGhtLiBUaGUNCiAgICAgICAgLy8gYHZhbHVlT2ZgIHByb3BlcnR5IGluaGVyaXRzIHRoZSBub24tZW51bWVyYWJsZSBmbGFnIGZyb20NCiAgICAgICAgLy8gYE9iamVjdC5wcm90b3R5cGVgIGluIG9sZGVyIHZlcnNpb25zIG9mIElFLCBOZXRzY2FwZSwgYW5kIE1vemlsbGEuDQogICAgICAgIChQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgIHRoaXMudmFsdWVPZiA9IDA7DQogICAgICAgIH0pLnByb3RvdHlwZS52YWx1ZU9mID0gMDsNCg0KICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGBQcm9wZXJ0aWVzYCBjbGFzcy4NCiAgICAgICAgbWVtYmVycyA9IG5ldyBQcm9wZXJ0aWVzKCk7DQogICAgICAgIGZvciAocHJvcGVydHkgaW4gbWVtYmVycykgew0KICAgICAgICAgIC8vIElnbm9yZSBhbGwgcHJvcGVydGllcyBpbmhlcml0ZWQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuDQogICAgICAgICAgaWYgKGlzUHJvcGVydHkuY2FsbChtZW1iZXJzLCBwcm9wZXJ0eSkpIHsNCiAgICAgICAgICAgIHNpemUrKzsNCiAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgUHJvcGVydGllcyA9IG1lbWJlcnMgPSBudWxsOw0KDQogICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgaXRlcmF0aW9uIGFsZ29yaXRobS4NCiAgICAgICAgaWYgKCFzaXplKSB7DQogICAgICAgICAgLy8gQSBsaXN0IG9mIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgaW5oZXJpdGVkIGZyb20gYE9iamVjdC5wcm90b3R5cGVgLg0KICAgICAgICAgIG1lbWJlcnMgPSBbInZhbHVlT2YiLCAidG9TdHJpbmciLCAidG9Mb2NhbGVTdHJpbmciLCAicHJvcGVydHlJc0VudW1lcmFibGUiLCAiaXNQcm90b3R5cGVPZiIsICJoYXNPd25Qcm9wZXJ0eSIsICJjb25zdHJ1Y3RvciJdOw0KICAgICAgICAgIC8vIElFIDw9IDgsIE1vemlsbGEgMS4wLCBhbmQgTmV0c2NhcGUgNi4yIGlnbm9yZSBzaGFkb3dlZCBub24tZW51bWVyYWJsZQ0KICAgICAgICAgIC8vIHByb3BlcnRpZXMuDQogICAgICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7DQogICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eSwgbGVuZ3RoOw0KICAgICAgICAgICAgdmFyIGhhc1Byb3BlcnR5ID0gIWlzRnVuY3Rpb24gJiYgdHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciAhPSAiZnVuY3Rpb24iICYmIG9iamVjdFR5cGVzW3R5cGVvZiBvYmplY3QuaGFzT3duUHJvcGVydHldICYmIG9iamVjdC5oYXNPd25Qcm9wZXJ0eSB8fCBpc1Byb3BlcnR5Ow0KICAgICAgICAgICAgZm9yIChwcm9wZXJ0eSBpbiBvYmplY3QpIHsNCiAgICAgICAgICAgICAgLy8gR2Vja28gPD0gMS4wIGVudW1lcmF0ZXMgdGhlIGBwcm90b3R5cGVgIHByb3BlcnR5IG9mIGZ1bmN0aW9ucyB1bmRlcg0KICAgICAgICAgICAgICAvLyBjZXJ0YWluIGNvbmRpdGlvbnM7IElFIGRvZXMgbm90Lg0KICAgICAgICAgICAgICBpZiAoIShpc0Z1bmN0aW9uICYmIHByb3BlcnR5ID09ICJwcm90b3R5cGUiKSAmJiBoYXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7DQogICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIGZvciBlYWNoIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5Lg0KICAgICAgICAgICAgZm9yIChsZW5ndGggPSBtZW1iZXJzLmxlbmd0aDsgcHJvcGVydHkgPSBtZW1iZXJzWy0tbGVuZ3RoXTsgaGFzUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSAmJiBjYWxsYmFjayhwcm9wZXJ0eSkpOw0KICAgICAgICAgIH07DQogICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PSAyKSB7DQogICAgICAgICAgLy8gU2FmYXJpIDw9IDIuMC40IGVudW1lcmF0ZXMgc2hhZG93ZWQgcHJvcGVydGllcyB0d2ljZS4NCiAgICAgICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHsNCiAgICAgICAgICAgIC8vIENyZWF0ZSBhIHNldCBvZiBpdGVyYXRlZCBwcm9wZXJ0aWVzLg0KICAgICAgICAgICAgdmFyIG1lbWJlcnMgPSB7fSwgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eTsNCiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7DQogICAgICAgICAgICAgIC8vIFN0b3JlIGVhY2ggcHJvcGVydHkgbmFtZSB0byBwcmV2ZW50IGRvdWJsZSBlbnVtZXJhdGlvbi4gVGhlDQogICAgICAgICAgICAgIC8vIGBwcm90b3R5cGVgIHByb3BlcnR5IG9mIGZ1bmN0aW9ucyBpcyBub3QgZW51bWVyYXRlZCBkdWUgdG8gY3Jvc3MtDQogICAgICAgICAgICAgIC8vIGVudmlyb25tZW50IGluY29uc2lzdGVuY2llcy4NCiAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSAicHJvdG90eXBlIikgJiYgIWlzUHJvcGVydHkuY2FsbChtZW1iZXJzLCBwcm9wZXJ0eSkgJiYgKG1lbWJlcnNbcHJvcGVydHldID0gMSkgJiYgaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7DQogICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgfTsNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAvLyBObyBidWdzIGRldGVjdGVkOyB1c2UgdGhlIHN0YW5kYXJkIGBmb3IuLi5pbmAgYWxnb3JpdGhtLg0KICAgICAgICAgIGZvckVhY2ggPSBmdW5jdGlvbiAob2JqZWN0LCBjYWxsYmFjaykgew0KICAgICAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSBnZXRDbGFzcy5jYWxsKG9iamVjdCkgPT0gZnVuY3Rpb25DbGFzcywgcHJvcGVydHksIGlzQ29uc3RydWN0b3I7DQogICAgICAgICAgICBmb3IgKHByb3BlcnR5IGluIG9iamVjdCkgew0KICAgICAgICAgICAgICBpZiAoIShpc0Z1bmN0aW9uICYmIHByb3BlcnR5ID09ICJwcm90b3R5cGUiKSAmJiBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkgJiYgIShpc0NvbnN0cnVjdG9yID0gcHJvcGVydHkgPT09ICJjb25zdHJ1Y3RvciIpKSB7DQogICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIGZvciB0aGUgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSBkdWUgdG8NCiAgICAgICAgICAgIC8vIGNyb3NzLWVudmlyb25tZW50IGluY29uc2lzdGVuY2llcy4NCiAgICAgICAgICAgIGlmIChpc0NvbnN0cnVjdG9yIHx8IGlzUHJvcGVydHkuY2FsbChvYmplY3QsIChwcm9wZXJ0eSA9ICJjb25zdHJ1Y3RvciIpKSkgew0KICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgfTsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gZm9yRWFjaChvYmplY3QsIGNhbGxiYWNrKTsNCiAgICAgIH07DQoNCiAgICAgIC8vIFB1YmxpYzogU2VyaWFsaXplcyBhIEphdmFTY3JpcHQgYHZhbHVlYCBhcyBhIEpTT04gc3RyaW5nLiBUaGUgb3B0aW9uYWwNCiAgICAgIC8vIGBmaWx0ZXJgIGFyZ3VtZW50IG1heSBzcGVjaWZ5IGVpdGhlciBhIGZ1bmN0aW9uIHRoYXQgYWx0ZXJzIGhvdyBvYmplY3QgYW5kDQogICAgICAvLyBhcnJheSBtZW1iZXJzIGFyZSBzZXJpYWxpemVkLCBvciBhbiBhcnJheSBvZiBzdHJpbmdzIGFuZCBudW1iZXJzIHRoYXQNCiAgICAgIC8vIGluZGljYXRlcyB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBzZXJpYWxpemVkLiBUaGUgb3B0aW9uYWwgYHdpZHRoYA0KICAgICAgLy8gYXJndW1lbnQgbWF5IGJlIGVpdGhlciBhIHN0cmluZyBvciBudW1iZXIgdGhhdCBzcGVjaWZpZXMgdGhlIGluZGVudGF0aW9uDQogICAgICAvLyBsZXZlbCBvZiB0aGUgb3V0cHV0Lg0KICAgICAgaWYgKCFoYXMoImpzb24tc3RyaW5naWZ5IikpIHsNCiAgICAgICAgLy8gSW50ZXJuYWw6IEEgbWFwIG9mIGNvbnRyb2wgY2hhcmFjdGVycyBhbmQgdGhlaXIgZXNjYXBlZCBlcXVpdmFsZW50cy4NCiAgICAgICAgdmFyIEVzY2FwZXMgPSB7DQogICAgICAgICAgOTI6ICJcXFxcIiwNCiAgICAgICAgICAzNDogJ1xcIicsDQogICAgICAgICAgODogIlxcYiIsDQogICAgICAgICAgMTI6ICJcXGYiLA0KICAgICAgICAgIDEwOiAiXFxuIiwNCiAgICAgICAgICAxMzogIlxcciIsDQogICAgICAgICAgOTogIlxcdCINCiAgICAgICAgfTsNCg0KICAgICAgICAvLyBJbnRlcm5hbDogQ29udmVydHMgYHZhbHVlYCBpbnRvIGEgemVyby1wYWRkZWQgc3RyaW5nIHN1Y2ggdGhhdCBpdHMNCiAgICAgICAgLy8gbGVuZ3RoIGlzIGF0IGxlYXN0IGVxdWFsIHRvIGB3aWR0aGAuIFRoZSBgd2lkdGhgIG11c3QgYmUgPD0gNi4NCiAgICAgICAgdmFyIGxlYWRpbmdaZXJvZXMgPSAiMDAwMDAwIjsNCiAgICAgICAgdmFyIHRvUGFkZGVkU3RyaW5nID0gZnVuY3Rpb24gKHdpZHRoLCB2YWx1ZSkgew0KICAgICAgICAgIC8vIFRoZSBgfHwgMGAgZXhwcmVzc2lvbiBpcyBuZWNlc3NhcnkgdG8gd29yayBhcm91bmQgYSBidWcgaW4NCiAgICAgICAgICAvLyBPcGVyYSA8PSA3LjU0dTIgd2hlcmUgYDAgPT0gLTBgLCBidXQgYFN0cmluZygtMCkgIT09ICIwImAuDQogICAgICAgICAgcmV0dXJuIChsZWFkaW5nWmVyb2VzICsgKHZhbHVlIHx8IDApKS5zbGljZSgtd2lkdGgpOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIEludGVybmFsOiBEb3VibGUtcXVvdGVzIGEgc3RyaW5nIGB2YWx1ZWAsIHJlcGxhY2luZyBhbGwgQVNDSUkgY29udHJvbA0KICAgICAgICAvLyBjaGFyYWN0ZXJzIChjaGFyYWN0ZXJzIHdpdGggY29kZSB1bml0IHZhbHVlcyBiZXR3ZWVuIDAgYW5kIDMxKSB3aXRoDQogICAgICAgIC8vIHRoZWlyIGVzY2FwZWQgZXF1aXZhbGVudHMuIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgdGhlDQogICAgICAgIC8vIGBRdW90ZSh2YWx1ZSlgIG9wZXJhdGlvbiBkZWZpbmVkIGluIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMuDQogICAgICAgIHZhciB1bmljb2RlUHJlZml4ID0gIlxcdTAwIjsNCiAgICAgICAgdmFyIHF1b3RlID0gZnVuY3Rpb24gKHZhbHVlKSB7DQogICAgICAgICAgdmFyIHJlc3VsdCA9ICciJywgaW5kZXggPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGgsIHVzZUNoYXJJbmRleCA9ICFjaGFySW5kZXhCdWdneSB8fCBsZW5ndGggPiAxMDsNCiAgICAgICAgICB2YXIgc3ltYm9scyA9IHVzZUNoYXJJbmRleCAmJiAoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5zcGxpdCgiIikgOiB2YWx1ZSk7DQogICAgICAgICAgZm9yICg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7DQogICAgICAgICAgICB2YXIgY2hhckNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KTsNCiAgICAgICAgICAgIC8vIElmIHRoZSBjaGFyYWN0ZXIgaXMgYSBjb250cm9sIGNoYXJhY3RlciwgYXBwZW5kIGl0cyBVbmljb2RlIG9yDQogICAgICAgICAgICAvLyBzaG9ydGhhbmQgZXNjYXBlIHNlcXVlbmNlOyBvdGhlcndpc2UsIGFwcGVuZCB0aGUgY2hhcmFjdGVyIGFzLWlzLg0KICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkgew0KICAgICAgICAgICAgICBjYXNlIDg6IGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMjogY2FzZSAxMzogY2FzZSAzNDogY2FzZSA5MjoNCiAgICAgICAgICAgICAgICByZXN1bHQgKz0gRXNjYXBlc1tjaGFyQ29kZV07DQogICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgIGRlZmF1bHQ6DQogICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMzIpIHsNCiAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB1bmljb2RlUHJlZml4ICsgdG9QYWRkZWRTdHJpbmcoMiwgY2hhckNvZGUudG9TdHJpbmcoMTYpKTsNCiAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXN1bHQgKz0gdXNlQ2hhckluZGV4ID8gc3ltYm9sc1tpbmRleF0gOiB2YWx1ZS5jaGFyQXQoaW5kZXgpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJyInOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIEludGVybmFsOiBSZWN1cnNpdmVseSBzZXJpYWxpemVzIGFuIG9iamVjdC4gSW1wbGVtZW50cyB0aGUNCiAgICAgICAgLy8gYFN0cihrZXksIGhvbGRlcilgLCBgSk8odmFsdWUpYCwgYW5kIGBKQSh2YWx1ZSlgIG9wZXJhdGlvbnMuDQogICAgICAgIHZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAocHJvcGVydHksIG9iamVjdCwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjaykgew0KICAgICAgICAgIHZhciB2YWx1ZSwgY2xhc3NOYW1lLCB5ZWFyLCBtb250aCwgZGF0ZSwgdGltZSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcywgcmVzdWx0cywgZWxlbWVudCwgaW5kZXgsIGxlbmd0aCwgcHJlZml4LCByZXN1bHQ7DQogICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIC8vIE5lY2Vzc2FyeSBmb3IgaG9zdCBvYmplY3Qgc3VwcG9ydC4NCiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W3Byb3BlcnR5XTsNCiAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9DQogICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAib2JqZWN0IiAmJiB2YWx1ZSkgew0KICAgICAgICAgICAgY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh2YWx1ZSk7DQogICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGRhdGVDbGFzcyAmJiAhaXNQcm9wZXJ0eS5jYWxsKHZhbHVlLCAidG9KU09OIikpIHsNCiAgICAgICAgICAgICAgaWYgKHZhbHVlID4gLTEgLyAwICYmIHZhbHVlIDwgMSAvIDApIHsNCiAgICAgICAgICAgICAgICAvLyBEYXRlcyBhcmUgc2VyaWFsaXplZCBhY2NvcmRpbmcgdG8gdGhlIGBEYXRlI3RvSlNPTmAgbWV0aG9kDQogICAgICAgICAgICAgICAgLy8gc3BlY2lmaWVkIGluIEVTIDUuMSBzZWN0aW9uIDE1LjkuNS40NC4gU2VlIHNlY3Rpb24gMTUuOS4xLjE1DQogICAgICAgICAgICAgICAgLy8gZm9yIHRoZSBJU08gODYwMSBkYXRlIHRpbWUgc3RyaW5nIGZvcm1hdC4NCiAgICAgICAgICAgICAgICBpZiAoZ2V0RGF5KSB7DQogICAgICAgICAgICAgICAgICAvLyBNYW51YWxseSBjb21wdXRlIHRoZSB5ZWFyLCBtb250aCwgZGF0ZSwgaG91cnMsIG1pbnV0ZXMsDQogICAgICAgICAgICAgICAgICAvLyBzZWNvbmRzLCBhbmQgbWlsbGlzZWNvbmRzIGlmIHRoZSBgZ2V0VVRDKmAgbWV0aG9kcyBhcmUNCiAgICAgICAgICAgICAgICAgIC8vIGJ1Z2d5LiBBZGFwdGVkIGZyb20gQFlhZmZsZSdzIGBkYXRlLXNoaW1gIHByb2plY3QuDQogICAgICAgICAgICAgICAgICBkYXRlID0gZmxvb3IodmFsdWUgLyA4NjRlNSk7DQogICAgICAgICAgICAgICAgICBmb3IgKHllYXIgPSBmbG9vcihkYXRlIC8gMzY1LjI0MjUpICsgMTk3MCAtIDE7IGdldERheSh5ZWFyICsgMSwgMCkgPD0gZGF0ZTsgeWVhcisrKTsNCiAgICAgICAgICAgICAgICAgIGZvciAobW9udGggPSBmbG9vcigoZGF0ZSAtIGdldERheSh5ZWFyLCAwKSkgLyAzMC40Mik7IGdldERheSh5ZWFyLCBtb250aCArIDEpIDw9IGRhdGU7IG1vbnRoKyspOw0KICAgICAgICAgICAgICAgICAgZGF0ZSA9IDEgKyBkYXRlIC0gZ2V0RGF5KHllYXIsIG1vbnRoKTsNCiAgICAgICAgICAgICAgICAgIC8vIFRoZSBgdGltZWAgdmFsdWUgc3BlY2lmaWVzIHRoZSB0aW1lIHdpdGhpbiB0aGUgZGF5IChzZWUgRVMNCiAgICAgICAgICAgICAgICAgIC8vIDUuMSBzZWN0aW9uIDE1LjkuMS4yKS4gVGhlIGZvcm11bGEgYChBICUgQiArIEIpICUgQmAgaXMgdXNlZA0KICAgICAgICAgICAgICAgICAgLy8gdG8gY29tcHV0ZSBgQSBtb2R1bG8gQmAsIGFzIHRoZSBgJWAgb3BlcmF0b3IgZG9lcyBub3QNCiAgICAgICAgICAgICAgICAgIC8vIGNvcnJlc3BvbmQgdG8gdGhlIGBtb2R1bG9gIG9wZXJhdGlvbiBmb3IgbmVnYXRpdmUgbnVtYmVycy4NCiAgICAgICAgICAgICAgICAgIHRpbWUgPSAodmFsdWUgJSA4NjRlNSArIDg2NGU1KSAlIDg2NGU1Ow0KICAgICAgICAgICAgICAgICAgLy8gVGhlIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBhbmQgbWlsbGlzZWNvbmRzIGFyZSBvYnRhaW5lZCBieQ0KICAgICAgICAgICAgICAgICAgLy8gZGVjb21wb3NpbmcgdGhlIHRpbWUgd2l0aGluIHRoZSBkYXkuIFNlZSBzZWN0aW9uIDE1LjkuMS4xMC4NCiAgICAgICAgICAgICAgICAgIGhvdXJzID0gZmxvb3IodGltZSAvIDM2ZTUpICUgMjQ7DQogICAgICAgICAgICAgICAgICBtaW51dGVzID0gZmxvb3IodGltZSAvIDZlNCkgJSA2MDsNCiAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBmbG9vcih0aW1lIC8gMWUzKSAlIDYwOw0KICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdGltZSAlIDFlMzsNCiAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgeWVhciA9IHZhbHVlLmdldFVUQ0Z1bGxZZWFyKCk7DQogICAgICAgICAgICAgICAgICBtb250aCA9IHZhbHVlLmdldFVUQ01vbnRoKCk7DQogICAgICAgICAgICAgICAgICBkYXRlID0gdmFsdWUuZ2V0VVRDRGF0ZSgpOw0KICAgICAgICAgICAgICAgICAgaG91cnMgPSB2YWx1ZS5nZXRVVENIb3VycygpOw0KICAgICAgICAgICAgICAgICAgbWludXRlcyA9IHZhbHVlLmdldFVUQ01pbnV0ZXMoKTsNCiAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSB2YWx1ZS5nZXRVVENTZWNvbmRzKCk7DQogICAgICAgICAgICAgICAgICBtaWxsaXNlY29uZHMgPSB2YWx1ZS5nZXRVVENNaWxsaXNlY29uZHMoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gU2VyaWFsaXplIGV4dGVuZGVkIHllYXJzIGNvcnJlY3RseS4NCiAgICAgICAgICAgICAgICB2YWx1ZSA9ICh5ZWFyIDw9IDAgfHwgeWVhciA+PSAxZTQgPyAoeWVhciA8IDAgPyAiLSIgOiAiKyIpICsgdG9QYWRkZWRTdHJpbmcoNiwgeWVhciA8IDAgPyAteWVhciA6IHllYXIpIDogdG9QYWRkZWRTdHJpbmcoNCwgeWVhcikpICsNCiAgICAgICAgICAgICAgICAgICItIiArIHRvUGFkZGVkU3RyaW5nKDIsIG1vbnRoICsgMSkgKyAiLSIgKyB0b1BhZGRlZFN0cmluZygyLCBkYXRlKSArDQogICAgICAgICAgICAgICAgICAvLyBNb250aHMsIGRhdGVzLCBob3VycywgbWludXRlcywgYW5kIHNlY29uZHMgc2hvdWxkIGhhdmUgdHdvDQogICAgICAgICAgICAgICAgICAvLyBkaWdpdHM7IG1pbGxpc2Vjb25kcyBzaG91bGQgaGF2ZSB0aHJlZS4NCiAgICAgICAgICAgICAgICAgICJUIiArIHRvUGFkZGVkU3RyaW5nKDIsIGhvdXJzKSArICI6IiArIHRvUGFkZGVkU3RyaW5nKDIsIG1pbnV0ZXMpICsgIjoiICsgdG9QYWRkZWRTdHJpbmcoMiwgc2Vjb25kcykgKw0KICAgICAgICAgICAgICAgICAgLy8gTWlsbGlzZWNvbmRzIGFyZSBvcHRpb25hbCBpbiBFUyA1LjAsIGJ1dCByZXF1aXJlZCBpbiA1LjEuDQogICAgICAgICAgICAgICAgICAiLiIgKyB0b1BhZGRlZFN0cmluZygzLCBtaWxsaXNlY29uZHMpICsgIloiOw0KICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUudG9KU09OID09ICJmdW5jdGlvbiIgJiYgKChjbGFzc05hbWUgIT0gbnVtYmVyQ2xhc3MgJiYgY2xhc3NOYW1lICE9IHN0cmluZ0NsYXNzICYmIGNsYXNzTmFtZSAhPSBhcnJheUNsYXNzKSB8fCBpc1Byb3BlcnR5LmNhbGwodmFsdWUsICJ0b0pTT04iKSkpIHsNCiAgICAgICAgICAgICAgLy8gUHJvdG90eXBlIDw9IDEuNi4xIGFkZHMgbm9uLXN0YW5kYXJkIGB0b0pTT05gIG1ldGhvZHMgdG8gdGhlDQogICAgICAgICAgICAgIC8vIGBOdW1iZXJgLCBgU3RyaW5nYCwgYERhdGVgLCBhbmQgYEFycmF5YCBwcm90b3R5cGVzLiBKU09OIDMNCiAgICAgICAgICAgICAgLy8gaWdub3JlcyBhbGwgYHRvSlNPTmAgbWV0aG9kcyBvbiB0aGVzZSBvYmplY3RzIHVubGVzcyB0aGV5IGFyZQ0KICAgICAgICAgICAgICAvLyBkZWZpbmVkIGRpcmVjdGx5IG9uIGFuIGluc3RhbmNlLg0KICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTihwcm9wZXJ0eSk7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICAgIGlmIChjYWxsYmFjaykgew0KICAgICAgICAgICAgLy8gSWYgYSByZXBsYWNlbWVudCBmdW5jdGlvbiB3YXMgcHJvdmlkZWQsIGNhbGwgaXQgdG8gb2J0YWluIHRoZSB2YWx1ZQ0KICAgICAgICAgICAgLy8gZm9yIHNlcmlhbGl6YXRpb24uDQogICAgICAgICAgICB2YWx1ZSA9IGNhbGxiYWNrLmNhbGwob2JqZWN0LCBwcm9wZXJ0eSwgdmFsdWUpOw0KICAgICAgICAgIH0NCiAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHsNCiAgICAgICAgICAgIHJldHVybiAibnVsbCI7DQogICAgICAgICAgfQ0KICAgICAgICAgIGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwodmFsdWUpOw0KICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gYm9vbGVhbkNsYXNzKSB7DQogICAgICAgICAgICAvLyBCb29sZWFucyBhcmUgcmVwcmVzZW50ZWQgbGl0ZXJhbGx5Lg0KICAgICAgICAgICAgcmV0dXJuICIiICsgdmFsdWU7DQogICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gbnVtYmVyQ2xhc3MpIHsNCiAgICAgICAgICAgIC8vIEpTT04gbnVtYmVycyBtdXN0IGJlIGZpbml0ZS4gYEluZmluaXR5YCBhbmQgYE5hTmAgYXJlIHNlcmlhbGl6ZWQgYXMNCiAgICAgICAgICAgIC8vIGAibnVsbCJgLg0KICAgICAgICAgICAgcmV0dXJuIHZhbHVlID4gLTEgLyAwICYmIHZhbHVlIDwgMSAvIDAgPyAiIiArIHZhbHVlIDogIm51bGwiOw0KICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzKSB7DQogICAgICAgICAgICAvLyBTdHJpbmdzIGFyZSBkb3VibGUtcXVvdGVkIGFuZCBlc2NhcGVkLg0KICAgICAgICAgICAgcmV0dXJuIHF1b3RlKCIiICsgdmFsdWUpOw0KICAgICAgICAgIH0NCiAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgb2JqZWN0cyBhbmQgYXJyYXlzLg0KICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gIm9iamVjdCIpIHsNCiAgICAgICAgICAgIC8vIENoZWNrIGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhpcyBpcyBhIGxpbmVhciBzZWFyY2g7IHBlcmZvcm1hbmNlDQogICAgICAgICAgICAvLyBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2YgdW5pcXVlIG5lc3RlZCBvYmplY3RzLg0KICAgICAgICAgICAgZm9yIChsZW5ndGggPSBzdGFjay5sZW5ndGg7IGxlbmd0aC0tOykgew0KICAgICAgICAgICAgICBpZiAoc3RhY2tbbGVuZ3RoXSA9PT0gdmFsdWUpIHsNCiAgICAgICAgICAgICAgICAvLyBDeWNsaWMgc3RydWN0dXJlcyBjYW5ub3QgYmUgc2VyaWFsaXplZCBieSBgSlNPTi5zdHJpbmdpZnlgLg0KICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcigpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAvLyBBZGQgdGhlIG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuDQogICAgICAgICAgICBzdGFjay5wdXNoKHZhbHVlKTsNCiAgICAgICAgICAgIHJlc3VsdHMgPSBbXTsNCiAgICAgICAgICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgaW5kZW50YXRpb24gbGV2ZWwgYW5kIGluZGVudCBvbmUgYWRkaXRpb25hbCBsZXZlbC4NCiAgICAgICAgICAgIHByZWZpeCA9IGluZGVudGF0aW9uOw0KICAgICAgICAgICAgaW5kZW50YXRpb24gKz0gd2hpdGVzcGFjZTsNCiAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gYXJyYXlDbGFzcykgew0KICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgYXJyYXkgZWxlbWVudHMuDQogICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7DQogICAgICAgICAgICAgICAgZWxlbWVudCA9IHNlcmlhbGl6ZShpbmRleCwgdmFsdWUsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBpbmRlbnRhdGlvbiwgc3RhY2spOw0KICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChlbGVtZW50ID09PSB1bmRlZiA/ICJudWxsIiA6IGVsZW1lbnQpOw0KICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdHMubGVuZ3RoID8gKHdoaXRlc3BhY2UgPyAiW1xuIiArIGluZGVudGF0aW9uICsgcmVzdWx0cy5qb2luKCIsXG4iICsgaW5kZW50YXRpb24pICsgIlxuIiArIHByZWZpeCArICJdIiA6ICgiWyIgKyByZXN1bHRzLmpvaW4oIiwiKSArICJdIikpIDogIltdIjsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBvYmplY3QgbWVtYmVycy4gTWVtYmVycyBhcmUgc2VsZWN0ZWQgZnJvbQ0KICAgICAgICAgICAgICAvLyBlaXRoZXIgYSB1c2VyLXNwZWNpZmllZCBsaXN0IG9mIHByb3BlcnR5IG5hbWVzLCBvciB0aGUgb2JqZWN0DQogICAgICAgICAgICAgIC8vIGl0c2VsZi4NCiAgICAgICAgICAgICAgZm9yRWFjaChwcm9wZXJ0aWVzIHx8IHZhbHVlLCBmdW5jdGlvbiAocHJvcGVydHkpIHsNCiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9IHNlcmlhbGl6ZShwcm9wZXJ0eSwgdmFsdWUsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCB3aGl0ZXNwYWNlLCBpbmRlbnRhdGlvbiwgc3RhY2spOw0KICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSB1bmRlZikgew0KICAgICAgICAgICAgICAgICAgLy8gQWNjb3JkaW5nIHRvIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjM6ICJJZiBgZ2FwYCB7d2hpdGVzcGFjZX0NCiAgICAgICAgICAgICAgICAgIC8vIGlzIG5vdCB0aGUgZW1wdHkgc3RyaW5nLCBsZXQgYG1lbWJlcmAge3F1b3RlKHByb3BlcnR5KSArICI6In0NCiAgICAgICAgICAgICAgICAgIC8vIGJlIHRoZSBjb25jYXRlbmF0aW9uIG9mIGBtZW1iZXJgIGFuZCB0aGUgYHNwYWNlYCBjaGFyYWN0ZXIuIg0KICAgICAgICAgICAgICAgICAgLy8gVGhlICJgc3BhY2VgIGNoYXJhY3RlciIgcmVmZXJzIHRvIHRoZSBsaXRlcmFsIHNwYWNlDQogICAgICAgICAgICAgICAgICAvLyBjaGFyYWN0ZXIsIG5vdCB0aGUgYHNwYWNlYCB7d2lkdGh9IGFyZ3VtZW50IHByb3ZpZGVkIHRvDQogICAgICAgICAgICAgICAgICAvLyBgSlNPTi5zdHJpbmdpZnlgLg0KICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKHF1b3RlKHByb3BlcnR5KSArICI6IiArICh3aGl0ZXNwYWNlID8gIiAiIDogIiIpICsgZWxlbWVudCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0cy5sZW5ndGggPyAod2hpdGVzcGFjZSA/ICJ7XG4iICsgaW5kZW50YXRpb24gKyByZXN1bHRzLmpvaW4oIixcbiIgKyBpbmRlbnRhdGlvbikgKyAiXG4iICsgcHJlZml4ICsgIn0iIDogKCJ7IiArIHJlc3VsdHMuam9pbigiLCIpICsgIn0iKSkgOiAie30iOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBvYmplY3QgZnJvbSB0aGUgdHJhdmVyc2VkIG9iamVjdCBzdGFjay4NCiAgICAgICAgICAgIHN0YWNrLnBvcCgpOw0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsNCiAgICAgICAgICB9DQogICAgICAgIH07DQoNCiAgICAgICAgLy8gUHVibGljOiBgSlNPTi5zdHJpbmdpZnlgLiBTZWUgRVMgNS4xIHNlY3Rpb24gMTUuMTIuMy4NCiAgICAgICAgZXhwb3J0cy5zdHJpbmdpZnkgPSBmdW5jdGlvbiAoc291cmNlLCBmaWx0ZXIsIHdpZHRoKSB7DQogICAgICAgICAgdmFyIHdoaXRlc3BhY2UsIGNhbGxiYWNrLCBwcm9wZXJ0aWVzLCBjbGFzc05hbWU7DQogICAgICAgICAgaWYgKG9iamVjdFR5cGVzW3R5cGVvZiBmaWx0ZXJdICYmIGZpbHRlcikgew0KICAgICAgICAgICAgaWYgKChjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKGZpbHRlcikpID09IGZ1bmN0aW9uQ2xhc3MpIHsNCiAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmaWx0ZXI7DQogICAgICAgICAgICB9IGVsc2UgaWYgKGNsYXNzTmFtZSA9PSBhcnJheUNsYXNzKSB7DQogICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHByb3BlcnR5IG5hbWVzIGFycmF5IGludG8gYSBtYWtlc2hpZnQgc2V0Lg0KICAgICAgICAgICAgICBwcm9wZXJ0aWVzID0ge307DQogICAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMCwgbGVuZ3RoID0gZmlsdGVyLmxlbmd0aCwgdmFsdWU7IGluZGV4IDwgbGVuZ3RoOyB2YWx1ZSA9IGZpbHRlcltpbmRleCsrXSwgKChjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKSksIGNsYXNzTmFtZSA9PSBzdHJpbmdDbGFzcyB8fCBjbGFzc05hbWUgPT0gbnVtYmVyQ2xhc3MpICYmIChwcm9wZXJ0aWVzW3ZhbHVlXSA9IDEpKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgaWYgKHdpZHRoKSB7DQogICAgICAgICAgICBpZiAoKGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwod2lkdGgpKSA9PSBudW1iZXJDbGFzcykgew0KICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBgd2lkdGhgIHRvIGFuIGludGVnZXIgYW5kIGNyZWF0ZSBhIHN0cmluZyBjb250YWluaW5nDQogICAgICAgICAgICAgIC8vIGB3aWR0aGAgbnVtYmVyIG9mIHNwYWNlIGNoYXJhY3RlcnMuDQogICAgICAgICAgICAgIGlmICgod2lkdGggLT0gd2lkdGggJSAxKSA+IDApIHsNCiAgICAgICAgICAgICAgICBmb3IgKHdoaXRlc3BhY2UgPSAiIiwgd2lkdGggPiAxMCAmJiAod2lkdGggPSAxMCk7IHdoaXRlc3BhY2UubGVuZ3RoIDwgd2lkdGg7IHdoaXRlc3BhY2UgKz0gIiAiKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MpIHsNCiAgICAgICAgICAgICAgd2hpdGVzcGFjZSA9IHdpZHRoLmxlbmd0aCA8PSAxMCA/IHdpZHRoIDogd2lkdGguc2xpY2UoMCwgMTApOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0NCiAgICAgICAgICAvLyBPcGVyYSA8PSA3LjU0dTIgZGlzY2FyZHMgdGhlIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggZW1wdHkgc3RyaW5nIGtleXMNCiAgICAgICAgICAvLyAoYCIiYCkgb25seSBpZiB0aGV5IGFyZSB1c2VkIGRpcmVjdGx5IHdpdGhpbiBhbiBvYmplY3QgbWVtYmVyIGxpc3QNCiAgICAgICAgICAvLyAoZS5nLiwgYCEoIiIgaW4geyAiIjogMX0pYCkuDQogICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZSgiIiwgKHZhbHVlID0ge30sIHZhbHVlWyIiXSA9IHNvdXJjZSwgdmFsdWUpLCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgIiIsIFtdKTsNCiAgICAgICAgfTsNCiAgICAgIH0NCg0KICAgICAgLy8gUHVibGljOiBQYXJzZXMgYSBKU09OIHNvdXJjZSBzdHJpbmcuDQogICAgICBpZiAoIWhhcygianNvbi1wYXJzZSIpKSB7DQogICAgICAgIHZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlOw0KDQogICAgICAgIC8vIEludGVybmFsOiBBIG1hcCBvZiBlc2NhcGVkIGNvbnRyb2wgY2hhcmFjdGVycyBhbmQgdGhlaXIgdW5lc2NhcGVkDQogICAgICAgIC8vIGVxdWl2YWxlbnRzLg0KICAgICAgICB2YXIgVW5lc2NhcGVzID0gew0KICAgICAgICAgIDkyOiAiXFwiLA0KICAgICAgICAgIDM0OiAnIicsDQogICAgICAgICAgNDc6ICIvIiwNCiAgICAgICAgICA5ODogIlxiIiwNCiAgICAgICAgICAxMTY6ICJcdCIsDQogICAgICAgICAgMTEwOiAiXG4iLA0KICAgICAgICAgIDEwMjogIlxmIiwNCiAgICAgICAgICAxMTQ6ICJcciINCiAgICAgICAgfTsNCg0KICAgICAgICAvLyBJbnRlcm5hbDogU3RvcmVzIHRoZSBwYXJzZXIgc3RhdGUuDQogICAgICAgIHZhciBJbmRleCwgU291cmNlOw0KDQogICAgICAgIC8vIEludGVybmFsOiBSZXNldHMgdGhlIHBhcnNlciBzdGF0ZSBhbmQgdGhyb3dzIGEgYFN5bnRheEVycm9yYC4NCiAgICAgICAgdmFyIGFib3J0ID0gZnVuY3Rpb24gKCkgew0KICAgICAgICAgIEluZGV4ID0gU291cmNlID0gbnVsbDsNCiAgICAgICAgICB0aHJvdyBTeW50YXhFcnJvcigpOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIEludGVybmFsOiBSZXR1cm5zIHRoZSBuZXh0IHRva2VuLCBvciBgIiQiYCBpZiB0aGUgcGFyc2VyIGhhcyByZWFjaGVkDQogICAgICAgIC8vIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBzdHJpbmcuIEEgdG9rZW4gbWF5IGJlIGEgc3RyaW5nLCBudW1iZXIsIGBudWxsYA0KICAgICAgICAvLyBsaXRlcmFsLCBvciBCb29sZWFuIGxpdGVyYWwuDQogICAgICAgIHZhciBsZXggPSBmdW5jdGlvbiAoKSB7DQogICAgICAgICAgdmFyIHNvdXJjZSA9IFNvdXJjZSwgbGVuZ3RoID0gc291cmNlLmxlbmd0aCwgdmFsdWUsIGJlZ2luLCBwb3NpdGlvbiwgaXNTaWduZWQsIGNoYXJDb2RlOw0KICAgICAgICAgIHdoaWxlIChJbmRleCA8IGxlbmd0aCkgew0KICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7DQogICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7DQogICAgICAgICAgICAgIGNhc2UgOTogY2FzZSAxMDogY2FzZSAxMzogY2FzZSAzMjoNCiAgICAgICAgICAgICAgICAvLyBTa2lwIHdoaXRlc3BhY2UgdG9rZW5zLCBpbmNsdWRpbmcgdGFicywgY2FycmlhZ2UgcmV0dXJucywgbGluZQ0KICAgICAgICAgICAgICAgIC8vIGZlZWRzLCBhbmQgc3BhY2UgY2hhcmFjdGVycy4NCiAgICAgICAgICAgICAgICBJbmRleCsrOw0KICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICBjYXNlIDEyMzogY2FzZSAxMjU6IGNhc2UgOTE6IGNhc2UgOTM6IGNhc2UgNTg6IGNhc2UgNDQ6DQogICAgICAgICAgICAgICAgLy8gUGFyc2UgYSBwdW5jdHVhdG9yIHRva2VuIChge2AsIGB9YCwgYFtgLCBgXWAsIGA6YCwgb3IgYCxgKSBhdA0KICAgICAgICAgICAgICAgIC8vIHRoZSBjdXJyZW50IHBvc2l0aW9uLg0KICAgICAgICAgICAgICAgIHZhbHVlID0gY2hhckluZGV4QnVnZ3kgPyBzb3VyY2UuY2hhckF0KEluZGV4KSA6IHNvdXJjZVtJbmRleF07DQogICAgICAgICAgICAgICAgSW5kZXgrKzsNCiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7DQogICAgICAgICAgICAgIGNhc2UgMzQ6DQogICAgICAgICAgICAgICAgLy8gYCJgIGRlbGltaXRzIGEgSlNPTiBzdHJpbmc7IGFkdmFuY2UgdG8gdGhlIG5leHQgY2hhcmFjdGVyIGFuZA0KICAgICAgICAgICAgICAgIC8vIGJlZ2luIHBhcnNpbmcgdGhlIHN0cmluZy4gU3RyaW5nIHRva2VucyBhcmUgcHJlZml4ZWQgd2l0aCB0aGUNCiAgICAgICAgICAgICAgICAvLyBzZW50aW5lbCBgQGAgY2hhcmFjdGVyIHRvIGRpc3Rpbmd1aXNoIHRoZW0gZnJvbSBwdW5jdHVhdG9ycyBhbmQNCiAgICAgICAgICAgICAgICAvLyBlbmQtb2Ytc3RyaW5nIHRva2Vucy4NCiAgICAgICAgICAgICAgICBmb3IgKHZhbHVlID0gIkAiLCBJbmRleCsrOyBJbmRleCA8IGxlbmd0aDspIHsNCiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpOw0KICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMzIpIHsNCiAgICAgICAgICAgICAgICAgICAgLy8gVW5lc2NhcGVkIEFTQ0lJIGNvbnRyb2wgY2hhcmFjdGVycyAodGhvc2Ugd2l0aCBhIGNvZGUgdW5pdA0KICAgICAgICAgICAgICAgICAgICAvLyBsZXNzIHRoYW4gdGhlIHNwYWNlIGNoYXJhY3RlcikgYXJlIG5vdCBwZXJtaXR0ZWQuDQogICAgICAgICAgICAgICAgICAgIGFib3J0KCk7DQogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID09IDkyKSB7DQogICAgICAgICAgICAgICAgICAgIC8vIEEgcmV2ZXJzZSBzb2xpZHVzIChgXGApIG1hcmtzIHRoZSBiZWdpbm5pbmcgb2YgYW4gZXNjYXBlZA0KICAgICAgICAgICAgICAgICAgICAvLyBjb250cm9sIGNoYXJhY3RlciAoaW5jbHVkaW5nIGAiYCwgYFxgLCBhbmQgYC9gKSBvciBVbmljb2RlDQogICAgICAgICAgICAgICAgICAgIC8vIGVzY2FwZSBzZXF1ZW5jZS4NCiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTsNCiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjaGFyQ29kZSkgew0KICAgICAgICAgICAgICAgICAgICAgIGNhc2UgOTI6IGNhc2UgMzQ6IGNhc2UgNDc6IGNhc2UgOTg6IGNhc2UgMTE2OiBjYXNlIDExMDogY2FzZSAxMDI6IGNhc2UgMTE0Og0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV2aXZlIGVzY2FwZWQgY29udHJvbCBjaGFyYWN0ZXJzLg0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gVW5lc2NhcGVzW2NoYXJDb2RlXTsNCiAgICAgICAgICAgICAgICAgICAgICAgIEluZGV4Kys7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICBjYXNlIDExNzoNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGBcdWAgbWFya3MgdGhlIGJlZ2lubmluZyBvZiBhIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlLg0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW5jZSB0byB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCB2YWxpZGF0ZSB0aGUNCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvdXItZGlnaXQgY29kZSBwb2ludC4NCiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gKytJbmRleDsNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocG9zaXRpb24gPSBJbmRleCArIDQ7IEluZGV4IDwgcG9zaXRpb247IEluZGV4KyspIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgdmFsaWQgc2VxdWVuY2UgY29tcHJpc2VzIGZvdXIgaGV4ZGlnaXRzIChjYXNlLQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnNlbnNpdGl2ZSkgdGhhdCBmb3JtIGEgc2luZ2xlIGhleGFkZWNpbWFsIHZhbHVlLg0KICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1NyB8fCBjaGFyQ29kZSA+PSA5NyAmJiBjaGFyQ29kZSA8PSAxMDIgfHwgY2hhckNvZGUgPj0gNjUgJiYgY2hhckNvZGUgPD0gNzApKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZS4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXZpdmUgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLg0KICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gZnJvbUNoYXJDb2RlKCIweCIgKyBzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KSk7DQogICAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UuDQogICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gMzQpIHsNCiAgICAgICAgICAgICAgICAgICAgICAvLyBBbiB1bmVzY2FwZWQgZG91YmxlLXF1b3RlIGNoYXJhY3RlciBtYXJrcyB0aGUgZW5kIG9mIHRoZQ0KICAgICAgICAgICAgICAgICAgICAgIC8vIHN0cmluZy4NCiAgICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTsNCiAgICAgICAgICAgICAgICAgICAgYmVnaW4gPSBJbmRleDsNCiAgICAgICAgICAgICAgICAgICAgLy8gT3B0aW1pemUgZm9yIHRoZSBjb21tb24gY2FzZSB3aGVyZSBhIHN0cmluZyBpcyB2YWxpZC4NCiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNoYXJDb2RlID49IDMyICYmIGNoYXJDb2RlICE9IDkyICYmIGNoYXJDb2RlICE9IDM0KSB7DQogICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdGhlIHN0cmluZyBhcy1pcy4NCiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCk7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuY2hhckNvZGVBdChJbmRleCkgPT0gMzQpIHsNCiAgICAgICAgICAgICAgICAgIC8vIEFkdmFuY2UgdG8gdGhlIG5leHQgY2hhcmFjdGVyIGFuZCByZXR1cm4gdGhlIHJldml2ZWQgc3RyaW5nLg0KICAgICAgICAgICAgICAgICAgSW5kZXgrKzsNCiAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gVW50ZXJtaW5hdGVkIHN0cmluZy4NCiAgICAgICAgICAgICAgICBhYm9ydCgpOw0KICAgICAgICAgICAgICBkZWZhdWx0Og0KICAgICAgICAgICAgICAgIC8vIFBhcnNlIG51bWJlcnMgYW5kIGxpdGVyYWxzLg0KICAgICAgICAgICAgICAgIGJlZ2luID0gSW5kZXg7DQogICAgICAgICAgICAgICAgLy8gQWR2YW5jZSBwYXN0IHRoZSBuZWdhdGl2ZSBzaWduLCBpZiBvbmUgaXMgc3BlY2lmaWVkLg0KICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0NSkgew0KICAgICAgICAgICAgICAgICAgaXNTaWduZWQgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdCgrK0luZGV4KTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gUGFyc2UgYW4gaW50ZWdlciBvciBmbG9hdGluZy1wb2ludCB2YWx1ZS4NCiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpIHsNCiAgICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgemVyb2VzIGFyZSBpbnRlcnByZXRlZCBhcyBvY3RhbCBsaXRlcmFscy4NCiAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSA0OCAmJiAoKGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXggKyAxKSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KSkgew0KICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIG9jdGFsIGxpdGVyYWwuDQogICAgICAgICAgICAgICAgICAgIGFib3J0KCk7DQogICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICBpc1NpZ25lZCA9IGZhbHNlOw0KICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGludGVnZXIgY29tcG9uZW50Lg0KICAgICAgICAgICAgICAgICAgZm9yICg7IEluZGV4IDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCkpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IEluZGV4KyspOw0KICAgICAgICAgICAgICAgICAgLy8gRmxvYXRzIGNhbm5vdCBjb250YWluIGEgbGVhZGluZyBkZWNpbWFsIHBvaW50OyBob3dldmVyLCB0aGlzDQogICAgICAgICAgICAgICAgICAvLyBjYXNlIGlzIGFscmVhZHkgYWNjb3VudGVkIGZvciBieSB0aGUgcGFyc2VyLg0KICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSA9PSA0Nikgew0KICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbiA9ICsrSW5kZXg7DQogICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBkZWNpbWFsIGNvbXBvbmVudC4NCiAgICAgICAgICAgICAgICAgICAgZm9yICg7IHBvc2l0aW9uIDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbikpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IHBvc2l0aW9uKyspOw0KICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT0gSW5kZXgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIHRyYWlsaW5nIGRlY2ltYWwuDQogICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICBJbmRleCA9IHBvc2l0aW9uOw0KICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgZXhwb25lbnRzLiBUaGUgYGVgIGRlbm90aW5nIHRoZSBleHBvbmVudCBpcw0KICAgICAgICAgICAgICAgICAgLy8gY2FzZS1pbnNlbnNpdGl2ZS4NCiAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpOw0KICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDEwMSB8fCBjaGFyQ29kZSA9PSA2OSkgew0KICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpOw0KICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIHBhc3QgdGhlIHNpZ24gZm9sbG93aW5nIHRoZSBleHBvbmVudCwgaWYgb25lIGlzDQogICAgICAgICAgICAgICAgICAgIC8vIHNwZWNpZmllZC4NCiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQzIHx8IGNoYXJDb2RlID09IDQ1KSB7DQogICAgICAgICAgICAgICAgICAgICAgSW5kZXgrKzsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgZXhwb25lbnRpYWwgY29tcG9uZW50Lg0KICAgICAgICAgICAgICAgICAgICBmb3IgKHBvc2l0aW9uID0gSW5kZXg7IHBvc2l0aW9uIDwgbGVuZ3RoICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChwb3NpdGlvbikpLCBjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nyk7IHBvc2l0aW9uKyspOw0KICAgICAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT0gSW5kZXgpIHsNCiAgICAgICAgICAgICAgICAgICAgICAvLyBJbGxlZ2FsIGVtcHR5IGV4cG9uZW50Lg0KICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgSW5kZXggPSBwb3NpdGlvbjsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgIC8vIENvZXJjZSB0aGUgcGFyc2VkIHZhbHVlIHRvIGEgSmF2YVNjcmlwdCBudW1iZXIuDQogICAgICAgICAgICAgICAgICByZXR1cm4gK3NvdXJjZS5zbGljZShiZWdpbiwgSW5kZXgpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyBBIG5lZ2F0aXZlIHNpZ24gbWF5IG9ubHkgcHJlY2VkZSBudW1iZXJzLg0KICAgICAgICAgICAgICAgIGlmIChpc1NpZ25lZCkgew0KICAgICAgICAgICAgICAgICAgYWJvcnQoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gYHRydWVgLCBgZmFsc2VgLCBhbmQgYG51bGxgIGxpdGVyYWxzLg0KICAgICAgICAgICAgICAgIGlmIChzb3VyY2Uuc2xpY2UoSW5kZXgsIEluZGV4ICsgNCkgPT0gInRydWUiKSB7DQogICAgICAgICAgICAgICAgICBJbmRleCArPSA0Ow0KICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7DQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzb3VyY2Uuc2xpY2UoSW5kZXgsIEluZGV4ICsgNSkgPT0gImZhbHNlIikgew0KICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNTsNCiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsNCiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA0KSA9PSAibnVsbCIpIHsNCiAgICAgICAgICAgICAgICAgIEluZGV4ICs9IDQ7DQogICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gVW5yZWNvZ25pemVkIHRva2VuLg0KICAgICAgICAgICAgICAgIGFib3J0KCk7DQogICAgICAgICAgICB9DQogICAgICAgICAgfQ0KICAgICAgICAgIC8vIFJldHVybiB0aGUgc2VudGluZWwgYCRgIGNoYXJhY3RlciBpZiB0aGUgcGFyc2VyIGhhcyByZWFjaGVkIHRoZSBlbmQNCiAgICAgICAgICAvLyBvZiB0aGUgc291cmNlIHN0cmluZy4NCiAgICAgICAgICByZXR1cm4gIiQiOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIEludGVybmFsOiBQYXJzZXMgYSBKU09OIGB2YWx1ZWAgdG9rZW4uDQogICAgICAgIHZhciBnZXQgPSBmdW5jdGlvbiAodmFsdWUpIHsNCiAgICAgICAgICB2YXIgcmVzdWx0cywgaGFzTWVtYmVyczsNCiAgICAgICAgICBpZiAodmFsdWUgPT0gIiQiKSB7DQogICAgICAgICAgICAvLyBVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dC4NCiAgICAgICAgICAgIGFib3J0KCk7DQogICAgICAgICAgfQ0KICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gInN0cmluZyIpIHsNCiAgICAgICAgICAgIGlmICgoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5jaGFyQXQoMCkgOiB2YWx1ZVswXSkgPT0gIkAiKSB7DQogICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgc2VudGluZWwgYEBgIGNoYXJhY3Rlci4NCiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDEpOw0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgLy8gUGFyc2Ugb2JqZWN0IGFuZCBhcnJheSBsaXRlcmFscy4NCiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAiWyIpIHsNCiAgICAgICAgICAgICAgLy8gUGFyc2VzIGEgSlNPTiBhcnJheSwgcmV0dXJuaW5nIGEgbmV3IEphdmFTY3JpcHQgYXJyYXkuDQogICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTsNCiAgICAgICAgICAgICAgZm9yICg7OyBoYXNNZW1iZXJzIHx8IChoYXNNZW1iZXJzID0gdHJ1ZSkpIHsNCiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpOw0KICAgICAgICAgICAgICAgIC8vIEEgY2xvc2luZyBzcXVhcmUgYnJhY2tldCBtYXJrcyB0aGUgZW5kIG9mIHRoZSBhcnJheSBsaXRlcmFsLg0KICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAiXSIpIHsNCiAgICAgICAgICAgICAgICAgIGJyZWFrOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYXJyYXkgbGl0ZXJhbCBjb250YWlucyBlbGVtZW50cywgdGhlIGN1cnJlbnQgdG9rZW4NCiAgICAgICAgICAgICAgICAvLyBzaG91bGQgYmUgYSBjb21tYSBzZXBhcmF0aW5nIHRoZSBwcmV2aW91cyBlbGVtZW50IGZyb20gdGhlDQogICAgICAgICAgICAgICAgLy8gbmV4dC4NCiAgICAgICAgICAgICAgICBpZiAoaGFzTWVtYmVycykgew0KICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09ICIsIikgew0KICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpOw0KICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gIl0iKSB7DQogICAgICAgICAgICAgICAgICAgICAgLy8gVW5leHBlY3RlZCB0cmFpbGluZyBgLGAgaW4gYXJyYXkgbGl0ZXJhbC4NCiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAvLyBBIGAsYCBtdXN0IHNlcGFyYXRlIGVhY2ggYXJyYXkgZWxlbWVudC4NCiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gRWxpc2lvbnMgYW5kIGxlYWRpbmcgY29tbWFzIGFyZSBub3QgcGVybWl0dGVkLg0KICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAiLCIpIHsNCiAgICAgICAgICAgICAgICAgIGFib3J0KCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChnZXQodmFsdWUpKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsNCiAgICAgICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gInsiKSB7DQogICAgICAgICAgICAgIC8vIFBhcnNlcyBhIEpTT04gb2JqZWN0LCByZXR1cm5pbmcgYSBuZXcgSmF2YVNjcmlwdCBvYmplY3QuDQogICAgICAgICAgICAgIHJlc3VsdHMgPSB7fTsNCiAgICAgICAgICAgICAgZm9yICg7OyBoYXNNZW1iZXJzIHx8IChoYXNNZW1iZXJzID0gdHJ1ZSkpIHsNCiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpOw0KICAgICAgICAgICAgICAgIC8vIEEgY2xvc2luZyBjdXJseSBicmFjZSBtYXJrcyB0aGUgZW5kIG9mIHRoZSBvYmplY3QgbGl0ZXJhbC4NCiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gIn0iKSB7DQogICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBsaXRlcmFsIGNvbnRhaW5zIG1lbWJlcnMsIHRoZSBjdXJyZW50IHRva2VuDQogICAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGEgY29tbWEgc2VwYXJhdG9yLg0KICAgICAgICAgICAgICAgIGlmIChoYXNNZW1iZXJzKSB7DQogICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gIiwiKSB7DQogICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbGV4KCk7DQogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSAifSIpIHsNCiAgICAgICAgICAgICAgICAgICAgICAvLyBVbmV4cGVjdGVkIHRyYWlsaW5nIGAsYCBpbiBvYmplY3QgbGl0ZXJhbC4NCiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAvLyBBIGAsYCBtdXN0IHNlcGFyYXRlIGVhY2ggb2JqZWN0IG1lbWJlci4NCiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTsNCiAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgLy8gTGVhZGluZyBjb21tYXMgYXJlIG5vdCBwZXJtaXR0ZWQsIG9iamVjdCBwcm9wZXJ0eSBuYW1lcyBtdXN0IGJlDQogICAgICAgICAgICAgICAgLy8gZG91YmxlLXF1b3RlZCBzdHJpbmdzLCBhbmQgYSBgOmAgbXVzdCBzZXBhcmF0ZSBlYWNoIHByb3BlcnR5DQogICAgICAgICAgICAgICAgLy8gbmFtZSBhbmQgdmFsdWUuDQogICAgICAgICAgICAgICAgaWYgKHZhbHVlID09ICIsIiB8fCB0eXBlb2YgdmFsdWUgIT0gInN0cmluZyIgfHwgKGNoYXJJbmRleEJ1Z2d5ID8gdmFsdWUuY2hhckF0KDApIDogdmFsdWVbMF0pICE9ICJAIiB8fCBsZXgoKSAhPSAiOiIpIHsNCiAgICAgICAgICAgICAgICAgIGFib3J0KCk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJlc3VsdHNbdmFsdWUuc2xpY2UoMSldID0gZ2V0KGxleCgpKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0czsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdG9rZW4gZW5jb3VudGVyZWQuDQogICAgICAgICAgICBhYm9ydCgpOw0KICAgICAgICAgIH0NCiAgICAgICAgICByZXR1cm4gdmFsdWU7DQogICAgICAgIH07DQoNCiAgICAgICAgLy8gSW50ZXJuYWw6IFVwZGF0ZXMgYSB0cmF2ZXJzZWQgb2JqZWN0IG1lbWJlci4NCiAgICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIChzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjaykgew0KICAgICAgICAgIHZhciBlbGVtZW50ID0gd2Fsayhzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjayk7DQogICAgICAgICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmKSB7DQogICAgICAgICAgICBkZWxldGUgc291cmNlW3Byb3BlcnR5XTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgc291cmNlW3Byb3BlcnR5XSA9IGVsZW1lbnQ7DQogICAgICAgICAgfQ0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIEludGVybmFsOiBSZWN1cnNpdmVseSB0cmF2ZXJzZXMgYSBwYXJzZWQgSlNPTiBvYmplY3QsIGludm9raW5nIHRoZQ0KICAgICAgICAvLyBgY2FsbGJhY2tgIGZ1bmN0aW9uIGZvciBlYWNoIHZhbHVlLiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZQ0KICAgICAgICAvLyBgV2Fsayhob2xkZXIsIG5hbWUpYCBvcGVyYXRpb24gZGVmaW5lZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS4xMi4yLg0KICAgICAgICB2YXIgd2FsayA9IGZ1bmN0aW9uIChzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjaykgew0KICAgICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtwcm9wZXJ0eV0sIGxlbmd0aDsNCiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICJvYmplY3QiICYmIHZhbHVlKSB7DQogICAgICAgICAgICAvLyBgZm9yRWFjaGAgY2FuJ3QgYmUgdXNlZCB0byB0cmF2ZXJzZSBhbiBhcnJheSBpbiBPcGVyYSA8PSA4LjU0DQogICAgICAgICAgICAvLyBiZWNhdXNlIGl0cyBgT2JqZWN0I2hhc093blByb3BlcnR5YCBpbXBsZW1lbnRhdGlvbiByZXR1cm5zIGBmYWxzZWANCiAgICAgICAgICAgIC8vIGZvciBhcnJheSBpbmRpY2VzIChlLmcuLCBgIVsxLCAyLCAzXS5oYXNPd25Qcm9wZXJ0eSgiMCIpYCkuDQogICAgICAgICAgICBpZiAoZ2V0Q2xhc3MuY2FsbCh2YWx1ZSkgPT0gYXJyYXlDbGFzcykgew0KICAgICAgICAgICAgICBmb3IgKGxlbmd0aCA9IHZhbHVlLmxlbmd0aDsgbGVuZ3RoLS07KSB7DQogICAgICAgICAgICAgICAgdXBkYXRlKHZhbHVlLCBsZW5ndGgsIGNhbGxiYWNrKTsNCiAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gKHByb3BlcnR5KSB7DQogICAgICAgICAgICAgICAgdXBkYXRlKHZhbHVlLCBwcm9wZXJ0eSwgY2FsbGJhY2spOw0KICAgICAgICAgICAgICB9KTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQogICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwoc291cmNlLCBwcm9wZXJ0eSwgdmFsdWUpOw0KICAgICAgICB9Ow0KDQogICAgICAgIC8vIFB1YmxpYzogYEpTT04ucGFyc2VgLiBTZWUgRVMgNS4xIHNlY3Rpb24gMTUuMTIuMi4NCiAgICAgICAgZXhwb3J0cy5wYXJzZSA9IGZ1bmN0aW9uIChzb3VyY2UsIGNhbGxiYWNrKSB7DQogICAgICAgICAgdmFyIHJlc3VsdCwgdmFsdWU7DQogICAgICAgICAgSW5kZXggPSAwOw0KICAgICAgICAgIFNvdXJjZSA9ICIiICsgc291cmNlOw0KICAgICAgICAgIHJlc3VsdCA9IGdldChsZXgoKSk7DQogICAgICAgICAgLy8gSWYgYSBKU09OIHN0cmluZyBjb250YWlucyBtdWx0aXBsZSB0b2tlbnMsIGl0IGlzIGludmFsaWQuDQogICAgICAgICAgaWYgKGxleCgpICE9ICIkIikgew0KICAgICAgICAgICAgYWJvcnQoKTsNCiAgICAgICAgICB9DQogICAgICAgICAgLy8gUmVzZXQgdGhlIHBhcnNlciBzdGF0ZS4NCiAgICAgICAgICBJbmRleCA9IFNvdXJjZSA9IG51bGw7DQogICAgICAgICAgcmV0dXJuIGNhbGxiYWNrICYmIGdldENsYXNzLmNhbGwoY2FsbGJhY2spID09IGZ1bmN0aW9uQ2xhc3MgPyB3YWxrKCh2YWx1ZSA9IHt9LCB2YWx1ZVsiIl0gPSByZXN1bHQsIHZhbHVlKSwgIiIsIGNhbGxiYWNrKSA6IHJlc3VsdDsNCiAgICAgICAgfTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICBleHBvcnRzWyJydW5JbkNvbnRleHQiXSA9IHJ1bkluQ29udGV4dDsNCiAgICByZXR1cm4gZXhwb3J0czsNCiAgfQ0KDQogIGlmIChmcmVlRXhwb3J0cyAmJiAhaXNMb2FkZXIpIHsNCiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIGVudmlyb25tZW50cy4NCiAgICBydW5JbkNvbnRleHQocm9vdCwgZnJlZUV4cG9ydHMpOw0KICB9IGVsc2Ugew0KICAgIC8vIEV4cG9ydCBmb3Igd2ViIGJyb3dzZXJzIGFuZCBKYXZhU2NyaXB0IGVuZ2luZXMuDQogICAgdmFyIG5hdGl2ZUpTT04gPSByb290LkpTT04sDQogICAgICAgIHByZXZpb3VzSlNPTiA9IHJvb3RbIkpTT04zIl0sDQogICAgICAgIGlzUmVzdG9yZWQgPSBmYWxzZTsNCg0KICAgIHZhciBKU09OMyA9IHJ1bkluQ29udGV4dChyb290LCAocm9vdFsiSlNPTjMiXSA9IHsNCiAgICAgIC8vIFB1YmxpYzogUmVzdG9yZXMgdGhlIG9yaWdpbmFsIHZhbHVlIG9mIHRoZSBnbG9iYWwgYEpTT05gIG9iamVjdCBhbmQNCiAgICAgIC8vIHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIGBKU09OM2Agb2JqZWN0Lg0KICAgICAgIm5vQ29uZmxpY3QiOiBmdW5jdGlvbiAoKSB7DQogICAgICAgIGlmICghaXNSZXN0b3JlZCkgew0KICAgICAgICAgIGlzUmVzdG9yZWQgPSB0cnVlOw0KICAgICAgICAgIHJvb3QuSlNPTiA9IG5hdGl2ZUpTT047DQogICAgICAgICAgcm9vdFsiSlNPTjMiXSA9IHByZXZpb3VzSlNPTjsNCiAgICAgICAgICBuYXRpdmVKU09OID0gcHJldmlvdXNKU09OID0gbnVsbDsNCiAgICAgICAgfQ0KICAgICAgICByZXR1cm4gSlNPTjM7DQogICAgICB9DQogICAgfSkpOw0KDQogICAgcm9vdC5KU09OID0gew0KICAgICAgInBhcnNlIjogSlNPTjMucGFyc2UsDQogICAgICAic3RyaW5naWZ5IjogSlNPTjMuc3RyaW5naWZ5DQogICAgfTsNCiAgfQ0KDQogIC8vIEV4cG9ydCBmb3IgYXN5bmNocm9ub3VzIG1vZHVsZSBsb2FkZXJzLg0KICBpZiAoaXNMb2FkZXIpIHsNCiAgICBkZWZpbmUoZnVuY3Rpb24gKCkgew0KICAgICAgcmV0dXJuIEpTT04zOw0KICAgIH0pOw0KICB9DQp9KS5jYWxsKHRoaXMpOw0KDQp9KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkNCg0KfSx7fV0sNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KbW9kdWxlLmV4cG9ydHMgPSB0b0FycmF5DQoNCmZ1bmN0aW9uIHRvQXJyYXkobGlzdCwgaW5kZXgpIHsNCiAgICB2YXIgYXJyYXkgPSBbXQ0KDQogICAgaW5kZXggPSBpbmRleCB8fCAwDQoNCiAgICBmb3IgKHZhciBpID0gaW5kZXggfHwgMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgYXJyYXlbaSAtIGluZGV4XSA9IGxpc3RbaV0NCiAgICB9DQoNCiAgICByZXR1cm4gYXJyYXkNCn0NCg0KfSx7fV0sNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpew0KKGZ1bmN0aW9uIChnbG9iYWwpew0KLyohIGh0dHBzOi8vbXRocy5iZS93dGY4IHYxLjAuMCBieSBAbWF0aGlhcyAqLw0KOyhmdW5jdGlvbihyb290KSB7DQoNCiAgLy8gRGV0ZWN0IGZyZWUgdmFyaWFibGVzIGBleHBvcnRzYA0KICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzOw0KDQogIC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgDQogIHZhciBmcmVlTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYNCiAgICBtb2R1bGUuZXhwb3J0cyA9PSBmcmVlRXhwb3J0cyAmJiBtb2R1bGU7DQoNCiAgLy8gRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAsIGZyb20gTm9kZS5qcyBvciBCcm93c2VyaWZpZWQgY29kZSwNCiAgLy8gYW5kIHVzZSBpdCBhcyBgcm9vdGANCiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbDsNCiAgaWYgKGZyZWVHbG9iYWwuZ2xvYmFsID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWwud2luZG93ID09PSBmcmVlR2xvYmFsKSB7DQogICAgcm9vdCA9IGZyZWVHbG9iYWw7DQogIH0NCg0KICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICB2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTsNCg0KICAvLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZQ0KICBmdW5jdGlvbiB1Y3MyZGVjb2RlKHN0cmluZykgew0KICAgIHZhciBvdXRwdXQgPSBbXTsNCiAgICB2YXIgY291bnRlciA9IDA7DQogICAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7DQogICAgdmFyIHZhbHVlOw0KICAgIHZhciBleHRyYTsNCiAgICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkgew0KICAgICAgdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspOw0KICAgICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkgew0KICAgICAgICAvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXINCiAgICAgICAgZXh0cmEgPSBzdHJpbmcuY2hhckNvZGVBdChjb3VudGVyKyspOw0KICAgICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gbG93IHN1cnJvZ2F0ZQ0KICAgICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgLy8gdW5tYXRjaGVkIHN1cnJvZ2F0ZTsgb25seSBhcHBlbmQgdGhpcyBjb2RlIHVuaXQsIGluIGNhc2UgdGhlIG5leHQNCiAgICAgICAgICAvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXINCiAgICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7DQogICAgICAgICAgY291bnRlci0tOw0KICAgICAgICB9DQogICAgICB9IGVsc2Ugew0KICAgICAgICBvdXRwdXQucHVzaCh2YWx1ZSk7DQogICAgICB9DQogICAgfQ0KICAgIHJldHVybiBvdXRwdXQ7DQogIH0NCg0KICAvLyBUYWtlbiBmcm9tIGh0dHBzOi8vbXRocy5iZS9wdW55Y29kZQ0KICBmdW5jdGlvbiB1Y3MyZW5jb2RlKGFycmF5KSB7DQogICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsNCiAgICB2YXIgaW5kZXggPSAtMTsNCiAgICB2YXIgdmFsdWU7DQogICAgdmFyIG91dHB1dCA9ICcnOw0KICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7DQogICAgICB2YWx1ZSA9IGFycmF5W2luZGV4XTsNCiAgICAgIGlmICh2YWx1ZSA+IDB4RkZGRikgew0KICAgICAgICB2YWx1ZSAtPSAweDEwMDAwOw0KICAgICAgICBvdXRwdXQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKHZhbHVlID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKTsNCiAgICAgICAgdmFsdWUgPSAweERDMDAgfCB2YWx1ZSAmIDB4M0ZGOw0KICAgICAgfQ0KICAgICAgb3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSk7DQogICAgfQ0KICAgIHJldHVybiBvdXRwdXQ7DQogIH0NCg0KICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8NCg0KICBmdW5jdGlvbiBjcmVhdGVCeXRlKGNvZGVQb2ludCwgc2hpZnQpIHsNCiAgICByZXR1cm4gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IHNoaWZ0KSAmIDB4M0YpIHwgMHg4MCk7DQogIH0NCg0KICBmdW5jdGlvbiBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50KSB7DQogICAgaWYgKChjb2RlUG9pbnQgJiAweEZGRkZGRjgwKSA9PSAwKSB7IC8vIDEtYnl0ZSBzZXF1ZW5jZQ0KICAgICAgcmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZShjb2RlUG9pbnQpOw0KICAgIH0NCiAgICB2YXIgc3ltYm9sID0gJyc7DQogICAgaWYgKChjb2RlUG9pbnQgJiAweEZGRkZGODAwKSA9PSAwKSB7IC8vIDItYnl0ZSBzZXF1ZW5jZQ0KICAgICAgc3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDYpICYgMHgxRikgfCAweEMwKTsNCiAgICB9DQogICAgZWxzZSBpZiAoKGNvZGVQb2ludCAmIDB4RkZGRjAwMDApID09IDApIHsgLy8gMy1ieXRlIHNlcXVlbmNlDQogICAgICBzeW1ib2wgPSBzdHJpbmdGcm9tQ2hhckNvZGUoKChjb2RlUG9pbnQgPj4gMTIpICYgMHgwRikgfCAweEUwKTsNCiAgICAgIHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7DQogICAgfQ0KICAgIGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRTAwMDAwKSA9PSAwKSB7IC8vIDQtYnl0ZSBzZXF1ZW5jZQ0KICAgICAgc3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDE4KSAmIDB4MDcpIHwgMHhGMCk7DQogICAgICBzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDEyKTsNCiAgICAgIHN5bWJvbCArPSBjcmVhdGVCeXRlKGNvZGVQb2ludCwgNik7DQogICAgfQ0KICAgIHN5bWJvbCArPSBzdHJpbmdGcm9tQ2hhckNvZGUoKGNvZGVQb2ludCAmIDB4M0YpIHwgMHg4MCk7DQogICAgcmV0dXJuIHN5bWJvbDsNCiAgfQ0KDQogIGZ1bmN0aW9uIHd0ZjhlbmNvZGUoc3RyaW5nKSB7DQogICAgdmFyIGNvZGVQb2ludHMgPSB1Y3MyZGVjb2RlKHN0cmluZyk7DQogICAgdmFyIGxlbmd0aCA9IGNvZGVQb2ludHMubGVuZ3RoOw0KICAgIHZhciBpbmRleCA9IC0xOw0KICAgIHZhciBjb2RlUG9pbnQ7DQogICAgdmFyIGJ5dGVTdHJpbmcgPSAnJzsNCiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkgew0KICAgICAgY29kZVBvaW50ID0gY29kZVBvaW50c1tpbmRleF07DQogICAgICBieXRlU3RyaW5nICs9IGVuY29kZUNvZGVQb2ludChjb2RlUG9pbnQpOw0KICAgIH0NCiAgICByZXR1cm4gYnl0ZVN0cmluZzsNCiAgfQ0KDQogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLw0KDQogIGZ1bmN0aW9uIHJlYWRDb250aW51YXRpb25CeXRlKCkgew0KICAgIGlmIChieXRlSW5kZXggPj0gYnl0ZUNvdW50KSB7DQogICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBieXRlIGluZGV4Jyk7DQogICAgfQ0KDQogICAgdmFyIGNvbnRpbnVhdGlvbkJ5dGUgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7DQogICAgYnl0ZUluZGV4Kys7DQoNCiAgICBpZiAoKGNvbnRpbnVhdGlvbkJ5dGUgJiAweEMwKSA9PSAweDgwKSB7DQogICAgICByZXR1cm4gY29udGludWF0aW9uQnl0ZSAmIDB4M0Y7DQogICAgfQ0KDQogICAgLy8gSWYgd2UgZW5kIHVwIGhlcmUsIGl04oCZcyBub3QgYSBjb250aW51YXRpb24gYnl0ZS4NCiAgICB0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpOw0KICB9DQoNCiAgZnVuY3Rpb24gZGVjb2RlU3ltYm9sKCkgew0KICAgIHZhciBieXRlMTsNCiAgICB2YXIgYnl0ZTI7DQogICAgdmFyIGJ5dGUzOw0KICAgIHZhciBieXRlNDsNCiAgICB2YXIgY29kZVBvaW50Ow0KDQogICAgaWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkgew0KICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpOw0KICAgIH0NCg0KICAgIGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7DQogICAgICByZXR1cm4gZmFsc2U7DQogICAgfQ0KDQogICAgLy8gUmVhZCB0aGUgZmlyc3QgYnl0ZS4NCiAgICBieXRlMSA9IGJ5dGVBcnJheVtieXRlSW5kZXhdICYgMHhGRjsNCiAgICBieXRlSW5kZXgrKzsNCg0KICAgIC8vIDEtYnl0ZSBzZXF1ZW5jZSAobm8gY29udGludWF0aW9uIGJ5dGVzKQ0KICAgIGlmICgoYnl0ZTEgJiAweDgwKSA9PSAwKSB7DQogICAgICByZXR1cm4gYnl0ZTE7DQogICAgfQ0KDQogICAgLy8gMi1ieXRlIHNlcXVlbmNlDQogICAgaWYgKChieXRlMSAmIDB4RTApID09IDB4QzApIHsNCiAgICAgIHZhciBieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7DQogICAgICBjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjsNCiAgICAgIGlmIChjb2RlUG9pbnQgPj0gMHg4MCkgew0KICAgICAgICByZXR1cm4gY29kZVBvaW50Ow0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTsNCiAgICAgIH0NCiAgICB9DQoNCiAgICAvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpDQogICAgaWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHsNCiAgICAgIGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTsNCiAgICAgIGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTsNCiAgICAgIGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMzsNCiAgICAgIGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7DQogICAgICAgIHJldHVybiBjb2RlUG9pbnQ7DQogICAgICB9IGVsc2Ugew0KICAgICAgICB0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpOw0KICAgICAgfQ0KICAgIH0NCg0KICAgIC8vIDQtYnl0ZSBzZXF1ZW5jZQ0KICAgIGlmICgoYnl0ZTEgJiAweEY4KSA9PSAweEYwKSB7DQogICAgICBieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7DQogICAgICBieXRlMyA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7DQogICAgICBieXRlNCA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7DQogICAgICBjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgwRikgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwQykgfA0KICAgICAgICAoYnl0ZTMgPDwgMHgwNikgfCBieXRlNDsNCiAgICAgIGlmIChjb2RlUG9pbnQgPj0gMHgwMTAwMDAgJiYgY29kZVBvaW50IDw9IDB4MTBGRkZGKSB7DQogICAgICAgIHJldHVybiBjb2RlUG9pbnQ7DQogICAgICB9DQogICAgfQ0KDQogICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgV1RGLTggZGV0ZWN0ZWQnKTsNCiAgfQ0KDQogIHZhciBieXRlQXJyYXk7DQogIHZhciBieXRlQ291bnQ7DQogIHZhciBieXRlSW5kZXg7DQogIGZ1bmN0aW9uIHd0ZjhkZWNvZGUoYnl0ZVN0cmluZykgew0KICAgIGJ5dGVBcnJheSA9IHVjczJkZWNvZGUoYnl0ZVN0cmluZyk7DQogICAgYnl0ZUNvdW50ID0gYnl0ZUFycmF5Lmxlbmd0aDsNCiAgICBieXRlSW5kZXggPSAwOw0KICAgIHZhciBjb2RlUG9pbnRzID0gW107DQogICAgdmFyIHRtcDsNCiAgICB3aGlsZSAoKHRtcCA9IGRlY29kZVN5bWJvbCgpKSAhPT0gZmFsc2UpIHsNCiAgICAgIGNvZGVQb2ludHMucHVzaCh0bXApOw0KICAgIH0NCiAgICByZXR1cm4gdWNzMmVuY29kZShjb2RlUG9pbnRzKTsNCiAgfQ0KDQogIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qLw0KDQogIHZhciB3dGY4ID0gew0KICAgICd2ZXJzaW9uJzogJzEuMC4wJywNCiAgICAnZW5jb2RlJzogd3RmOGVuY29kZSwNCiAgICAnZGVjb2RlJzogd3RmOGRlY29kZQ0KICB9Ow0KDQogIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJucw0KICAvLyBsaWtlIHRoZSBmb2xsb3dpbmc6DQogIGlmICgNCiAgICB0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiYNCiAgICB0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJg0KICAgIGRlZmluZS5hbWQNCiAgKSB7DQogICAgZGVmaW5lKGZ1bmN0aW9uKCkgew0KICAgICAgcmV0dXJuIHd0Zjg7DQogICAgfSk7DQogIH0gZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgIWZyZWVFeHBvcnRzLm5vZGVUeXBlKSB7DQogICAgaWYgKGZyZWVNb2R1bGUpIHsgLy8gaW4gTm9kZS5qcyBvciBSaW5nb0pTIHYwLjguMCsNCiAgICAgIGZyZWVNb2R1bGUuZXhwb3J0cyA9IHd0Zjg7DQogICAgfSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC0NCiAgICAgIHZhciBvYmplY3QgPSB7fTsNCiAgICAgIHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdC5oYXNPd25Qcm9wZXJ0eTsNCiAgICAgIGZvciAodmFyIGtleSBpbiB3dGY4KSB7DQogICAgICAgIGhhc093blByb3BlcnR5LmNhbGwod3RmOCwga2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHd0Zjhba2V5XSk7DQogICAgICB9DQogICAgfQ0KICB9IGVsc2UgeyAvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyDQogICAgcm9vdC53dGY4ID0gd3RmODsNCiAgfQ0KDQp9KHRoaXMpKTsNCg0KfSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gd2luZG93IDoge30pDQoNCn0se31dLDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCid1c2Ugc3RyaWN0JzsNCg0KdmFyIGFscGhhYmV0ID0gJzAxMjM0NTY3ODlBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LV8nLnNwbGl0KCcnKQ0KICAsIGxlbmd0aCA9IDY0DQogICwgbWFwID0ge30NCiAgLCBzZWVkID0gMA0KICAsIGkgPSAwDQogICwgcHJldjsNCg0KLyoqDQogKiBSZXR1cm4gYSBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBzcGVjaWZpZWQgbnVtYmVyLg0KICoNCiAqIEBwYXJhbSB7TnVtYmVyfSBudW0gVGhlIG51bWJlciB0byBjb252ZXJ0Lg0KICogQHJldHVybnMge1N0cmluZ30gVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbnVtYmVyLg0KICogQGFwaSBwdWJsaWMNCiAqLw0KZnVuY3Rpb24gZW5jb2RlKG51bSkgew0KICB2YXIgZW5jb2RlZCA9ICcnOw0KDQogIGRvIHsNCiAgICBlbmNvZGVkID0gYWxwaGFiZXRbbnVtICUgbGVuZ3RoXSArIGVuY29kZWQ7DQogICAgbnVtID0gTWF0aC5mbG9vcihudW0gLyBsZW5ndGgpOw0KICB9IHdoaWxlIChudW0gPiAwKTsNCg0KICByZXR1cm4gZW5jb2RlZDsNCn0NCg0KLyoqDQogKiBSZXR1cm4gdGhlIGludGVnZXIgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBzdHJpbmcuDQogKg0KICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuDQogKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgaW50ZWdlciB2YWx1ZSByZXByZXNlbnRlZCBieSB0aGUgc3RyaW5nLg0KICogQGFwaSBwdWJsaWMNCiAqLw0KZnVuY3Rpb24gZGVjb2RlKHN0cikgew0KICB2YXIgZGVjb2RlZCA9IDA7DQoNCiAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykgew0KICAgIGRlY29kZWQgPSBkZWNvZGVkICogbGVuZ3RoICsgbWFwW3N0ci5jaGFyQXQoaSldOw0KICB9DQoNCiAgcmV0dXJuIGRlY29kZWQ7DQp9DQoNCi8qKg0KICogWWVhc3Q6IEEgdGlueSBncm93aW5nIGlkIGdlbmVyYXRvci4NCiAqDQogKiBAcmV0dXJucyB7U3RyaW5nfSBBIHVuaXF1ZSBpZC4NCiAqIEBhcGkgcHVibGljDQogKi8NCmZ1bmN0aW9uIHllYXN0KCkgew0KICB2YXIgbm93ID0gZW5jb2RlKCtuZXcgRGF0ZSgpKTsNCg0KICBpZiAobm93ICE9PSBwcmV2KSByZXR1cm4gc2VlZCA9IDAsIHByZXYgPSBub3c7DQogIHJldHVybiBub3cgKycuJysgZW5jb2RlKHNlZWQrKyk7DQp9DQoNCi8vDQovLyBNYXAgZWFjaCBjaGFyYWN0ZXIgdG8gaXRzIGluZGV4Lg0KLy8NCmZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIG1hcFthbHBoYWJldFtpXV0gPSBpOw0KDQovLw0KLy8gRXhwb3NlIHRoZSBgeWVhc3RgLCBgZW5jb2RlYCBhbmQgYGRlY29kZWAgZnVuY3Rpb25zLg0KLy8NCnllYXN0LmVuY29kZSA9IGVuY29kZTsNCnllYXN0LmRlY29kZSA9IGRlY29kZTsNCm1vZHVsZS5leHBvcnRzID0geWVhc3Q7DQoNCn0se31dLDQ2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsNCi8qKg0KKiBDb3B5cmlnaHQgMjAxNiBQVCBJbm92YcOnw6NvIGUgU2lzdGVtYXMgU0ENCiogQ29weXJpZ2h0IDIwMTYgSU5FU0MtSUQNCiogQ29weXJpZ2h0IDIwMTYgUVVPQklTIE5FVFdPUktTIFNMDQoqIENvcHlyaWdodCAyMDE2IEZSQVVOSE9GRVItR0VTRUxMU0NIQUZUIFpVUiBGT0VSREVSVU5HIERFUiBBTkdFV0FORFRFTiBGT1JTQ0hVTkcgRS5WDQoqIENvcHlyaWdodCAyMDE2IE9SQU5HRSBTQQ0KKiBDb3B5cmlnaHQgMjAxNiBEZXV0c2NoZSBUZWxla29tIEFHDQoqIENvcHlyaWdodCAyMDE2IEFwaXplZQ0KKiBDb3B5cmlnaHQgMjAxNiBURUNITklTQ0hFIFVOSVZFUlNJVEFUIEJFUkxJTg0KKg0KKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsNCiogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLg0KKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQNCioNCiogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjANCioNCiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQ0KKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLA0KKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4NCiogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZA0KKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4NCioqLw0KDQondXNlIHN0cmljdCc7DQoNCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsNCiAgdmFsdWU6IHRydWUNCn0pOw0KDQp2YXIgX2NyZWF0ZUNsYXNzID0gKGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgndmFsdWUnIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KSgpOw0KDQpleHBvcnRzWydkZWZhdWx0J10gPSBhY3RpdmF0ZTsNCg0KZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKTsgfSB9DQoNCnZhciBpbyA9IHJlcXVpcmUoJ3NvY2tldC5pby1jbGllbnQnKTsNCg0KdmFyIE5vZGVqc1Byb3RvU3R1YiA9IChmdW5jdGlvbiAoKSB7DQoNCiAgLyoqDQogICAqIE5vZGVqcyBQcm90b1N0dWIgY3JlYXRpb24NCiAgICogQHBhcmFtICB7c3RyaW5nfSBydW50aW1lUHJvdG9TdHViVVJMIC0gVVJMIHVzZWQgaW50ZXJuYWxseSBmb3IgbWVzc2FnZSBkZWxpdmVyeSBwb2ludC4gTm90IHVzZWQgZm9yIE1lc3NhZ2VOb2RlIGRlbGl2ZXIuDQogICAqIEBwYXJhbSAge01pbmlCdXN9IGJ1cyAtIE1pbmlCdXMgdXNlZCB0byBzZW5kL3JlY2VpdmUgbWVzc2FnZXMuIE5vcm1hbGx5IGNvbm5lY3RlZCB0byB0aGUgTWVzc2FnZUJ1cy4NCiAgICogQHBhcmFtICB7T2JqZWN0fSBjb25maWcgLSBNYW5kYXRvcnkgZmllbGRzIGFyZTogInVybCIgb2YgdGhlIE1lc3NhZ2VOb2RlIGFkZHJlc3MgYW5kICJydW50aW1lVVJMIi5zDQogICAqIEByZXR1cm4ge05vZGVqc1Byb3RvU3R1Yn0NCiAgICovDQoNCiAgZnVuY3Rpb24gTm9kZWpzUHJvdG9TdHViKHJ1bnRpbWVQcm90b1N0dWJVUkwsIGJ1cywgY29uZmlnKSB7DQogICAgdmFyIF90aGlzMiA9IHRoaXM7DQoNCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTm9kZWpzUHJvdG9TdHViKTsNCg0KICAgIHRoaXMuX2lkID0gMDsNCg0KICAgIGNvbmZpZy51cmwgPSBjb25maWcudXJsLnJlcGxhY2UoLy4qPzpcL1wvL2csICcnKTsNCiAgICB0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMID0gcnVudGltZVByb3RvU3R1YlVSTDsNCiAgICB0aGlzLl9idXMgPSBidXM7DQogICAgdGhpcy5fY29uZmlnID0gY29uZmlnOw0KDQogICAgdGhpcy5fc29jayA9IG51bGw7DQoNCiAgICB0aGlzLl9idXMuYWRkTGlzdGVuZXIoJyonLCBmdW5jdGlvbiAobXNnKSB7DQogICAgICAvLyAgIGNvbnNvbGUubG9nKCdldmVudCBkZXRlY3RlZCcsIG1zZyk7DQogICAgICBfdGhpczIuX2Fzc3VtZU9wZW4gPSB0cnVlOw0KICAgICAgX3RoaXMyLl9zZW5kTXNnKG1zZyk7DQogICAgfSk7DQogIH0NCg0KICAvKioNCiAgICogR2V0IHRoZSBjb25maWd1cmF0aW9uIGZvciB0aGlzIFByb3RvU3R1Yg0KICAgKiBAcmV0dXJuIHtPYmplY3R9IC0gTWFuZGF0b3J5IGZpZWxkcyBhcmU6ICJ1cmwiIG9mIHRoZSBNZXNzYWdlTm9kZSBhZGRyZXNzIGFuZCAicnVudGltZVVSTCIuDQogICAqLw0KDQogIF9jcmVhdGVDbGFzcyhOb2RlanNQcm90b1N0dWIsIFt7DQogICAga2V5OiAnY29ubmVjdCcsDQoNCiAgICAvKioNCiAgICAgKiBUcnkgdG8gb3BlbiB0aGUgY29ubmVjdGlvbiB0byB0aGUgTWVzc2FnZU5vZGUuIENvbm5lY3Rpb24gaXMgYXV0byBtYW5hZ2VkLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgdGhpcyBleHBsaWNpdGx5Lg0KICAgICAqIEhvd2V2ZXIsIGlmICJkaXNjb25uZWN0KCkiIGlzIGNhbGxlZCwgaXQncyBuZWNlc3NhcnkgdG8gY2FsbCB0aGlzIHRvIGVuYWJsZSBjb25uZWN0aW9ucyBhZ2Fpbi4NCiAgICAgKiBBIHN0YXR1cyBtZXNzYWdlIGlzIHNlbnQgdG8gInJ1bnRpbWVQcm90b1N0dWJVUkwvc3RhdHVzIiwgY29udGFpbmluZyB0aGUgdmFsdWUgImNvbm5lY3RlZCIgaWYgc3VjY2Vzc2Z1bCwgb3IgImRpc2Nvbm5lY3RlZCIgaWYgc29tZSBlcnJvciBvY2N1cnMuDQogICAgICovDQogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3QoKSB7DQogICAgICB2YXIgX3RoaXMzID0gdGhpczsNCg0KICAgICAgdGhpcy5fYXNzdW1lT3BlbiA9IHRydWU7DQogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgew0KICAgICAgICB2YXIgX3RoaXMgPSBfdGhpczM7DQoNCiAgICAgICAgaWYgKF90aGlzMy5fc29jayAhPT0gbnVsbCAmJiBfdGhpczMuX3NvY2suY29ubmVjdGVkKSB7DQogICAgICAgICAgLy8gY29uc29sZS5sb2coJ2lvIGFscmVhZHkgZGVmaW5lZCcpOw0KICAgICAgICAgIHJlc29sdmUoX3RoaXMzLl9zb2NrKTsNCiAgICAgICAgICByZXR1cm47DQogICAgICAgIH0NCg0KICAgICAgICAvLyAgIGNvbnNvbGUubG9nKCdpbml0IHNvY2tldC5pbycpOw0KICAgICAgICBfdGhpczMuX3NvY2sgPSBpbyhfdGhpczMuX2NvbmZpZy51cmwsIHsNCiAgICAgICAgICBmb3JjZU5ldzogdHJ1ZQ0KICAgICAgICB9KTsNCiAgICAgICAgX3RoaXMzLl9zb2NrLm9uKCdjb25uZWN0JywgZnVuY3Rpb24gKCkgew0KICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdpbyBjb25uZWN0ZWQnKTsNCiAgICAgICAgICBfdGhpcy5fc2VuZE9wZW4oKTsNCiAgICAgICAgfSk7DQoNCiAgICAgICAgX3RoaXMzLl9zb2NrLm9uKCdtZXNzYWdlJywgZnVuY3Rpb24gKG1zZykgew0KICAgICAgICAgIGlmICh0eXBlb2YgbXNnICE9PSAnb2JqZWN0Jykgew0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgbXNnID0gSlNPTi5wYXJzZShtc2cpOw0KICAgICAgICAgICAgfSBjYXRjaCAoZSkgew0KICAgICAgICAgICAgICBtc2cgPSB7fTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICB9DQoNCiAgICAgICAgICBpZiAobXNnLmhhc093blByb3BlcnR5KCdmcm9tJykgJiYgbXNnLmZyb20gPT09ICdtbjovc2Vzc2lvbicpIHsNCiAgICAgICAgICAgIC8vICAgY29uc29sZS5sb2coJ21zZyBmcm9tIG1uOi9zZXNzaW9uJywgbXNnLnR5cGUsIG1zZy5pZCk7DQogICAgICAgICAgICBpZiAobXNnLmJvZHkuY29kZSA9PT0gMjAwKSB7DQogICAgICAgICAgICAgIF90aGlzLl9zZW5kU3RhdHVzKCdjb25uZWN0ZWQnKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgIF90aGlzLl9zZW5kU3RhdHVzKCdkaXNjb25uZWN0ZWQnLCByZXBseS5ib2R5LmRlc2MpOw0KICAgICAgICAgICAgfQ0KDQogICAgICAgICAgICByZXNvbHZlKF90aGlzLl9zb2NrKTsNCiAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgX3RoaXMuX2RlbGl2ZXIobXNnKTsNCiAgICAgICAgICB9DQogICAgICAgIH0pOw0KDQogICAgICAgIF90aGlzMy5fc29jay5vbignZGlzY29ubmVjdCcsIGZ1bmN0aW9uIChyZWFzb24pIHsNCiAgICAgICAgICBfdGhpcy5fc2VuZFN0YXR1cygnZGlzY29ubmVjdGVkJywgcmVhc29uKTsNCiAgICAgICAgICBkZWxldGUgX3RoaXMuX3NvY2s7DQogICAgICAgIH0pOw0KDQogICAgICAgIF90aGlzMy5fc29jay5vbignZXJyb3InLCBmdW5jdGlvbiAocmVhc29uKSB7fSk7DQogICAgICB9KTsNCiAgICB9DQoNCiAgICAvKioNCiAgICAgKiBJdCB3aWxsIGRpc2Nvbm5lY3QgYW5kIG9yZGVyIHRvIHN0YXkgZGlzY29ubmVjdGVkLiBSZWNvbm5lY3Rpb24gdHJpZXMsIHdpbGwgbm90IGJlIGF0dGVtcHRlZCwgdW5sZXNzICJjb25uZWN0KCkiIGlzIGNhbGxlZC4NCiAgICAgKiBBIHN0YXR1cyBtZXNzYWdlIGlzIHNlbnQgdG8gInJ1bnRpbWVQcm90b1N0dWJVUkwvc3RhdHVzIiB3aXRoIHZhbHVlICJkaXNjb25uZWN0ZWQiLg0KICAgICAqLw0KICB9LCB7DQogICAga2V5OiAnZGlzY29ubmVjdCcsDQogICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3QoKSB7DQogICAgICAvLyBjb25zb2xlLmxvZygnZGlzY29ubmVjdCcpOw0KICAgICAgdGhpcy5fc2VuZENsb3NlKCk7DQogICAgICB0aGlzLl9hc3N1bWVPcGVuID0gZmFsc2U7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAncG9zdE1lc3NhZ2UnLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZShtc2cpIHsNCiAgICAgIC8vIGNvbnNvbGUubG9nKCdwb3N0TWVzc2FnZScpOw0KICAgICAgdGhpcy5fc29jay5zZW5kKEpTT04uc3RyaW5naWZ5KG1zZykpOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ19zZW5kTXNnJywNCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NlbmRNc2cobXNnKSB7DQogICAgICB2YXIgX3RoaXM0ID0gdGhpczsNCg0KICAgICAgLy8gY29uc29sZS5sb2coJ19zZW5kTXNnJywgbXNnKTsNCiAgICAgIGlmICh0aGlzLl9maWx0ZXIobXNnKSkgew0KICAgICAgICBpZiAodGhpcy5fYXNzdW1lT3BlbikgdGhpcy5jb25uZWN0KCkudGhlbihmdW5jdGlvbiAoKSB7DQogICAgICAgICAgLy8gICBjb25zb2xlLmxvZygndGhlbiBwb3N0IG1lc3NhZ2UnLCBtc2cpOw0KICAgICAgICAgIF90aGlzNC5wb3N0TWVzc2FnZShtc2cpOw0KICAgICAgICB9KTsNCiAgICAgIH0NCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdfc2VuZE9wZW4nLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfc2VuZE9wZW4oKSB7DQogICAgICAvLyBjb25zb2xlLmxvZygnX3NlbmRPcGVuJyk7DQogICAgICB0aGlzLl9pZCsrOw0KDQogICAgICB0aGlzLl9zZW5kTXNnKHsNCiAgICAgICAgaWQ6IHRoaXMuX2lkLA0KICAgICAgICB0eXBlOiAnb3BlbicsDQogICAgICAgIGZyb206IHRoaXMuX2NvbmZpZy5ydW50aW1lVVJMLA0KICAgICAgICB0bzogJ21uOi9zZXNzaW9uJw0KICAgICAgfSk7DQogICAgfQ0KICB9LCB7DQogICAga2V5OiAnX3NlbmRDbG9zZScsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kQ2xvc2UoKSB7DQogICAgICAvLyBjb25zb2xlLmxvZygnX3NlbmRDbG9zZScpOw0KDQogICAgICB0aGlzLl9pZCsrOw0KICAgICAgdGhpcy5fc2VuZE1zZyh7DQogICAgICAgIGlkOiB0aGlzLl9pZCwNCiAgICAgICAgdHlwZTogJ2Nsb3NlJywNCiAgICAgICAgZnJvbTogdGhpcy5fY29uZmlnLnJ1bnRpbWVVUkwsDQogICAgICAgIHRvOiAnbW46L3Nlc3Npb24nDQogICAgICB9KTsNCiAgICB9DQogIH0sIHsNCiAgICBrZXk6ICdfc2VuZFN0YXR1cycsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZW5kU3RhdHVzKHZhbHVlLCByZWFzb24pIHsNCiAgICAgIC8vIGNvbnNvbGUubG9nKCdfc2VuZFN0YXR1cycsIHZhbHVlKTsNCg0KICAgICAgdmFyIG1zZyA9IHsNCiAgICAgICAgdHlwZTogJ3VwZGF0ZScsDQogICAgICAgIGZyb206IHRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkwsDQogICAgICAgIHRvOiB0aGlzLl9ydW50aW1lUHJvdG9TdHViVVJMICsgJy9zdGF0dXMnLA0KICAgICAgICBib2R5OiB7DQogICAgICAgICAgdmFsdWU6IHZhbHVlDQogICAgICAgIH0NCiAgICAgIH07DQoNCiAgICAgIGlmIChyZWFzb24pIHsNCiAgICAgICAgbXNnLmJvZHkuZGVzYyA9IHJlYXNvbjsNCiAgICAgIH0NCg0KICAgICAgdGhpcy5fYnVzLnBvc3RNZXNzYWdlKG1zZyk7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogRmlsdGVyIG1ldGhvZCB0aGF0IHNob3VsZCBiZSB1c2VkIGZvciBldmVyeSBtZXNzYWdlcyBpbiBkaXJlY3Rpb246IFByb3Rvc3R1YiAtPiBNZXNzYWdlTm9kZQ0KICAgICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBPcmlnaW5hbCBtZXNzYWdlIGZyb20gdGhlIE1lc3NhZ2VCdXMNCiAgICAgKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmIGl0J3MgdG8gYmUgZGVsaXZlciBpbiB0aGUgTWVzc2FnZU5vZGUNCiAgICAgKi8NCiAgfSwgew0KICAgIGtleTogJ19maWx0ZXInLA0KICAgIHZhbHVlOiBmdW5jdGlvbiBfZmlsdGVyKG1zZykgew0KICAgICAgaWYgKG1zZy5ib2R5ICYmIG1zZy5ib2R5LnZpYSA9PT0gdGhpcy5fcnVudGltZVByb3RvU3R1YlVSTCkgcmV0dXJuIGZhbHNlOw0KICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgLyoqDQogICAgICogTWV0aG9kIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gZGVsaXZlciB0aGUgbWVzc2FnZSBpbiBkaXJlY3Rpb246IFByb3Rvc3R1YiAtPiBNZXNzYWdlQnVzIChjb3JlKQ0KICAgICAqIEBwYXJhbSAge01lc3NhZ2V9IG1zZyBPcmlnaW5hbCBtZXNzYWdlIGZyb20gdGhlIE1lc3NhZ2VOb2RlDQogICAgICovDQogIH0sIHsNCiAgICBrZXk6ICdfZGVsaXZlcicsDQogICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxpdmVyKG1zZykgew0KICAgICAgLy8gY29uc29sZS5sb2coJ19kZWxpdmVyJywgbXNnKTsNCiAgICAgIGlmICghbXNnLmJvZHkpIG1zZy5ib2R5ID0ge307DQoNCiAgICAgIG1zZy5ib2R5LnZpYSA9IHRoaXMuX3J1bnRpbWVQcm90b1N0dWJVUkw7DQoNCiAgICAgIHRoaXMuX2J1cy5wb3N0TWVzc2FnZShtc2cpOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ2NvbmZpZycsDQogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7DQogICAgICByZXR1cm4gdGhpcy5fY29uZmlnOw0KICAgIH0NCiAgfSwgew0KICAgIGtleTogJ3J1bnRpbWVTZXNzaW9uJywNCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsNCiAgICAgIHJldHVybiB0aGlzLl9ydW50aW1lU2Vzc2lvblVSTDsNCiAgICB9DQogIH1dKTsNCg0KICByZXR1cm4gTm9kZWpzUHJvdG9TdHViOw0KfSkoKTsNCg0KZnVuY3Rpb24gYWN0aXZhdGUodXJsLCBidXMsIGNvbmZpZykgew0KICByZXR1cm4gew0KICAgIG5hbWU6ICdOb2RlanNQcm90b1N0dWInLA0KICAgIGluc3RhbmNlOiBuZXcgTm9kZWpzUHJvdG9TdHViKHVybCwgYnVzLCBjb25maWcpDQogIH07DQp9DQoNCm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOw0KDQp9LHsic29ja2V0LmlvLWNsaWVudCI6MzN9XX0se30sWzQ2XSkoNDYpDQp9KTsNCg=="
}
